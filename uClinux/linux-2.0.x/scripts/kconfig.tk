#!/usr/bin/wish -f
# FILE: header.tk
# This file is boilerplate TCL/TK function definitions for 'make xconfig'.
#
# CHANGES
# =======
#
# 8 January 1999, Michael Elizabeth Chastain, <mec@shout.net>
# - Remove unused do_cmd function (part of the 2.0 sound support).
# - Arrange buttons in three columns for better screen fitting.
# - Add CONSTANT_Y, CONSTANT_M, CONSTANT_N for commands like:
#     dep_tristate 'foo' CONFIG_FOO m
#
# 23 January 1999, Michael Elizabeth Chastain, <mec@shout.net>
# - Shut vfix the hell up.
#
# 24 January 1999, Michael Elizabeth Chastain, <mec@shout.net>
# - Improve the exit message (Jeff Ronne).

#
# This is a handy replacement for ".widget cget" that requires neither tk4
# nor additional source code uglification.
#
proc cget { w option } {
	return "[lindex [$w configure $option] 4]"
}

#
# Function to compensate for broken config.in scripts like the sound driver,
# which make dependencies on variables that are never even conditionally
# defined.
#
proc vfix { var } {
	global $var
	if [ catch {eval concat $$var} ] {
		set $var 4
	}
}

#
# Constant values used by certain dep_tristate commands.
#
set CONSTANT_Y 1
set CONSTANT_M 2
set CONSTANT_N 0
set CONSTANT_E 4

#
# Create a "reference" object to steal colors from.
#
button .ref

#
# On monochrome displays, -disabledforeground is blank by default; that's
# bad.  Fill it with -foreground instead.
#
if { [cget .ref -disabledforeground] == "" } {
	.ref configure -disabledforeground [cget .ref -foreground]
}


#
# Define some macros we will need to parse the config.in file.
#

proc mainmenu_name { text } {
	wm title . "$text"
}

proc menu_option { w menu_num text } {
	global menus_per_column
	global processed_top_level
	set processed_top_level [expr $processed_top_level + 1]
	if { $processed_top_level <= $menus_per_column } then {
	    set myframe left
	} elseif { $processed_top_level <= [expr 2 * $menus_per_column] } then {
	    set myframe middle
	} else {
	    set myframe right
	} 
	button .f0.x$menu_num -anchor w -text "$text" \
	    -command "$w .$w \"$text\""
	pack .f0.x$menu_num -pady 0 -side top -fill x -in .f0.$myframe
}

proc load_configfile { w title func } {
	catch {destroy $w}
	toplevel $w -class Dialog
	global loadfile
	frame $w.x
	label $w.bm -bitmap questhead
	pack  $w.bm -pady 10 -side top -padx 10
	label $w.x.l -text "Enter filename:" -relief raised
	entry $w.x.x -width 35 -relief sunken -borderwidth 2 \
		-textvariable loadfile
	pack $w.x.l $w.x.x -anchor w -side left
	pack $w.x -side top -pady 10
	wm title $w "$title" 

	set oldFocus [focus]
	frame $w.f
	button $w.f.back -text "OK" -width 20 \
		-command "destroy $w; focus $oldFocus;$func .fileio"
	button $w.f.canc -text "Cancel" \
		-width 20 -command "destroy $w; focus $oldFocus"
	pack $w.f.back $w.f.canc -side left -pady 10 -padx 45
	pack $w.f -pady 10 -side bottom -padx 10 -anchor w
	focus $w
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
}

proc maybe_exit { w } {
	catch {destroy $w}
	toplevel $w -class Dialog
	label $w.bm -bitmap questhead
	pack  $w.bm -pady 10 -side top -padx 10
	message $w.m -width 400 -aspect 300 \
		-text "Changes will be lost.  Are you sure?" -relief flat
	pack  $w.m -pady 10 -side top -padx 10
	wm title $w "Are you sure?" 

	set oldFocus [focus]
	frame $w.f
	button $w.f.back -text "OK" -width 20 \
		-command "exit"
	button $w.f.canc -text "Cancel" \
		-width 20 -command "destroy $w; focus $oldFocus"
	pack $w.f.back $w.f.canc -side left -pady 10 -padx 45
	pack $w.f -pady 10 -side bottom -padx 10 -anchor w
	focus $w
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
}

proc read_config_file { w } {
	global loadfile
	if { [string length $loadfile] != 0 && [file readable $loadfile] == 1 } then {
		read_config $loadfile
	} else {
		catch {destroy $w}
		toplevel $w -class Dialog
		message $w.m -width 400 -aspect 300 -text \
			"Unable to read file $loadfile" \
			 -relief raised 
		label $w.bm -bitmap error
		pack $w.bm $w.m -pady 10 -side top -padx 10
		wm title $w "Xconfig Internal Error" 

		set oldFocus [focus]
		frame $w.f
		button $w.f.back -text "Bummer" \
			-width 10 -command "destroy $w; focus $oldFocus"
		pack $w.f.back -side bottom -pady 10 -anchor s
		pack $w.f -pady 10 -side top -padx 10 -anchor s
		focus $w
		global winx; global winy
		set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
		wm geometry $w +$winx+$winy
	}
}

proc write_config_file  { w } {
	global loadfile
	if { [string length $loadfile] != 0 
    		&& ([file writable $loadfile] == 1 || ([file exists $loadfile] == 0 && [file writable [file dirname $loadfile]] == 1)) } then {
		writeconfig $loadfile /dev/null
	} else {
		catch {destroy $w}
		toplevel $w -class Dialog
		message $w.m -width 400 -aspect 300 -text \
			"Unable to write file $loadfile" \
			 -relief raised 
		label $w.bm -bitmap error
		pack $w.bm $w.m -pady 10 -side top -padx 10
		wm title $w "Xconfig Internal Error" 

		set oldFocus [focus]
		frame $w.f
		button $w.f.back -text "OK" \
			-width 10 -command "destroy $w; focus $oldFocus"
		pack $w.f.back -side bottom -pady 10 -anchor s
		pack $w.f -pady 10 -side top -padx 10 -anchor s
		focus $w
		global winx; global winy
		set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
		wm geometry $w +$winx+$winy
	}
}

proc read_config { filename } {
	set file1 [open $filename r]
	clear_choices
	while { [gets $file1 line] >= 0} {
		if [regexp {([0-9A-Za-z_]+)=([ynm])} $line foo var value] {
			if { $value == "y" } then { set cmd "global $var; set $var 1" }
			if { $value == "n" } then { set cmd "global $var; set $var 0" }
			if { $value == "m" } then { set cmd "global $var; set $var 2" }
			eval $cmd
		}
		if [regexp {# ([0-9A-Za-z_]+) is not set} $line foo var] {
			set cmd "global $var; set $var 0"
			eval $cmd
		}
		if [regexp {([0-9A-Za-z_]+)=([0-9A-Fa-f]+)} $line foo var value] {
			set cmd "global $var; set $var $value"
			eval $cmd
		}
		if [regexp {([0-9A-Za-z_]+)="([^"]*)"} $line foo var value] {
			set cmd "global $var; set $var \"$value\""
			eval $cmd
		}
	}
	close $file1
	update_choices
	update_mainmenu
}
proc write_comment { file1 file2 text } {
    	puts $file1 ""
	puts $file1 "#"
	puts $file1 "# $text"
	puts $file1 "#"
	puts $file2 "/*"
	puts $file2 " * $text"
	puts $file2 " */"
}

proc effective_dep { deplist } {
	global CONFIG_MODULES
	set depend 1
	foreach i $deplist {
		if {$i == 0} then {set depend 0}
		if {$i == 2 && $depend == 1} then {set depend 2}
	}
	if {$depend == 2 && $CONFIG_MODULES == 0} then {set depend 0}
	return $depend
}

proc sync_tristate { var dep } {
	global CONFIG_MODULES
	if {$dep == 0 && ($var == 1 || $var == 2)} then {
		set var 0
	} elseif {$dep == 2 && $var == 1} then {
		set var 2
	} elseif {$var == 2 && $CONFIG_MODULES == 0} then {
		if {$dep == 1} then {set var 1} else {set var 0}
	}
	return $var
}

proc sync_bool { var dep modset } {
	set var [sync_tristate $var $dep]
	if {$dep == 2 && $var == 2} then {
		set var $modset
	}
	return $var
}

proc write_tristate { file1 file2 varname variable deplist modset } {
	set variable [sync_tristate $variable [effective_dep $deplist]]
	if { $variable == 2 } \
		then { set variable $modset }
	if { $variable == 1 } \
		then { puts $file1 "$varname=y"; \
		       puts $file2 "#define $varname 1" } \
	elseif { $variable == 2 } \
		then { puts $file1 "$varname=m"; \
		       puts $file2 "#undef  $varname"; \
		       puts $file2 "#define ${varname}_MODULE 1" } \
	elseif { $variable == 0 } \
		then { puts $file1 "# $varname is not set"; \
		       puts $file2 "#undef  $varname"} \
	else { \
	    puts stdout "ERROR - Attempting to write value for unconfigured variable ($varname=$variable)." \
	}
}

proc write_int { file1 file2 varname variable dep } {
	if { $dep == 0 } \
		then { puts $file1 "# $varname is not set"; \
		       puts $file2 "#undef  $varname"} \
	else {
		puts $file1 "$varname=$variable"; \
		puts $file2 "#define $varname ($variable)"; \
	}
}

proc write_hex { file1 file2 varname variable dep } {
	if { $dep == 0 } \
		then { puts $file1 "# $varname is not set"; \
		       puts $file2 "#undef  $varname"} \
	else {
		puts $file1 "$varname=$variable"; \
		puts -nonewline $file2 "#define $varname 0x"; \
		puts $file2 [exec echo $variable | sed s/^0\[xX\]//]; \
	}
}

proc write_string { file1 file2 varname variable dep } {
	if { $dep == 0 } \
		then { puts $file1 "# $varname is not set"; \
		       puts $file2 "#undef  $varname"} \
	else {
		puts $file1 "$varname=\"$variable\""; \
		puts $file2 "#define $varname \"$variable\""; \
	}
}

proc option_name {w mnum line text helpidx} {
	button $w.x$line.l -text "$text" -relief groove -anchor w
	$w.x$line.l configure -activefore [cget $w.x$line.l -fg] \
				-activeback [cget $w.x$line.l -bg]
	button $w.x$line.help -text "Help" -relief raised \
		-command "dohelp .dohelp $helpidx .menu$mnum"
	pack $w.x$line.help -side right -fill y
	pack $w.x$line.l -side right -fill both -expand on
}

proc toggle_switch2 {w mnum line text variable} {
	frame $w.x$line -relief sunken
	radiobutton $w.x$line.y -text "y" -variable $variable -value 1 \
		-relief groove -width 2 -command "update_active"
	radiobutton $w.x$line.m -text "-"  -variable $variable -value 2 \
		-relief groove -width 2 -command "update_active"
	radiobutton $w.x$line.n -text "n"  -variable $variable -value 0 \
		-relief groove -width 2 -command "update_active"

	option_name $w $mnum $line $text $variable

	pack $w.x$line.n $w.x$line.m $w.x$line.y -side right -fill y
}

proc toggle_switch3 {w mnum line text variable} {
	frame $w.x$line -relief sunken
	radiobutton $w.x$line.y -text "y" -variable $variable -value 1 \
		-relief groove -width 2 -command "update_active"
	radiobutton $w.x$line.m -text "m"  -variable $variable -value 2 \
		-relief groove -width 2 -command "update_active"
	radiobutton $w.x$line.n -text "n"  -variable $variable -value 0 \
		-relief groove -width 2 -command "update_active"

	option_name $w $mnum $line $text $variable

	global CONFIG_MODULES
	if {($CONFIG_MODULES == 0)} then {
		$w.x$line.m configure -state disabled
	}
	pack $w.x$line.n $w.x$line.m $w.x$line.y -side right -fill y
}

proc bool {w mnum line text variable} {
	toggle_switch2 $w $mnum $line $text $variable
	$w.x$line.m configure -state disabled
	pack $w.x$line -anchor w -fill both -expand on
}

proc tristate {w mnum line text variable } {
	toggle_switch3 $w $mnum $line $text $variable
	pack $w.x$line -anchor w -fill both -expand on
}

proc dep_tristate {w mnum line text variable } {
	tristate $w $mnum $line $text $variable
}

proc dep_bool {w mnum line text variable } {
	bool $w $mnum $line $text $variable
}

proc int { w mnum line text variable } {
	frame $w.x$line
	entry $w.x$line.x -width 18 -relief sunken -borderwidth 2 \
		-textvariable $variable
	option_name $w $mnum $line $text $variable
	pack $w.x$line.x -anchor w -side right -fill y
	pack $w.x$line -anchor w -fill both -expand on
}

proc hex { w mnum line text variable } {
	int $w $mnum $line $text $variable
}

proc istring { w mnum line text variable } {
	frame $w.x$line
	entry $w.x$line.x -width 18 -relief sunken -borderwidth 2 \
		-textvariable $variable
	option_name $w $mnum $line $text $variable
	pack $w.x$line.x -anchor w -side right -fill y
	pack $w.x$line -anchor w -fill both -expand on
}

proc minimenu { w mnum line text variable helpidx } {
	frame $w.x$line
	menubutton $w.x$line.x -width 17 -textvariable $variable -menu \
		$w.x$line.x.menu -relief raised \
		-anchor w
	option_name $w $mnum $line $text $helpidx
	pack $w.x$line.x -anchor w -side right -fill y
	pack $w.x$line -anchor w -fill both -expand on
}

proc menusplit {w m n} {
	if { $n > 2 } then {
		set menuoptsize [expr [$m yposition 2] - [$m yposition 1]]   
		set maxsize [winfo screenheight $w]
		set splitpoint [expr $maxsize * 4 / 5 / $menuoptsize - 1]
		for {set i [expr $splitpoint + 1]} {$i <= $n} {incr i $splitpoint} {
			$m entryconfigure $i -columnbreak 1
		}
	}
}

proc submenu { w mnum line text subnum } {
	frame $w.x$line
	button $w.x$line.l -text "" -width 15 -relief groove
	$w.x$line.l configure -activefore [cget $w.x$line.l -fg] \
		-activeback [cget $w.x$line.l -bg] -state disabled
	button $w.x$line.m -text "$text" -relief raised -anchor w \
		-command "catch {destroy .menu$subnum}; menu$subnum .menu$subnum \"$text\""
	pack $w.x$line.l -side left -fill both
	pack $w.x$line.m -anchor w -side right -fill both -expand on
	pack $w.x$line -anchor w -fill both -expand on
}

proc comment {w mnum line text } {
	frame $w.x$line
	button $w.x$line.l -text "" -width 15 -relief groove
	$w.x$line.l configure -activefore [cget $w.x$line.l -fg] \
		-activeback [cget $w.x$line.l -bg] -state disabled
	button $w.x$line.m -text "$text" -relief groove -anchor w
	$w.x$line.m configure -activefore [cget $w.x$line.m -fg] \
		-activeback [cget $w.x$line.m -bg]
	pack $w.x$line.l -side left -fill both
	pack $w.x$line.m -anchor w -side right -fill both -expand on
	pack $w.x$line -anchor w -fill both -expand on
}

proc dohelp {w var parent}  {
	catch {destroy $w}
	toplevel $w -class Dialog

	set filefound 0
	set found 0
	set lineno 0

	global help_file
	if { "$help_file" == "" } {
		set help_file "Documentation/Configure.help"
	}

	if { [file readable $help_file] == 1} then {
		set filefound 1
		# First escape sed regexp special characters in var:
		set var [exec echo "$var" | sed s/\[\]\[\/.^$*\]/\\\\&/g]
		# Now pick out right help text:
		set message [exec sed -n "
			/^$var\[ 	\]*\$/,\${
				/^$var\[ 	\]*\$/c\\
${var}:\\

				/^#/b
				/^\[^ 	\]/q
				s/^  //
				p
			}
			" $help_file]
		set found [expr [string length "$message"] > 0]
	}

	frame $w.f1
	pack $w.f1 -fill both -expand on

	# Do the OK button
	#
	set oldFocus [focus]
	frame $w.f2
	button $w.f2.ok -text "OK" \
		-width 10 -command "destroy $w; catch {focus $oldFocus}"
	pack $w.f2.ok -side bottom -pady 6 -anchor n
	pack $w.f2 -side bottom -padx 10 -anchor s

	scrollbar $w.f1.vscroll -command "$w.f1.canvas yview"
	pack $w.f1.vscroll -side right -fill y

	canvas $w.f1.canvas -relief flat -borderwidth 0 \
		-yscrollcommand "$w.f1.vscroll set"
	frame $w.f1.f
	pack $w.f1.canvas -side right -fill y -expand on

	if { $found == 0 } then {
		if { $filefound == 0 } then {
		message $w.f1.f.m -width 750 -aspect 300 -relief flat -text \
			"No help available - unable to open file $help_file.  This file should have come with your kernel."
		} else {
		message $w.f1.f.m -width 400 -aspect 300 -relief flat -text \
			"No help available for $var"
		}
		label $w.f1.bm -bitmap error
		wm title $w "RTFM"
	} else {
		text $w.f1.f.m -width 73 -relief flat -wrap word
		$w.f1.f.m insert 0.0 $message
		$w.f1.f.m conf -state disabled -height [$w.f1.f.m index end]

		label $w.f1.bm -bitmap info
		wm title $w "Configuration help" 
	}
	pack $w.f1.f.m -side left
	pack $w.f1.bm $w.f1.f -side left -padx 10

	focus $w
	set winx [expr [winfo x $parent]+20]
	set winy [expr [winfo y $parent]+20]
	wm geometry $w +$winx+$winy
	set sizok [expr [winfo reqheight $w.f2.ok] + 12]
	set maxy [expr [winfo screenheight .] * 3 / 4]
	set canvtotal [winfo reqheight $w.f1.f.m]
	if [expr $sizok + $canvtotal < $maxy] {
		set sizy $canvtotal
	} else {
		set sizy [expr $maxy - $sizok]
	}
	$w.f1.canvas configure -height $sizy -width [winfo reqwidth $w.f1.f.m] \
		-scrollregion "0 0 [winfo reqwidth $w.f1.f.m] \
			[winfo reqheight $w.f1.f.m]"
	$w.f1.canvas create window 0 0 -anchor nw -window $w.f1.f
	update idletasks

	set maxy [winfo screenheight .]
	if [expr $sizok + $canvtotal < $maxy] {
		set sizy [expr $sizok + $canvtotal]
	} else {
		set sizy $maxy
	}
	wm maxsize $w [winfo width $w] $sizy
}

proc wrapup {w }  {
	catch {destroy $w}
	toplevel $w -class Dialog

	global CONFIG_MODVERSIONS; vfix CONFIG_MODVERSIONS
	if { ([file exists .hdepend] != 1) || ($CONFIG_MODVERSIONS == 1) } then {
	    message $w.m -width 400 -aspect 300 -relief raised -text \
		"End of Linux kernel configuration.  Check the top-level Makefile for additional configuration.  Next, you must run 'make dep'."
	} else {
	    message $w.m -width 400 -aspect 300 -relief raised -text \
		"End of Linux kernel configuration.  Check the top-level Makefile for additional configuration.  Next, you may 'make bzImage', 'make bzdisk', or 'make bzlilo.'"
	}
	label $w.bm -bitmap info
	pack $w.bm $w.m -pady 10 -side top -padx 10
	wm title $w "Kernel build instructions" 

	set oldFocus [focus]
	frame $w.f
	button $w.f.back -text "OK" \
		-width 10 -command "exit"
	pack $w.f.back -side bottom -pady 10 -anchor s
	pack $w.f -pady 10 -side top -padx 10 -anchor s
	focus $w
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy

}

proc unregister_active {num} {
	global active_menus
	set index [lsearch -exact $active_menus $num]
	if {$index != -1} then {set active_menus [lreplace $active_menus $index $index]}
}

proc update_active {} {
	global active_menus total_menus
	set max 0
	if {[llength $active_menus] > 0} then {
		set max [lindex $active_menus end]
		update_define [toplevel_menu [lindex $active_menus 0]] $max 0
	}
	foreach i $active_menus {
		if {[winfo exists .menu$i] == 0} then {
			unregister_active $i
		} else {
			update_menu$i
		}
	}
	update_define [expr $max + 1] $total_menus 1
	update_mainmenu
}

proc configure_entry {w option items} {
	foreach i $items {
		$w.$i configure -state $option
	}
}

proc validate_int {name val default} {
	if {([exec echo $val | sed s/^-//g | tr -d \[:digit:\] ] != "")} then {
		global $name; set $name $default
	}
}

proc validate_hex {name val default} {
	if {([exec echo $val | tr -d \[:xdigit:\] ] != "")} then {
		global $name; set $name $default
	}
}

proc update_define {first last allow_update} {
	for {set i $first} {$i <= $last} {incr i} {
		update_define_menu$i
		if {$allow_update == 1} then update
	}
}

#
# Next set up the particulars for the top level menu, and define a few
# buttons which we will stick down at the bottom.
#

frame .f0 
frame .f0.left
frame .f0.middle
frame .f0.right

set active_menus [list]
set processed_top_level 0
set help_file ""
set menus_per_column 6
set total_menus 12

proc toplevel_menu {num} {
	if {$num == 9} then {return 8}
	return $num
}

mainmenu_name "uClinux/68k (w/o MMU) Kernel Configuration"
menu_option menu1 1 "Code maturity level options"
proc menu1 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 1}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 1]]
	message $w.m -width 400 -aspect 300 -text \
		"Code maturity level options"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Code maturity level options" 

	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 1"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 1; menu2 .menu2 \"$title\""
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 1; menu0 .menu0 \"$title\""
	$w.f.prev configure -state disabled
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 1 0 "Prompt for development and/or incomplete code/drivers" CONFIG_EXPERIMENTAL



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu1 {} {
}


proc update_define_menu1 {} {
	update_define_mainmenu
	global CONFIG_MODULES
}


menu_option menu2 2 "Loadable module support"
proc menu2 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 2}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 2]]
	message $w.m -width 400 -aspect 300 -text \
		"Loadable module support"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Loadable module support" 

	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 2"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 2; menu3 .menu3 \"$title\""
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 2; menu1 .menu1 \"$title\""
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 2 0 "Enable loadable module support" CONFIG_MODULES
	bool $w.config.f 2 1 "Set version information on all symbols for modules" CONFIG_MODVERSIONS
	bool $w.config.f 2 2 "Kernel daemon support (e.g. autoload of modules)" CONFIG_KERNELD



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu2 {} {
	global CONFIG_MODULES
	global CONFIG_MODVERSIONS
	if {($CONFIG_MODULES == 1)} then {
	configure_entry .menu2.config.f.x1 normal {n l y}} else {configure_entry .menu2.config.f.x1 disabled {y n l}}
	global CONFIG_KERNELD
	if {($CONFIG_MODULES == 1)} then {
	configure_entry .menu2.config.f.x2 normal {n l y}} else {configure_entry .menu2.config.f.x2 disabled {y n l}}
}


proc update_define_menu2 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_MODVERSIONS
set CONFIG_MODVERSIONS [expr $CONFIG_MODVERSIONS|16]
	global CONFIG_KERNELD
set CONFIG_KERNELD [expr $CONFIG_KERNELD|16]
	if {($CONFIG_MODULES == 1)} then {
	set CONFIG_MODVERSIONS [expr $CONFIG_MODVERSIONS&15]}
	if {($CONFIG_MODULES == 1)} then {
	set CONFIG_KERNELD [expr $CONFIG_KERNELD&15]}
}


menu_option menu3 3 "Platform dependant setup"
proc menu3 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 3}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 3]]
	message $w.m -width 400 -aspect 300 -text \
		"Platform dependant setup"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Platform dependant setup" 

	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 3"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 3; menu4 .menu4 \"$title\""
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 3; menu2 .menu2 \"$title\""
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	global tmpvar_0
	minimenu $w.config.f 3 0 "CPU" tmpvar_0 CONFIG_M68000
	menu $w.config.f.x0.x.menu -title "CPU"
	$w.config.f.x0.x.menu add radiobutton -label "MC68000" -variable tmpvar_0 -value "MC68000" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "MC68EN302" -variable tmpvar_0 -value "MC68EN302" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "MC68328" -variable tmpvar_0 -value "MC68328" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "MC68EZ328" -variable tmpvar_0 -value "MC68EZ328" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "MC68332" -variable tmpvar_0 -value "MC68332" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "MC68360" -variable tmpvar_0 -value "MC68360" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "MC68376" -variable tmpvar_0 -value "MC68376" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "MCF5204" -variable tmpvar_0 -value "MCF5204" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "MCF5206" -variable tmpvar_0 -value "MCF5206" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "MCF5206e" -variable tmpvar_0 -value "MCF5206e" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "MCF5249" -variable tmpvar_0 -value "MCF5249" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "MCF5272" -variable tmpvar_0 -value "MCF5272" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "MCF5307" -variable tmpvar_0 -value "MCF5307" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "MCF5407" -variable tmpvar_0 -value "MCF5407" -command "update_active"
	menusplit $w $w.config.f.x0.x.menu 14
	global tmpvar_1
	minimenu $w.config.f 3 1 "CPU CLOCK Frequency" tmpvar_1 CONFIG_CLOCK_AUTO
	menu $w.config.f.x1.x.menu -title "CPU CLOCK Frequency"
	$w.config.f.x1.x.menu add radiobutton -label "AUTO" -variable tmpvar_1 -value "AUTO" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "11MHz" -variable tmpvar_1 -value "11MHz" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "16MHz" -variable tmpvar_1 -value "16MHz" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "20MHz" -variable tmpvar_1 -value "20MHz" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "24MHz" -variable tmpvar_1 -value "24MHz" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "25MHz" -variable tmpvar_1 -value "25MHz" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "33MHz" -variable tmpvar_1 -value "33MHz" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "40MHz" -variable tmpvar_1 -value "40MHz" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "45MHz" -variable tmpvar_1 -value "45MHz" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "48MHz" -variable tmpvar_1 -value "48MHz" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "50MHz" -variable tmpvar_1 -value "50MHz" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "54MHz" -variable tmpvar_1 -value "54MHz" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "60MHz" -variable tmpvar_1 -value "60MHz" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "64MHz" -variable tmpvar_1 -value "64MHz" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "66MHz" -variable tmpvar_1 -value "66MHz" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "70MHz" -variable tmpvar_1 -value "70MHz" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "140MHz" -variable tmpvar_1 -value "140MHz" -command "update_active"
	menusplit $w $w.config.f.x1.x.menu 17
	bool $w.config.f 3 2 "Old mask 5307 (1H55J) silicon" CONFIG_OLDMASK
	comment $w.config.f 3 3 "Platform"
	bool $w.config.f 3 4 "Pilot 1000/5000, PalmPilot Personal/Pro, or PalmIII support" CONFIG_PILOT3
	bool $w.config.f 3 5 "  (X)Copilot support" CONFIG_XCOPILOT_BUGS
	bool $w.config.f 3 6 "Motorola M68EZ328ADS board support" CONFIG_M68EZ328ADS
	bool $w.config.f 3 7 "ALMA Electronics board support" CONFIG_ALMA_ANS
	bool $w.config.f 3 8 "uCsimm module support" CONFIG_UCSIMM
	bool $w.config.f 3 9 "Cwlinux cwez328 support" CONFIG_CWEZ328
	bool $w.config.f 3 10 "PalmV support" CONFIG_PILOT5
	bool $w.config.f 3 11 "Aplio Pro" CONFIG_APLIO_PRO
	bool $w.config.f 3 12 "Aplio Entrecote" CONFIG_APLIO_ENTRECOTE
	global tmpvar_2
	minimenu $w.config.f 3 13 "    Select Board" tmpvar_2 CONFIG_SHGLCORE
	menu $w.config.f.x13.x.menu -title "    Select Board"
	$w.config.f.x13.x.menu add radiobutton -label "SHGLCORE" -variable tmpvar_2 -value "SHGLCORE" -command "update_active"
	$w.config.f.x13.x.menu add radiobutton -label "MWI" -variable tmpvar_2 -value "MWI" -command "update_active"
	menusplit $w $w.config.f.x13.x.menu 2
	bool $w.config.f 3 14 "  2Meg SHGLCore" CONFIG_SHGLCORE_2MEG
	bool $w.config.f 3 15 "  ROMFS image not RAM resident" CONFIG_ROMFS_FROM_ROM
	bool $w.config.f 3 16 "Lineo uCquicc board support" CONFIG_UCQUICC
	bool $w.config.f 3 17 "SED SIOS board support" CONFIG_SED_SIOS
	global tmpvar_3
	minimenu $w.config.f 3 18 "    SIOS Card type" tmpvar_3 CONFIG_SED_SIOS_MASTER
	menu $w.config.f.x18.x.menu -title "    SIOS Card type"
	$w.config.f.x18.x.menu add radiobutton -label "MASTER_CARD" -variable tmpvar_3 -value "MASTER_CARD" -command "update_active"
	$w.config.f.x18.x.menu add radiobutton -label "REMOTE_CARD" -variable tmpvar_3 -value "REMOTE_CARD" -command "update_active"
	menusplit $w $w.config.f.x18.x.menu 2
	bool $w.config.f 3 19 "    MCU Status LED Support" CONFIG_SED_MCU_STATUS_LED
	bool $w.config.f 3 20 "Mecel FR1000 board" CONFIG_FR1000
	bool $w.config.f 3 21 "Arnewsh 5206 board support" CONFIG_ARN5206
	bool $w.config.f 3 22 "Motorola M5206eC3 board support" CONFIG_M5206eC3
	bool $w.config.f 3 23 "Motorola eLITE-5206e board support" CONFIG_ELITE
	bool $w.config.f 3 24 "  SRAM only eLITE-5206e support" CONFIG_SMALL
	bool $w.config.f 3 25 "Telos Omnia ToolVox board support" CONFIG_TELOS
	bool $w.config.f 3 26 "Netburner CFV2-40 board support" CONFIG_CFV240
	bool $w.config.f 3 27 "Motorola M5249C3 board support" CONFIG_M5249C3
	bool $w.config.f 3 28 "Motorola M5272C3 board support" CONFIG_M5272C3
	bool $w.config.f 3 29 "senTec COBRA5272 board support" CONFIG_COBRA5272
	bool $w.config.f 3 30 "Compiled-in Kernel Boot Parameter" CONFIG_BOOTPARAM
	istring $w.config.f 3 31 "Kernel Boot Parameter" CONFIG_BOOTPARAM_
	bool $w.config.f 3 32 "Feith CANCam board support" CONFIG_CANCam
	bool $w.config.f 3 33 "Feith Scales board support" CONFIG_SCALES
	bool $w.config.f 3 34 "Arnewsh 5307 board support" CONFIG_ARN5307
	bool $w.config.f 3 35 "Motorola M5307C3 board support" CONFIG_M5307C3
	bool $w.config.f 3 36 "eLIA board support" CONFIG_eLIA
	bool $w.config.f 3 37 "DISKtel board support" CONFIG_DISKtel
	bool $w.config.f 3 38 "SecureEdge MP3 board support" CONFIG_SECUREEDGEMP3
	bool $w.config.f 3 39 "Motorola M5407C3 board support" CONFIG_M5407C3
	bool $w.config.f 3 40 "Feith CLEOPATRA board support" CONFIG_CLEOPATRA
	bool $w.config.f 3 41 "SecureEdge/NETtel board support" CONFIG_NETtel
	bool $w.config.f 3 42 "SnapGear router board support" CONFIG_SNAPGEAR
	bool $w.config.f 3 43 "  ROMFS image not RAM resident" CONFIG_ROMFS_FROM_ROM
	bool $w.config.f 3 44 "Weiss-Electronic SM2010 support" CONFIG_SM2010
	bool $w.config.f 3 45 "BMOW 68Katy support" CONFIG_68KATY
	bool $w.config.f 3 46 "Mac Plus support" CONFIG_MAC_PLUS
	global tmpvar_4
	minimenu $w.config.f 3 47 "RAM size" tmpvar_4 CONFIG_RAMAUTO
	menu $w.config.f.x47.x.menu -title "RAM size"
	$w.config.f.x47.x.menu add radiobutton -label "AUTO" -variable tmpvar_4 -value "AUTO" -command "update_active"
	$w.config.f.x47.x.menu add radiobutton -label "0.5MB" -variable tmpvar_4 -value "0.5MB" -command "update_active"
	$w.config.f.x47.x.menu add radiobutton -label "1MB" -variable tmpvar_4 -value "1MB" -command "update_active"
	$w.config.f.x47.x.menu add radiobutton -label "2MB" -variable tmpvar_4 -value "2MB" -command "update_active"
	$w.config.f.x47.x.menu add radiobutton -label "4MB" -variable tmpvar_4 -value "4MB" -command "update_active"
	$w.config.f.x47.x.menu add radiobutton -label "8MB" -variable tmpvar_4 -value "8MB" -command "update_active"
	$w.config.f.x47.x.menu add radiobutton -label "16MB" -variable tmpvar_4 -value "16MB" -command "update_active"
	$w.config.f.x47.x.menu add radiobutton -label "32MB" -variable tmpvar_4 -value "32MB" -command "update_active"
	$w.config.f.x47.x.menu add radiobutton -label "64MB" -variable tmpvar_4 -value "64MB" -command "update_active"
	menusplit $w $w.config.f.x47.x.menu 9
	global tmpvar_5
	minimenu $w.config.f 3 48 "RAM bit width" tmpvar_5 CONFIG_AUTOBIT
	menu $w.config.f.x48.x.menu -title "RAM bit width"
	$w.config.f.x48.x.menu add radiobutton -label "AUTO" -variable tmpvar_5 -value "AUTO" -command "update_active"
	$w.config.f.x48.x.menu add radiobutton -label "8bit" -variable tmpvar_5 -value "8bit" -command "update_active"
	$w.config.f.x48.x.menu add radiobutton -label "16bit" -variable tmpvar_5 -value "16bit" -command "update_active"
	$w.config.f.x48.x.menu add radiobutton -label "32bit" -variable tmpvar_5 -value "32bit" -command "update_active"
	menusplit $w $w.config.f.x48.x.menu 4
	global tmpvar_6
	minimenu $w.config.f 3 49 "Kernel executes from" tmpvar_6 CONFIG_RAMKERNEL
	menu $w.config.f.x49.x.menu -title "Kernel executes from"
	$w.config.f.x49.x.menu add radiobutton -label "RAM" -variable tmpvar_6 -value "RAM" -command "update_active"
	$w.config.f.x49.x.menu add radiobutton -label "ROM" -variable tmpvar_6 -value "ROM" -command "update_active"
	menusplit $w $w.config.f.x49.x.menu 2



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu3 {} {
	global CONFIG_M5307
	global CONFIG_OLDMASK
	if {($CONFIG_M5307 == 1)} then {
	configure_entry .menu3.config.f.x2 normal {n l y}} else {configure_entry .menu3.config.f.x2 disabled {y n l}}
	global CONFIG_M68328
	global CONFIG_PILOT3
	if {($CONFIG_M68328 == 1)} then {
	configure_entry .menu3.config.f.x4 normal {n l y}} else {configure_entry .menu3.config.f.x4 disabled {y n l}}
	global CONFIG_XCOPILOT_BUGS
	if {($CONFIG_M68328 == 1) && ($CONFIG_PILOT3 == 1)} then {
	configure_entry .menu3.config.f.x5 normal {n l y}} else {configure_entry .menu3.config.f.x5 disabled {y n l}}
	global CONFIG_M68EZ328
	global CONFIG_M68EZ328ADS
	if {($CONFIG_M68EZ328 == 1)} then {
	configure_entry .menu3.config.f.x6 normal {n l y}} else {configure_entry .menu3.config.f.x6 disabled {y n l}}
	global CONFIG_ALMA_ANS
	if {($CONFIG_M68EZ328 == 1)} then {
	configure_entry .menu3.config.f.x7 normal {n l y}} else {configure_entry .menu3.config.f.x7 disabled {y n l}}
	global CONFIG_UCSIMM
	if {($CONFIG_M68EZ328 == 1)} then {
	configure_entry .menu3.config.f.x8 normal {n l y}} else {configure_entry .menu3.config.f.x8 disabled {y n l}}
	global CONFIG_CWEZ328
	if {($CONFIG_M68EZ328 == 1)} then {
	configure_entry .menu3.config.f.x9 normal {n l y}} else {configure_entry .menu3.config.f.x9 disabled {y n l}}
	global CONFIG_PILOT5
	if {($CONFIG_M68EZ328 == 1)} then {
	configure_entry .menu3.config.f.x10 normal {n l y}} else {configure_entry .menu3.config.f.x10 disabled {y n l}}
	global CONFIG_M68EN302
	global CONFIG_APLIO_PRO
	if {($CONFIG_M68EN302 == 1)} then {
	configure_entry .menu3.config.f.x11 normal {n l y}} else {configure_entry .menu3.config.f.x11 disabled {y n l}}
	global CONFIG_APLIO_ENTRECOTE
	if {($CONFIG_M68EN302 == 1)} then {
	configure_entry .menu3.config.f.x12 normal {n l y}} else {configure_entry .menu3.config.f.x12 disabled {y n l}}
	global CONFIG_M68332
	if {($CONFIG_M68332 == 1)} then {configure_entry .menu3.config.f.x13 normal {x l}} else {configure_entry .menu3.config.f.x13 disabled {x l}}
	global CONFIG_SHGLCORE
	global CONFIG_SHGLCORE_2MEG
	if {($CONFIG_M68332 == 1) && ($CONFIG_SHGLCORE == 1)} then {
	configure_entry .menu3.config.f.x14 normal {n l y}} else {configure_entry .menu3.config.f.x14 disabled {y n l}}
	global CONFIG_MWI
	global CONFIG_ROMFS_FROM_ROM
	if {($CONFIG_M68332 == 1) && ($CONFIG_MWI == 1)} then {
	configure_entry .menu3.config.f.x15 normal {n l y}} else {configure_entry .menu3.config.f.x15 disabled {y n l}}
	global CONFIG_M68360
	global CONFIG_UCQUICC
	if {($CONFIG_M68360 == 1)} then {
	configure_entry .menu3.config.f.x16 normal {n l y}} else {configure_entry .menu3.config.f.x16 disabled {y n l}}
	global CONFIG_SED_SIOS
	if {($CONFIG_M68360 == 1)} then {
	configure_entry .menu3.config.f.x17 normal {n l y}} else {configure_entry .menu3.config.f.x17 disabled {y n l}}
	if {($CONFIG_M68360 == 1) && ($CONFIG_SED_SIOS == 1)} then {configure_entry .menu3.config.f.x18 normal {x l}} else {configure_entry .menu3.config.f.x18 disabled {x l}}
	global CONFIG_SED_SIOS_MASTER
	global CONFIG_SED_MCU_STATUS_LED
	if {($CONFIG_M68360 == 1) && ($CONFIG_SED_SIOS == 1) && ($CONFIG_SED_SIOS_MASTER == 1)} then {
	configure_entry .menu3.config.f.x19 normal {n l y}} else {configure_entry .menu3.config.f.x19 disabled {y n l}}
	global CONFIG_M68376
	global CONFIG_FR1000
	if {($CONFIG_M68376 == 1)} then {
	configure_entry .menu3.config.f.x20 normal {n l y}} else {configure_entry .menu3.config.f.x20 disabled {y n l}}
	global CONFIG_M5206
	global CONFIG_ARN5206
	if {($CONFIG_M5206 == 1)} then {
	configure_entry .menu3.config.f.x21 normal {n l y}} else {configure_entry .menu3.config.f.x21 disabled {y n l}}
	global CONFIG_M5206e
	global CONFIG_M5206eC3
	if {($CONFIG_M5206e == 1)} then {
	configure_entry .menu3.config.f.x22 normal {n l y}} else {configure_entry .menu3.config.f.x22 disabled {y n l}}
	global CONFIG_ELITE
	if {($CONFIG_M5206e == 1)} then {
	configure_entry .menu3.config.f.x23 normal {n l y}} else {configure_entry .menu3.config.f.x23 disabled {y n l}}
	global CONFIG_SMALL
	if {($CONFIG_M5206e == 1) && ($CONFIG_ELITE == 1)} then {
	configure_entry .menu3.config.f.x24 normal {n l y}} else {configure_entry .menu3.config.f.x24 disabled {y n l}}
	global CONFIG_TELOS
	if {($CONFIG_M5206e == 1)} then {
	configure_entry .menu3.config.f.x25 normal {n l y}} else {configure_entry .menu3.config.f.x25 disabled {y n l}}
	global CONFIG_CFV240
	if {($CONFIG_M5206e == 1)} then {
	configure_entry .menu3.config.f.x26 normal {n l y}} else {configure_entry .menu3.config.f.x26 disabled {y n l}}
	global CONFIG_M5249
	global CONFIG_M5249C3
	if {($CONFIG_M5249 == 1)} then {
	configure_entry .menu3.config.f.x27 normal {n l y}} else {configure_entry .menu3.config.f.x27 disabled {y n l}}
	global CONFIG_M5272
	global CONFIG_M5272C3
	if {($CONFIG_M5272 == 1)} then {
	configure_entry .menu3.config.f.x28 normal {n l y}} else {configure_entry .menu3.config.f.x28 disabled {y n l}}
	global CONFIG_COBRA5272
	if {($CONFIG_M5272 == 1)} then {
	configure_entry .menu3.config.f.x29 normal {n l y}} else {configure_entry .menu3.config.f.x29 disabled {y n l}}
	global CONFIG_BOOTPARAM
	if {($CONFIG_M5272 == 1) && ($CONFIG_COBRA5272 == 1)} then {
	configure_entry .menu3.config.f.x30 normal {n l y}} else {configure_entry .menu3.config.f.x30 disabled {y n l}}
	global CONFIG_BOOTPARAM_
	if {($CONFIG_M5272 == 1) && ($CONFIG_COBRA5272 == 1) && ($CONFIG_BOOTPARAM == 1)} then {.menu3.config.f.x31.x configure -state normal -foreground [ cget .ref -foreground ]; .menu3.config.f.x31.l configure -state normal; } else {.menu3.config.f.x31.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu3.config.f.x31.l configure -state disabled}
	global CONFIG_CANCam
	if {($CONFIG_M5272 == 1)} then {
	configure_entry .menu3.config.f.x32 normal {n l y}} else {configure_entry .menu3.config.f.x32 disabled {y n l}}
	global CONFIG_SCALES
	if {($CONFIG_M5272 == 1)} then {
	configure_entry .menu3.config.f.x33 normal {n l y}} else {configure_entry .menu3.config.f.x33 disabled {y n l}}
	global CONFIG_ARN5307
	if {($CONFIG_M5307 == 1)} then {
	configure_entry .menu3.config.f.x34 normal {n l y}} else {configure_entry .menu3.config.f.x34 disabled {y n l}}
	global CONFIG_M5307C3
	if {($CONFIG_M5307 == 1)} then {
	configure_entry .menu3.config.f.x35 normal {n l y}} else {configure_entry .menu3.config.f.x35 disabled {y n l}}
	global CONFIG_eLIA
	if {($CONFIG_M5307 == 1)} then {
	configure_entry .menu3.config.f.x36 normal {n l y}} else {configure_entry .menu3.config.f.x36 disabled {y n l}}
	global CONFIG_DISKtel
	if {($CONFIG_M5307 == 1)} then {
	configure_entry .menu3.config.f.x37 normal {n l y}} else {configure_entry .menu3.config.f.x37 disabled {y n l}}
	global CONFIG_SECUREEDGEMP3
	if {($CONFIG_M5307 == 1)} then {
	configure_entry .menu3.config.f.x38 normal {n l y}} else {configure_entry .menu3.config.f.x38 disabled {y n l}}
	global CONFIG_M5407
	global CONFIG_M5407C3
	if {($CONFIG_M5407 == 1)} then {
	configure_entry .menu3.config.f.x39 normal {n l y}} else {configure_entry .menu3.config.f.x39 disabled {y n l}}
	global CONFIG_CLEOPATRA
	if {($CONFIG_M5307 == 1 || $CONFIG_M5407 == 1)} then {
	configure_entry .menu3.config.f.x40 normal {n l y}} else {configure_entry .menu3.config.f.x40 disabled {y n l}}
	global CONFIG_NETtel
	if {($CONFIG_M5206e == 1 || $CONFIG_M5272 == 1 || $CONFIG_M5307 == 1)} then {
	configure_entry .menu3.config.f.x41 normal {n l y}} else {configure_entry .menu3.config.f.x41 disabled {y n l}}
	global CONFIG_SNAPGEAR
	if {($CONFIG_M5206e == 1 || $CONFIG_M5272 == 1 || $CONFIG_M5307 == 1)} then {
	configure_entry .menu3.config.f.x42 normal {n l y}} else {configure_entry .menu3.config.f.x42 disabled {y n l}}
	if {($CONFIG_M5206e == 1 || $CONFIG_M5272 == 1 || $CONFIG_M5307 == 1)} then {
	configure_entry .menu3.config.f.x43 normal {n l y}} else {configure_entry .menu3.config.f.x43 disabled {y n l}}
	global CONFIG_M68000
	global CONFIG_SM2010
	if {($CONFIG_M68000 == 1)} then {
	configure_entry .menu3.config.f.x44 normal {n l y}} else {configure_entry .menu3.config.f.x44 disabled {y n l}}
	global CONFIG_68KATY
	if {($CONFIG_M68000 == 1)} then {
	configure_entry .menu3.config.f.x45 normal {n l y}} else {configure_entry .menu3.config.f.x45 disabled {y n l}}
	global CONFIG_MAC_PLUS
	if {($CONFIG_M68000 == 1)} then {
	configure_entry .menu3.config.f.x46 normal {n l y}} else {configure_entry .menu3.config.f.x46 disabled {y n l}}
}


proc update_define_menu3 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_COLDFIRE
	global CONFIG_360QUICC
	global CONFIG_CPU32
	global CONFIG_PILOT
	global CONFIG_APLIO
	global CONFIG_ARNEWSH
	global CONFIG_MOTOROLA
	global CONFIG_HW_FEITH
	global CONFIG_OLDMASK
set CONFIG_OLDMASK [expr $CONFIG_OLDMASK|16]
	global CONFIG_PILOT3
set CONFIG_PILOT3 [expr $CONFIG_PILOT3|16]
	global CONFIG_XCOPILOT_BUGS
set CONFIG_XCOPILOT_BUGS [expr $CONFIG_XCOPILOT_BUGS|16]
	global CONFIG_M68EZ328ADS
set CONFIG_M68EZ328ADS [expr $CONFIG_M68EZ328ADS|16]
	global CONFIG_ALMA_ANS
set CONFIG_ALMA_ANS [expr $CONFIG_ALMA_ANS|16]
	global CONFIG_UCSIMM
set CONFIG_UCSIMM [expr $CONFIG_UCSIMM|16]
	global CONFIG_CWEZ328
set CONFIG_CWEZ328 [expr $CONFIG_CWEZ328|16]
	global CONFIG_PILOT5
set CONFIG_PILOT5 [expr $CONFIG_PILOT5|16]
	global CONFIG_APLIO_PRO
set CONFIG_APLIO_PRO [expr $CONFIG_APLIO_PRO|16]
	global CONFIG_APLIO_ENTRECOTE
set CONFIG_APLIO_ENTRECOTE [expr $CONFIG_APLIO_ENTRECOTE|16]
	global CONFIG_SHGLCORE_2MEG
set CONFIG_SHGLCORE_2MEG [expr $CONFIG_SHGLCORE_2MEG|16]
	global CONFIG_ROMFS_FROM_ROM
set CONFIG_ROMFS_FROM_ROM [expr $CONFIG_ROMFS_FROM_ROM|16]
	global CONFIG_UCQUICC
set CONFIG_UCQUICC [expr $CONFIG_UCQUICC|16]
	global CONFIG_SED_SIOS
set CONFIG_SED_SIOS [expr $CONFIG_SED_SIOS|16]
	global CONFIG_SED_MCU_STATUS_LED
set CONFIG_SED_MCU_STATUS_LED [expr $CONFIG_SED_MCU_STATUS_LED|16]
	global CONFIG_FR1000
set CONFIG_FR1000 [expr $CONFIG_FR1000|16]
	global CONFIG_ARN5206
set CONFIG_ARN5206 [expr $CONFIG_ARN5206|16]
	global CONFIG_M5206eC3
set CONFIG_M5206eC3 [expr $CONFIG_M5206eC3|16]
	global CONFIG_ELITE
set CONFIG_ELITE [expr $CONFIG_ELITE|16]
	global CONFIG_SMALL
set CONFIG_SMALL [expr $CONFIG_SMALL|16]
	global CONFIG_TELOS
set CONFIG_TELOS [expr $CONFIG_TELOS|16]
	global CONFIG_CFV240
set CONFIG_CFV240 [expr $CONFIG_CFV240|16]
	global CONFIG_M5249C3
set CONFIG_M5249C3 [expr $CONFIG_M5249C3|16]
	global CONFIG_M5272C3
set CONFIG_M5272C3 [expr $CONFIG_M5272C3|16]
	global CONFIG_COBRA5272
set CONFIG_COBRA5272 [expr $CONFIG_COBRA5272|16]
	global CONFIG_BOOTPARAM
set CONFIG_BOOTPARAM [expr $CONFIG_BOOTPARAM|16]
	global CONFIG_CANCam
set CONFIG_CANCam [expr $CONFIG_CANCam|16]
	global CONFIG_SCALES
set CONFIG_SCALES [expr $CONFIG_SCALES|16]
	global CONFIG_ARN5307
set CONFIG_ARN5307 [expr $CONFIG_ARN5307|16]
	global CONFIG_M5307C3
set CONFIG_M5307C3 [expr $CONFIG_M5307C3|16]
	global CONFIG_eLIA
set CONFIG_eLIA [expr $CONFIG_eLIA|16]
	global CONFIG_DISKtel
set CONFIG_DISKtel [expr $CONFIG_DISKtel|16]
	global CONFIG_SECUREEDGEMP3
set CONFIG_SECUREEDGEMP3 [expr $CONFIG_SECUREEDGEMP3|16]
	global CONFIG_M5407C3
set CONFIG_M5407C3 [expr $CONFIG_M5407C3|16]
	global CONFIG_CLEOPATRA
set CONFIG_CLEOPATRA [expr $CONFIG_CLEOPATRA|16]
	global CONFIG_NETtel
set CONFIG_NETtel [expr $CONFIG_NETtel|16]
	global CONFIG_SNAPGEAR
set CONFIG_SNAPGEAR [expr $CONFIG_SNAPGEAR|16]
set CONFIG_ROMFS_FROM_ROM [expr $CONFIG_ROMFS_FROM_ROM|16]
	global CONFIG_SM2010
set CONFIG_SM2010 [expr $CONFIG_SM2010|16]
	global CONFIG_68KATY
set CONFIG_68KATY [expr $CONFIG_68KATY|16]
	global CONFIG_MAC_PLUS
set CONFIG_MAC_PLUS [expr $CONFIG_MAC_PLUS|16]
	global tmpvar_0
	global CONFIG_M68000
	if {$tmpvar_0 == "MC68000"} then {set CONFIG_M68000 1} else {set CONFIG_M68000 0}
	global CONFIG_M68EN302
	if {$tmpvar_0 == "MC68EN302"} then {set CONFIG_M68EN302 1} else {set CONFIG_M68EN302 0}
	global CONFIG_M68328
	if {$tmpvar_0 == "MC68328"} then {set CONFIG_M68328 1} else {set CONFIG_M68328 0}
	global CONFIG_M68EZ328
	if {$tmpvar_0 == "MC68EZ328"} then {set CONFIG_M68EZ328 1} else {set CONFIG_M68EZ328 0}
	global CONFIG_M68332
	if {$tmpvar_0 == "MC68332"} then {set CONFIG_M68332 1} else {set CONFIG_M68332 0}
	global CONFIG_M68360
	if {$tmpvar_0 == "MC68360"} then {set CONFIG_M68360 1} else {set CONFIG_M68360 0}
	global CONFIG_M68376
	if {$tmpvar_0 == "MC68376"} then {set CONFIG_M68376 1} else {set CONFIG_M68376 0}
	global CONFIG_M5204
	if {$tmpvar_0 == "MCF5204"} then {set CONFIG_M5204 1} else {set CONFIG_M5204 0}
	global CONFIG_M5206
	if {$tmpvar_0 == "MCF5206"} then {set CONFIG_M5206 1} else {set CONFIG_M5206 0}
	global CONFIG_M5206e
	if {$tmpvar_0 == "MCF5206e"} then {set CONFIG_M5206e 1} else {set CONFIG_M5206e 0}
	global CONFIG_M5249
	if {$tmpvar_0 == "MCF5249"} then {set CONFIG_M5249 1} else {set CONFIG_M5249 0}
	global CONFIG_M5272
	if {$tmpvar_0 == "MCF5272"} then {set CONFIG_M5272 1} else {set CONFIG_M5272 0}
	global CONFIG_M5307
	if {$tmpvar_0 == "MCF5307"} then {set CONFIG_M5307 1} else {set CONFIG_M5307 0}
	global CONFIG_M5407
	if {$tmpvar_0 == "MCF5407"} then {set CONFIG_M5407 1} else {set CONFIG_M5407 0}
	if {($CONFIG_M5204 == 1 || $CONFIG_M5206 == 1 || $CONFIG_M5206e == 1 || $CONFIG_M5249 == 1 || $CONFIG_M5272 == 1 || $CONFIG_M5307 == 1 || $CONFIG_M5407 == 1)} then {	global CONSTANT_Y
set CONFIG_COLDFIRE $CONSTANT_Y }
	if {($CONFIG_M68360 == 1)} then {	global CONSTANT_Y
set CONFIG_360QUICC $CONSTANT_Y }
	if {($CONFIG_M68376 == 1)} then {	global CONSTANT_Y
set CONFIG_CPU32 $CONSTANT_Y }
	global tmpvar_1
	global CONFIG_CLOCK_AUTO
	if {$tmpvar_1 == "AUTO"} then {set CONFIG_CLOCK_AUTO 1} else {set CONFIG_CLOCK_AUTO 0}
	global CONFIG_CLOCK_11MHz
	if {$tmpvar_1 == "11MHz"} then {set CONFIG_CLOCK_11MHz 1} else {set CONFIG_CLOCK_11MHz 0}
	global CONFIG_CLOCK_16MHz
	if {$tmpvar_1 == "16MHz"} then {set CONFIG_CLOCK_16MHz 1} else {set CONFIG_CLOCK_16MHz 0}
	global CONFIG_CLOCK_20MHz
	if {$tmpvar_1 == "20MHz"} then {set CONFIG_CLOCK_20MHz 1} else {set CONFIG_CLOCK_20MHz 0}
	global CONFIG_CLOCK_24MHz
	if {$tmpvar_1 == "24MHz"} then {set CONFIG_CLOCK_24MHz 1} else {set CONFIG_CLOCK_24MHz 0}
	global CONFIG_CLOCK_25MHz
	if {$tmpvar_1 == "25MHz"} then {set CONFIG_CLOCK_25MHz 1} else {set CONFIG_CLOCK_25MHz 0}
	global CONFIG_CLOCK_33MHz
	if {$tmpvar_1 == "33MHz"} then {set CONFIG_CLOCK_33MHz 1} else {set CONFIG_CLOCK_33MHz 0}
	global CONFIG_CLOCK_40MHz
	if {$tmpvar_1 == "40MHz"} then {set CONFIG_CLOCK_40MHz 1} else {set CONFIG_CLOCK_40MHz 0}
	global CONFIG_CLOCK_45MHz
	if {$tmpvar_1 == "45MHz"} then {set CONFIG_CLOCK_45MHz 1} else {set CONFIG_CLOCK_45MHz 0}
	global CONFIG_CLOCK_48MHz
	if {$tmpvar_1 == "48MHz"} then {set CONFIG_CLOCK_48MHz 1} else {set CONFIG_CLOCK_48MHz 0}
	global CONFIG_CLOCK_50MHz
	if {$tmpvar_1 == "50MHz"} then {set CONFIG_CLOCK_50MHz 1} else {set CONFIG_CLOCK_50MHz 0}
	global CONFIG_CLOCK_54MHz
	if {$tmpvar_1 == "54MHz"} then {set CONFIG_CLOCK_54MHz 1} else {set CONFIG_CLOCK_54MHz 0}
	global CONFIG_CLOCK_60MHz
	if {$tmpvar_1 == "60MHz"} then {set CONFIG_CLOCK_60MHz 1} else {set CONFIG_CLOCK_60MHz 0}
	global CONFIG_CLOCK_64MHz
	if {$tmpvar_1 == "64MHz"} then {set CONFIG_CLOCK_64MHz 1} else {set CONFIG_CLOCK_64MHz 0}
	global CONFIG_CLOCK_66MHz
	if {$tmpvar_1 == "66MHz"} then {set CONFIG_CLOCK_66MHz 1} else {set CONFIG_CLOCK_66MHz 0}
	global CONFIG_CLOCK_70MHz
	if {$tmpvar_1 == "70MHz"} then {set CONFIG_CLOCK_70MHz 1} else {set CONFIG_CLOCK_70MHz 0}
	global CONFIG_CLOCK_140MHz
	if {$tmpvar_1 == "140MHz"} then {set CONFIG_CLOCK_140MHz 1} else {set CONFIG_CLOCK_140MHz 0}
	if {($CONFIG_M5307 == 1)} then {
	set CONFIG_OLDMASK [expr $CONFIG_OLDMASK&15]}
	if {($CONFIG_M68328 == 1)} then {
	set CONFIG_PILOT3 [expr $CONFIG_PILOT3&15]}
	if {($CONFIG_M68328 == 1) && ($CONFIG_PILOT3 == 1)} then {
	set CONFIG_XCOPILOT_BUGS [expr $CONFIG_XCOPILOT_BUGS&15]}
	if {($CONFIG_M68EZ328 == 1)} then {
	set CONFIG_M68EZ328ADS [expr $CONFIG_M68EZ328ADS&15]}
	if {($CONFIG_M68EZ328 == 1)} then {
	set CONFIG_ALMA_ANS [expr $CONFIG_ALMA_ANS&15]}
	if {($CONFIG_M68EZ328 == 1)} then {
	set CONFIG_UCSIMM [expr $CONFIG_UCSIMM&15]}
	if {($CONFIG_M68EZ328 == 1)} then {
	set CONFIG_CWEZ328 [expr $CONFIG_CWEZ328&15]}
	if {($CONFIG_M68EZ328 == 1)} then {
	set CONFIG_PILOT5 [expr $CONFIG_PILOT5&15]}
	if {($CONFIG_M68EN302 == 1)} then {
	set CONFIG_APLIO_PRO [expr $CONFIG_APLIO_PRO&15]}
	if {($CONFIG_M68EN302 == 1)} then {
	set CONFIG_APLIO_ENTRECOTE [expr $CONFIG_APLIO_ENTRECOTE&15]}
	global tmpvar_2
	global CONFIG_SHGLCORE
	if {$tmpvar_2 == "SHGLCORE"} then {set CONFIG_SHGLCORE 1} else {set CONFIG_SHGLCORE 0}
	global CONFIG_MWI
	if {$tmpvar_2 == "MWI"} then {set CONFIG_MWI 1} else {set CONFIG_MWI 0}
	if {($CONFIG_M68332 == 1) && ($CONFIG_SHGLCORE == 1)} then {
	set CONFIG_SHGLCORE_2MEG [expr $CONFIG_SHGLCORE_2MEG&15]}
	if {($CONFIG_M68332 == 1) && ($CONFIG_MWI == 1)} then {
	set CONFIG_ROMFS_FROM_ROM [expr $CONFIG_ROMFS_FROM_ROM&15]}
	if {($CONFIG_M68360 == 1)} then {
	set CONFIG_UCQUICC [expr $CONFIG_UCQUICC&15]}
	if {($CONFIG_M68360 == 1)} then {
	set CONFIG_SED_SIOS [expr $CONFIG_SED_SIOS&15]}
	global tmpvar_3
	global CONFIG_SED_SIOS_MASTER
	if {$tmpvar_3 == "MASTER_CARD"} then {set CONFIG_SED_SIOS_MASTER 1} else {set CONFIG_SED_SIOS_MASTER 0}
	global CONFIG_SED_SIOS_REMOTE
	if {$tmpvar_3 == "REMOTE_CARD"} then {set CONFIG_SED_SIOS_REMOTE 1} else {set CONFIG_SED_SIOS_REMOTE 0}
	if {($CONFIG_M68360 == 1) && ($CONFIG_SED_SIOS == 1) && ($CONFIG_SED_SIOS_MASTER == 1)} then {
	set CONFIG_SED_MCU_STATUS_LED [expr $CONFIG_SED_MCU_STATUS_LED&15]}
	if {($CONFIG_M68376 == 1)} then {
	set CONFIG_FR1000 [expr $CONFIG_FR1000&15]}
	if {($CONFIG_M5206 == 1)} then {
	set CONFIG_ARN5206 [expr $CONFIG_ARN5206&15]}
	if {($CONFIG_M5206e == 1)} then {
	set CONFIG_M5206eC3 [expr $CONFIG_M5206eC3&15]}
	if {($CONFIG_M5206e == 1)} then {
	set CONFIG_ELITE [expr $CONFIG_ELITE&15]}
	if {($CONFIG_M5206e == 1) && ($CONFIG_ELITE == 1)} then {
	set CONFIG_SMALL [expr $CONFIG_SMALL&15]}
	if {($CONFIG_M5206e == 1)} then {
	set CONFIG_TELOS [expr $CONFIG_TELOS&15]}
	if {($CONFIG_M5206e == 1)} then {
	set CONFIG_CFV240 [expr $CONFIG_CFV240&15]}
	if {($CONFIG_M5249 == 1)} then {
	set CONFIG_M5249C3 [expr $CONFIG_M5249C3&15]}
	if {($CONFIG_M5272 == 1)} then {
	set CONFIG_M5272C3 [expr $CONFIG_M5272C3&15]}
	if {($CONFIG_M5272 == 1)} then {
	set CONFIG_COBRA5272 [expr $CONFIG_COBRA5272&15]}
	if {($CONFIG_M5272 == 1) && ($CONFIG_COBRA5272 == 1)} then {
	set CONFIG_BOOTPARAM [expr $CONFIG_BOOTPARAM&15]}
	if {($CONFIG_M5272 == 1)} then {
	set CONFIG_CANCam [expr $CONFIG_CANCam&15]}
	if {($CONFIG_M5272 == 1)} then {
	set CONFIG_SCALES [expr $CONFIG_SCALES&15]}
	if {($CONFIG_M5307 == 1)} then {
	set CONFIG_ARN5307 [expr $CONFIG_ARN5307&15]}
	if {($CONFIG_M5307 == 1)} then {
	set CONFIG_M5307C3 [expr $CONFIG_M5307C3&15]}
	if {($CONFIG_M5307 == 1)} then {
	set CONFIG_eLIA [expr $CONFIG_eLIA&15]}
	if {($CONFIG_M5307 == 1)} then {
	set CONFIG_DISKtel [expr $CONFIG_DISKtel&15]}
	if {($CONFIG_M5307 == 1)} then {
	set CONFIG_SECUREEDGEMP3 [expr $CONFIG_SECUREEDGEMP3&15]}
	if {($CONFIG_M5407 == 1)} then {
	set CONFIG_M5407C3 [expr $CONFIG_M5407C3&15]}
	if {($CONFIG_M5307 == 1 || $CONFIG_M5407 == 1)} then {
	set CONFIG_CLEOPATRA [expr $CONFIG_CLEOPATRA&15]}
	if {($CONFIG_M5206e == 1 || $CONFIG_M5272 == 1 || $CONFIG_M5307 == 1)} then {
	set CONFIG_NETtel [expr $CONFIG_NETtel&15]}
	if {($CONFIG_M5206e == 1 || $CONFIG_M5272 == 1 || $CONFIG_M5307 == 1)} then {
	set CONFIG_SNAPGEAR [expr $CONFIG_SNAPGEAR&15]}
	if {($CONFIG_M5206e == 1 || $CONFIG_M5272 == 1 || $CONFIG_M5307 == 1)} then {
	set CONFIG_ROMFS_FROM_ROM [expr $CONFIG_ROMFS_FROM_ROM&15]}
	if {($CONFIG_M68000 == 1)} then {
	set CONFIG_SM2010 [expr $CONFIG_SM2010&15]}
	if {($CONFIG_M68000 == 1)} then {
	set CONFIG_68KATY [expr $CONFIG_68KATY&15]}
	if {($CONFIG_M68000 == 1)} then {
	set CONFIG_MAC_PLUS [expr $CONFIG_MAC_PLUS&15]}
	if {($CONFIG_PILOT3 == 1 || $CONFIG_PILOT5 == 1)} then {	global CONSTANT_Y
set CONFIG_PILOT $CONSTANT_Y }
	if {($CONFIG_APLIO_PRO == 1 || $CONFIG_APLIO_ENTRECOTE == 1)} then {	global CONSTANT_Y
set CONFIG_APLIO $CONSTANT_Y }
	if {($CONFIG_ARN5206 == 1 || $CONFIG_ARN5307 == 1)} then {	global CONSTANT_Y
set CONFIG_ARNEWSH $CONSTANT_Y }
	if {($CONFIG_M5206eC3 == 1 || $CONFIG_M5249C3 == 1 || $CONFIG_M5272C3 == 1 || $CONFIG_M5307C3 == 1 || $CONFIG_M5407C3 == 1)} then {	global CONSTANT_Y
set CONFIG_MOTOROLA $CONSTANT_Y }
	if {($CONFIG_CLEOPATRA == 1 || $CONFIG_CANCam == 1 || $CONFIG_SCALES == 1)} then {	global CONSTANT_Y
set CONFIG_HW_FEITH $CONSTANT_Y }
	global tmpvar_4
	global CONFIG_RAMAUTO
	if {$tmpvar_4 == "AUTO"} then {set CONFIG_RAMAUTO 1} else {set CONFIG_RAMAUTO 0}
	global CONFIG_RAM05MB
	if {$tmpvar_4 == "0.5MB"} then {set CONFIG_RAM05MB 1} else {set CONFIG_RAM05MB 0}
	global CONFIG_RAM1MB
	if {$tmpvar_4 == "1MB"} then {set CONFIG_RAM1MB 1} else {set CONFIG_RAM1MB 0}
	global CONFIG_RAM2MB
	if {$tmpvar_4 == "2MB"} then {set CONFIG_RAM2MB 1} else {set CONFIG_RAM2MB 0}
	global CONFIG_RAM4MB
	if {$tmpvar_4 == "4MB"} then {set CONFIG_RAM4MB 1} else {set CONFIG_RAM4MB 0}
	global CONFIG_RAM8MB
	if {$tmpvar_4 == "8MB"} then {set CONFIG_RAM8MB 1} else {set CONFIG_RAM8MB 0}
	global CONFIG_RAM16MB
	if {$tmpvar_4 == "16MB"} then {set CONFIG_RAM16MB 1} else {set CONFIG_RAM16MB 0}
	global CONFIG_RAM32MB
	if {$tmpvar_4 == "32MB"} then {set CONFIG_RAM32MB 1} else {set CONFIG_RAM32MB 0}
	global CONFIG_RAM64MB
	if {$tmpvar_4 == "64MB"} then {set CONFIG_RAM64MB 1} else {set CONFIG_RAM64MB 0}
	global tmpvar_5
	global CONFIG_AUTOBIT
	if {$tmpvar_5 == "AUTO"} then {set CONFIG_AUTOBIT 1} else {set CONFIG_AUTOBIT 0}
	global CONFIG_RAM8BIT
	if {$tmpvar_5 == "8bit"} then {set CONFIG_RAM8BIT 1} else {set CONFIG_RAM8BIT 0}
	global CONFIG_RAM16BIT
	if {$tmpvar_5 == "16bit"} then {set CONFIG_RAM16BIT 1} else {set CONFIG_RAM16BIT 0}
	global CONFIG_RAM32bit
	if {$tmpvar_5 == "32bit"} then {set CONFIG_RAM32bit 1} else {set CONFIG_RAM32bit 0}
	global tmpvar_6
	global CONFIG_RAMKERNEL
	if {$tmpvar_6 == "RAM"} then {set CONFIG_RAMKERNEL 1} else {set CONFIG_RAMKERNEL 0}
	global CONFIG_ROMKERNEL
	if {$tmpvar_6 == "ROM"} then {set CONFIG_ROMKERNEL 1} else {set CONFIG_ROMKERNEL 0}
}


menu_option menu4 4 "General setup"
proc menu4 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 4}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 4]]
	message $w.m -width 400 -aspect 300 -text \
		"General setup"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "General setup" 

	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 4"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 4; menu5 .menu5 \"$title\""
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 4; menu3 .menu3 \"$title\""
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 4 0 "PCI bios support" CONFIG_PCI
	bool $w.config.f 4 1 "    PCI device list support" CONFIG_PCIDEVLIST
	bool $w.config.f 4 2 "Networking support" CONFIG_NET
	bool $w.config.f 4 3 "System V IPC" CONFIG_SYSVIPC
	bool $w.config.f 4 4 "Reduced memory footprint" CONFIG_REDUCED_MEMORY
	tristate $w.config.f 4 5 "Kernel support for flat binaries" CONFIG_BINFMT_FLAT
	bool $w.config.f 4 6 "    Enable ZFLAT support" CONFIG_BINFMT_ZFLAT
	bool $w.config.f 4 7 "Compile kernel as ELF - if your GCC is ELF-GCC" CONFIG_KERNEL_ELF
	bool $w.config.f 4 8 "Display memory usage on Pilot screen" CONFIG_PILOT_MEMORY_DISPLAY
	bool $w.config.f 4 9 "Console support" CONFIG_CONSOLE
	bool $w.config.f 4 10 "Frame buffer" CONFIG_FRAMEBUFFER
	bool $w.config.f 4 11 "Pilot console" CONFIG_PILOT_CONSOLE



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu4 {} {
	global CONFIG_PCI
	global CONFIG_PCIDEVLIST
	if {($CONFIG_PCI == 1)} then {
	configure_entry .menu4.config.f.x1 normal {n l y}} else {configure_entry .menu4.config.f.x1 disabled {y n l}}
	global CONFIG_BINFMT_FLAT
	global CONFIG_MODULES

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu4.config.f.x5 normal {m}} else {configure_entry .menu4.config.f.x5 disabled {m}}
	global CONFIG_BINFMT_ZFLAT
	if {($CONFIG_BINFMT_FLAT != 0)} then {
	configure_entry .menu4.config.f.x6 normal {n l y}} else {configure_entry .menu4.config.f.x6 disabled {y n l}}
	global CONFIG_PILOT
	global CONFIG_PILOT_MEMORY_DISPLAY
	if {($CONFIG_PILOT == 1)} then {
	configure_entry .menu4.config.f.x8 normal {n l y}} else {configure_entry .menu4.config.f.x8 disabled {y n l}}
	global CONFIG_CONSOLE
	global CONFIG_FRAMEBUFFER
	if {($CONFIG_CONSOLE == 1)} then {
	configure_entry .menu4.config.f.x10 normal {n l y}} else {configure_entry .menu4.config.f.x10 disabled {y n l}}
	global CONFIG_PILOT_CONSOLE
	if {($CONFIG_CONSOLE == 1) && ($CONFIG_PILOT == 1 && $CONFIG_FRAMEBUFFER == 1)} then {
	configure_entry .menu4.config.f.x11 normal {n l y}} else {configure_entry .menu4.config.f.x11 disabled {y n l}}
}


proc update_define_menu4 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_BINFMT_FLAT
	global CONFIG_PCIDEVLIST
set CONFIG_PCIDEVLIST [expr $CONFIG_PCIDEVLIST|16]
	global CONFIG_BINFMT_ZFLAT
set CONFIG_BINFMT_ZFLAT [expr $CONFIG_BINFMT_ZFLAT|16]
	global CONFIG_PILOT_MEMORY_DISPLAY
set CONFIG_PILOT_MEMORY_DISPLAY [expr $CONFIG_PILOT_MEMORY_DISPLAY|16]
	global CONFIG_FRAMEBUFFER
set CONFIG_FRAMEBUFFER [expr $CONFIG_FRAMEBUFFER|16]
	global CONFIG_PILOT_CONSOLE
set CONFIG_PILOT_CONSOLE [expr $CONFIG_PILOT_CONSOLE|16]
	global CONFIG_PCI
	if {($CONFIG_PCI == 1)} then {
	set CONFIG_PCIDEVLIST [expr $CONFIG_PCIDEVLIST&15]}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_BINFMT_FLAT == 2)} then {set CONFIG_BINFMT_FLAT 1}}
	if {($CONFIG_BINFMT_FLAT != 0)} then {
	set CONFIG_BINFMT_ZFLAT [expr $CONFIG_BINFMT_ZFLAT&15]}
	global CONFIG_PILOT
	if {($CONFIG_PILOT == 1)} then {
	set CONFIG_PILOT_MEMORY_DISPLAY [expr $CONFIG_PILOT_MEMORY_DISPLAY&15]}
	global CONFIG_CONSOLE
	if {($CONFIG_CONSOLE == 1)} then {
	set CONFIG_FRAMEBUFFER [expr $CONFIG_FRAMEBUFFER&15]}
	if {($CONFIG_CONSOLE == 1) && ($CONFIG_PILOT == 1 && $CONFIG_FRAMEBUFFER == 1)} then {
	set CONFIG_PILOT_CONSOLE [expr $CONFIG_PILOT_CONSOLE&15]}
}


menu_option menu5 5 "Floppy, IDE, and other block devices"
proc menu5 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 5}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 5]]
	message $w.m -width 400 -aspect 300 -text \
		"Floppy, IDE, and other block devices"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Floppy, IDE, and other block devices" 

	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 5"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 5; menu6 .menu6 \"$title\""
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 5; menu4 .menu4 \"$title\""
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	tristate $w.config.f 5 0 "ROM disk memory block device" CONFIG_BLK_DEV_BLKMEM
	global tmpvar_7
	minimenu $w.config.f 5 1 "  blkmem FLASH type" tmpvar_7 CONFIG_NOFLASH
	menu $w.config.f.x1.x.menu -title "  blkmem FLASH type"
	$w.config.f.x1.x.menu add radiobutton -label "NONE" -variable tmpvar_7 -value "NONE" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "AMD" -variable tmpvar_7 -value "AMD" -command "update_active"
	$w.config.f.x1.x.menu add radiobutton -label "INTEL" -variable tmpvar_7 -value "INTEL" -command "update_active"
	menusplit $w $w.config.f.x1.x.menu 3
	global tmpvar_8
	minimenu $w.config.f 5 2 "  blkmem FLASH size" tmpvar_8 CONFIG_FLASHAUTO
	menu $w.config.f.x2.x.menu -title "  blkmem FLASH size"
	$w.config.f.x2.x.menu add radiobutton -label "AUTO" -variable tmpvar_8 -value "AUTO" -command "update_active"
	$w.config.f.x2.x.menu add radiobutton -label "128KB" -variable tmpvar_8 -value "128KB" -command "update_active"
	$w.config.f.x2.x.menu add radiobutton -label "512KB" -variable tmpvar_8 -value "512KB" -command "update_active"
	$w.config.f.x2.x.menu add radiobutton -label "1MB" -variable tmpvar_8 -value "1MB" -command "update_active"
	$w.config.f.x2.x.menu add radiobutton -label "2MB" -variable tmpvar_8 -value "2MB" -command "update_active"
	$w.config.f.x2.x.menu add radiobutton -label "4MB" -variable tmpvar_8 -value "4MB" -command "update_active"
	$w.config.f.x2.x.menu add radiobutton -label "6MB" -variable tmpvar_8 -value "6MB" -command "update_active"
	$w.config.f.x2.x.menu add radiobutton -label "8MB" -variable tmpvar_8 -value "8MB" -command "update_active"
	$w.config.f.x2.x.menu add radiobutton -label "16MB" -variable tmpvar_8 -value "16MB" -command "update_active"
	menusplit $w $w.config.f.x2.x.menu 9
	global tmpvar_9
	minimenu $w.config.f 5 3 "  blkmem FLASH bit width" tmpvar_9 CONFIG_FLASHAUTOBIT
	menu $w.config.f.x3.x.menu -title "  blkmem FLASH bit width"
	$w.config.f.x3.x.menu add radiobutton -label "AUTO" -variable tmpvar_9 -value "AUTO" -command "update_active"
	$w.config.f.x3.x.menu add radiobutton -label "8bit" -variable tmpvar_9 -value "8bit" -command "update_active"
	$w.config.f.x3.x.menu add radiobutton -label "16bit" -variable tmpvar_9 -value "16bit" -command "update_active"
	$w.config.f.x3.x.menu add radiobutton -label "32bit" -variable tmpvar_9 -value "32bit" -command "update_active"
	menusplit $w $w.config.f.x3.x.menu 4
	bool $w.config.f 5 4 "  2nd 1MB flash in /dev/rom8" CONFIG_EXTRA_FLASH1MB
	bool $w.config.f 5 5 "  blkmem SnapGear FLASH layout" CONFIG_FLASH_SNAPGEAR
	bool $w.config.f 5 6 "IDE harddisk support" CONFIG_BLK_DEV_IDE
	bool $w.config.f 5 7 "   Include IDE/ATAPI CDROM support" CONFIG_BLK_DEV_IDECD
	bool $w.config.f 5 8 "   Include IDE/ATAPI TAPE support" CONFIG_BLK_DEV_IDETAPE
	bool $w.config.f 5 9 "   Include IDE/ATAPI FLOPPY support (new)" CONFIG_BLK_DEV_IDEFLOPPY
	comment $w.config.f 5 10 "Additional Block/FLASH Devices"
	tristate $w.config.f 5 11 "Loopback device support" CONFIG_BLK_DEV_LOOP
	bool $w.config.f 5 12 "Multiple devices driver support" CONFIG_BLK_DEV_MD
	tristate $w.config.f 5 13 "   Linear (append) mode" CONFIG_MD_LINEAR
	tristate $w.config.f 5 14 "   RAID-0 (striping) mode" CONFIG_MD_STRIPED
	tristate $w.config.f 5 15 "RAM disk support" CONFIG_BLK_DEV_RAM
	bool $w.config.f 5 16 "   Release empty RAM disk blocks" CONFIG_RD_RELEASE_BLOCKS
	bool $w.config.f 5 17 "   Initial RAM disk (initrd) support" CONFIG_BLK_DEV_INITRD
	tristate $w.config.f 5 18 "FLASH device support" CONFIG_DEV_FLASH
	bool $w.config.f 5 19 "   FLASH Block device" CONFIG_BLK_DEV_FLASH
	bool $w.config.f 5 20 "   FLASH Character device" CONFIG_CHR_DEV_FLASH
	tristate $w.config.f 5 21 "NFA NAND-FLASH device support" CONFIG_BLK_DEV_NFA



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu5 {} {
	global CONFIG_BLK_DEV_BLKMEM
	global CONFIG_MODULES

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu5.config.f.x0 normal {m}} else {configure_entry .menu5.config.f.x0 disabled {m}}
	if {($CONFIG_BLK_DEV_BLKMEM == 1)} then {configure_entry .menu5.config.f.x1 normal {x l}} else {configure_entry .menu5.config.f.x1 disabled {x l}}
	global CONFIG_AMDFLASH
	global CONFIG_INTELFLASH
	if {($CONFIG_BLK_DEV_BLKMEM == 1) && ($CONFIG_AMDFLASH == 1 || $CONFIG_INTELFLASH == 1)} then {configure_entry .menu5.config.f.x2 normal {x l}} else {configure_entry .menu5.config.f.x2 disabled {x l}}
	if {($CONFIG_BLK_DEV_BLKMEM == 1) && ($CONFIG_AMDFLASH == 1 || $CONFIG_INTELFLASH == 1)} then {configure_entry .menu5.config.f.x3 normal {x l}} else {configure_entry .menu5.config.f.x3 disabled {x l}}
	global CONFIG_FLASH1MB
	global CONFIG_EXTRA_FLASH1MB
	if {($CONFIG_BLK_DEV_BLKMEM == 1) && ($CONFIG_AMDFLASH == 1 || $CONFIG_INTELFLASH == 1) && ($CONFIG_FLASH1MB == 1)} then {
	configure_entry .menu5.config.f.x4 normal {n l y}} else {configure_entry .menu5.config.f.x4 disabled {y n l}}
	global CONFIG_FLASH_SNAPGEAR
	if {($CONFIG_BLK_DEV_BLKMEM == 1) && ($CONFIG_AMDFLASH == 1 || $CONFIG_INTELFLASH == 1)} then {
	configure_entry .menu5.config.f.x5 normal {n l y}} else {configure_entry .menu5.config.f.x5 disabled {y n l}}
	global CONFIG_BLK_DEV_IDE
	global CONFIG_BLK_DEV_IDECD
	if {($CONFIG_BLK_DEV_IDE == 1)} then {
	configure_entry .menu5.config.f.x7 normal {n l y}} else {configure_entry .menu5.config.f.x7 disabled {y n l}}
	global CONFIG_BLK_DEV_IDETAPE
	if {($CONFIG_BLK_DEV_IDE == 1)} then {
	configure_entry .menu5.config.f.x8 normal {n l y}} else {configure_entry .menu5.config.f.x8 disabled {y n l}}
	global CONFIG_BLK_DEV_IDEFLOPPY
	if {($CONFIG_BLK_DEV_IDE == 1)} then {
	configure_entry .menu5.config.f.x9 normal {n l y}} else {configure_entry .menu5.config.f.x9 disabled {y n l}}
	global CONFIG_BLK_DEV_LOOP

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu5.config.f.x11 normal {m}} else {configure_entry .menu5.config.f.x11 disabled {m}}
	global CONFIG_BLK_DEV_MD
	global CONFIG_MD_LINEAR
	if {($CONFIG_BLK_DEV_MD == 1)} then {
	configure_entry .menu5.config.f.x13 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu5.config.f.x13 normal {m}} else {configure_entry .menu5.config.f.x13 disabled {m}}; configure_entry .menu5.config.f.x13 normal {n l}} else {configure_entry .menu5.config.f.x13 disabled {y n m l}}
	global CONFIG_MD_STRIPED
	if {($CONFIG_BLK_DEV_MD == 1)} then {
	configure_entry .menu5.config.f.x14 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu5.config.f.x14 normal {m}} else {configure_entry .menu5.config.f.x14 disabled {m}}; configure_entry .menu5.config.f.x14 normal {n l}} else {configure_entry .menu5.config.f.x14 disabled {y n m l}}
	global CONFIG_BLK_DEV_RAM

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu5.config.f.x15 normal {m}} else {configure_entry .menu5.config.f.x15 disabled {m}}
	global CONFIG_RD_RELEASE_BLOCKS
	if {($CONFIG_BLK_DEV_RAM == 1)} then {
	configure_entry .menu5.config.f.x16 normal {n l y}} else {configure_entry .menu5.config.f.x16 disabled {y n l}}
	global CONFIG_BLK_DEV_INITRD
	if {($CONFIG_BLK_DEV_RAM == 1)} then {
	configure_entry .menu5.config.f.x17 normal {n l y}} else {configure_entry .menu5.config.f.x17 disabled {y n l}}
	global CONFIG_DEV_FLASH

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu5.config.f.x18 normal {m}} else {configure_entry .menu5.config.f.x18 disabled {m}}
	global CONFIG_BLK_DEV_FLASH
	if {($CONFIG_DEV_FLASH == 1)} then {
	configure_entry .menu5.config.f.x19 normal {n l y}} else {configure_entry .menu5.config.f.x19 disabled {y n l}}
	global CONFIG_CHR_DEV_FLASH
	if {($CONFIG_DEV_FLASH == 1)} then {
	configure_entry .menu5.config.f.x20 normal {n l y}} else {configure_entry .menu5.config.f.x20 disabled {y n l}}
	global CONFIG_BLK_DEV_NFA

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu5.config.f.x21 normal {m}} else {configure_entry .menu5.config.f.x21 disabled {m}}
}


proc update_define_menu5 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_BLK_DEV_BLKMEM
	global CONFIG_BLK_DEV_LOOP
	global CONFIG_MD_LINEAR
	global CONFIG_MD_STRIPED
	global CONFIG_BLK_DEV_RAM
	global CONFIG_DEV_FLASH
	global CONFIG_BLK_DEV_NFA
	global CONFIG_EXTRA_FLASH1MB
set CONFIG_EXTRA_FLASH1MB [expr $CONFIG_EXTRA_FLASH1MB|16]
	global CONFIG_FLASH_SNAPGEAR
set CONFIG_FLASH_SNAPGEAR [expr $CONFIG_FLASH_SNAPGEAR|16]
	global CONFIG_BLK_DEV_IDECD
set CONFIG_BLK_DEV_IDECD [expr $CONFIG_BLK_DEV_IDECD|16]
	global CONFIG_BLK_DEV_IDETAPE
set CONFIG_BLK_DEV_IDETAPE [expr $CONFIG_BLK_DEV_IDETAPE|16]
	global CONFIG_BLK_DEV_IDEFLOPPY
set CONFIG_BLK_DEV_IDEFLOPPY [expr $CONFIG_BLK_DEV_IDEFLOPPY|16]
set CONFIG_MD_LINEAR [expr $CONFIG_MD_LINEAR|16]
set CONFIG_MD_STRIPED [expr $CONFIG_MD_STRIPED|16]
	global CONFIG_RD_RELEASE_BLOCKS
set CONFIG_RD_RELEASE_BLOCKS [expr $CONFIG_RD_RELEASE_BLOCKS|16]
	global CONFIG_BLK_DEV_INITRD
set CONFIG_BLK_DEV_INITRD [expr $CONFIG_BLK_DEV_INITRD|16]
	global CONFIG_BLK_DEV_FLASH
set CONFIG_BLK_DEV_FLASH [expr $CONFIG_BLK_DEV_FLASH|16]
	global CONFIG_CHR_DEV_FLASH
set CONFIG_CHR_DEV_FLASH [expr $CONFIG_CHR_DEV_FLASH|16]

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_BLK_DEV_BLKMEM == 2)} then {set CONFIG_BLK_DEV_BLKMEM 1}}
	global tmpvar_7
	global CONFIG_NOFLASH
	if {$tmpvar_7 == "NONE"} then {set CONFIG_NOFLASH 1} else {set CONFIG_NOFLASH 0}
	global CONFIG_AMDFLASH
	if {$tmpvar_7 == "AMD"} then {set CONFIG_AMDFLASH 1} else {set CONFIG_AMDFLASH 0}
	global CONFIG_INTELFLASH
	if {$tmpvar_7 == "INTEL"} then {set CONFIG_INTELFLASH 1} else {set CONFIG_INTELFLASH 0}
	global tmpvar_8
	global CONFIG_FLASHAUTO
	if {$tmpvar_8 == "AUTO"} then {set CONFIG_FLASHAUTO 1} else {set CONFIG_FLASHAUTO 0}
	global CONFIG_FLASH128KB
	if {$tmpvar_8 == "128KB"} then {set CONFIG_FLASH128KB 1} else {set CONFIG_FLASH128KB 0}
	global CONFIG_FLASH512KB
	if {$tmpvar_8 == "512KB"} then {set CONFIG_FLASH512KB 1} else {set CONFIG_FLASH512KB 0}
	global CONFIG_FLASH1MB
	if {$tmpvar_8 == "1MB"} then {set CONFIG_FLASH1MB 1} else {set CONFIG_FLASH1MB 0}
	global CONFIG_FLASH2MB
	if {$tmpvar_8 == "2MB"} then {set CONFIG_FLASH2MB 1} else {set CONFIG_FLASH2MB 0}
	global CONFIG_FLASH4MB
	if {$tmpvar_8 == "4MB"} then {set CONFIG_FLASH4MB 1} else {set CONFIG_FLASH4MB 0}
	global CONFIG_FLASH6MB
	if {$tmpvar_8 == "6MB"} then {set CONFIG_FLASH6MB 1} else {set CONFIG_FLASH6MB 0}
	global CONFIG_FLASH8MB
	if {$tmpvar_8 == "8MB"} then {set CONFIG_FLASH8MB 1} else {set CONFIG_FLASH8MB 0}
	global CONFIG_FLASH16MB
	if {$tmpvar_8 == "16MB"} then {set CONFIG_FLASH16MB 1} else {set CONFIG_FLASH16MB 0}
	global tmpvar_9
	global CONFIG_FLASHAUTOBIT
	if {$tmpvar_9 == "AUTO"} then {set CONFIG_FLASHAUTOBIT 1} else {set CONFIG_FLASHAUTOBIT 0}
	global CONFIG_FLASH8BIT
	if {$tmpvar_9 == "8bit"} then {set CONFIG_FLASH8BIT 1} else {set CONFIG_FLASH8BIT 0}
	global CONFIG_FLASH16BIT
	if {$tmpvar_9 == "16bit"} then {set CONFIG_FLASH16BIT 1} else {set CONFIG_FLASH16BIT 0}
	global CONFIG_FLASH32bit
	if {$tmpvar_9 == "32bit"} then {set CONFIG_FLASH32bit 1} else {set CONFIG_FLASH32bit 0}
	if {($CONFIG_BLK_DEV_BLKMEM == 1) && ($CONFIG_AMDFLASH == 1 || $CONFIG_INTELFLASH == 1) && ($CONFIG_FLASH1MB == 1)} then {
	set CONFIG_EXTRA_FLASH1MB [expr $CONFIG_EXTRA_FLASH1MB&15]}
	if {($CONFIG_BLK_DEV_BLKMEM == 1) && ($CONFIG_AMDFLASH == 1 || $CONFIG_INTELFLASH == 1)} then {
	set CONFIG_FLASH_SNAPGEAR [expr $CONFIG_FLASH_SNAPGEAR&15]}
	global CONFIG_BLK_DEV_IDE
	if {($CONFIG_BLK_DEV_IDE == 1)} then {
	set CONFIG_BLK_DEV_IDECD [expr $CONFIG_BLK_DEV_IDECD&15]}
	if {($CONFIG_BLK_DEV_IDE == 1)} then {
	set CONFIG_BLK_DEV_IDETAPE [expr $CONFIG_BLK_DEV_IDETAPE&15]}
	if {($CONFIG_BLK_DEV_IDE == 1)} then {
	set CONFIG_BLK_DEV_IDEFLOPPY [expr $CONFIG_BLK_DEV_IDEFLOPPY&15]}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_BLK_DEV_LOOP == 2)} then {set CONFIG_BLK_DEV_LOOP 1}}
	global CONFIG_BLK_DEV_MD
	if {($CONFIG_BLK_DEV_MD == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_MD_LINEAR == 2)} then {set CONFIG_MD_LINEAR 1}; set CONFIG_MD_LINEAR [expr $CONFIG_MD_LINEAR&15]}
	if {($CONFIG_BLK_DEV_MD == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_MD_STRIPED == 2)} then {set CONFIG_MD_STRIPED 1}; set CONFIG_MD_STRIPED [expr $CONFIG_MD_STRIPED&15]}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_BLK_DEV_RAM == 2)} then {set CONFIG_BLK_DEV_RAM 1}}
	if {($CONFIG_BLK_DEV_RAM == 1)} then {
	set CONFIG_RD_RELEASE_BLOCKS [expr $CONFIG_RD_RELEASE_BLOCKS&15]}
	if {($CONFIG_BLK_DEV_RAM == 1)} then {
	set CONFIG_BLK_DEV_INITRD [expr $CONFIG_BLK_DEV_INITRD&15]}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_DEV_FLASH == 2)} then {set CONFIG_DEV_FLASH 1}}
	if {($CONFIG_DEV_FLASH == 1)} then {
	set CONFIG_BLK_DEV_FLASH [expr $CONFIG_BLK_DEV_FLASH&15]}
	if {($CONFIG_DEV_FLASH == 1)} then {
	set CONFIG_CHR_DEV_FLASH [expr $CONFIG_CHR_DEV_FLASH&15]}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_BLK_DEV_NFA == 2)} then {set CONFIG_BLK_DEV_NFA 1}}
}


menu_option menu6 6 "Networking options"
proc menu6 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 6}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 6]]
	message $w.m -width 400 -aspect 300 -text \
		"Networking options"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Networking options" 

	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 6"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 6; menu7 .menu7 \"$title\""
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 6; menu5 .menu5 \"$title\""
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 6 0 "Network firewalls" CONFIG_FIREWALL
	bool $w.config.f 6 1 "Network aliasing" CONFIG_NET_ALIAS
	bool $w.config.f 6 2 "TCP/IP networking" CONFIG_INET
	bool $w.config.f 6 3 "  IP: forwarding/gatewaying" CONFIG_IP_FORWARD
	bool $w.config.f 6 4 "  IP: multicasting" CONFIG_IP_MULTICAST
	bool $w.config.f 6 5 "  IP: syn cookies" CONFIG_SYN_COOKIES
	bool $w.config.f 6 6 "  IP: firewalling" CONFIG_IP_FIREWALL
	bool $w.config.f 6 7 "    IP: firewall packet logging" CONFIG_IP_FIREWALL_VERBOSE
	bool $w.config.f 6 8 "    IP: masquerading" CONFIG_IP_MASQUERADE
	comment $w.config.f 6 9 "Protocol-specific masquerading support will be built as modules."
	bool $w.config.f 6 10 "      IP: ipautofw masquerading (EXPERIMENTAL)" CONFIG_IP_MASQUERADE_IPAUTOFW
	bool $w.config.f 6 11 "      IP: ipportfw masquerading (EXPERIMENTAL)" CONFIG_IP_MASQUERADE_IPPORTFW
	bool $w.config.f 6 12 "      IP: MS PPTP masq support (EXPERIMENTAL)" CONFIG_IP_MASQUERADE_PPTP
	bool $w.config.f 6 13 "        IP: MS PPTP Call ID masq support" CONFIG_IP_MASQUERADE_PPTP_MULTICLIENT
	bool $w.config.f 6 14 "        IP: MS PPTP masq debugging" DEBUG_IP_MASQUERADE_PPTP
	bool $w.config.f 6 15 "          IP: MS PPTP masq verbose debugging" DEBUG_IP_MASQUERADE_PPTP_VERBOSE
	bool $w.config.f 6 16 "      IP: IPSEC ESP & ISAKMP masq support (EXPERIMENTAL)" CONFIG_IP_MASQUERADE_IPSEC
	int $w.config.f 6 17 "IP: IPSEC masq table lifetime (minutes)" CONFIG_IP_MASQUERADE_IPSEC_EXPIRE
	bool $w.config.f 6 18 "        IP: Disable inbound ESP destination guessing" CONFIG_IP_MASQUERADE_IPSEC_NOGUESS
	bool $w.config.f 6 19 "        IP: IPSEC masq debugging" DEBUG_IP_MASQUERADE_IPSEC
	bool $w.config.f 6 20 "        IP: IPSEC masq verbose debugging" DEBUG_IP_MASQUERADE_IPSEC_VERBOSE
	bool $w.config.f 6 21 "      IP: ICMP masquerading" CONFIG_IP_MASQUERADE_ICMP
	bool $w.config.f 6 22 "    IP: transparent proxy support (EXPERIMENTAL)" CONFIG_IP_TRANSPARENT_PROXY
	bool $w.config.f 6 23 "    IP: always defragment" CONFIG_IP_ALWAYS_DEFRAG
	bool $w.config.f 6 24 "  IP: accounting" CONFIG_IP_ACCT
	bool $w.config.f 6 25 "  IP: optimize as router not host" CONFIG_IP_ROUTER
	tristate $w.config.f 6 26 "  IP: tunneling" CONFIG_NET_IPIP
	bool $w.config.f 6 27 "  IP: multicast routing (EXPERIMENTAL)" CONFIG_IP_MROUTE
	tristate $w.config.f 6 28 "  IP: aliasing support" CONFIG_IP_ALIAS
	bool $w.config.f 6 29 "  IP: ARP daemon support (EXPERIMENTAL)" CONFIG_ARPD
	comment $w.config.f 6 30 "(it is safe to leave these untouched)"
	bool $w.config.f 6 31 "  IP: PC/TCP compatibility mode" CONFIG_INET_PCTCP
	tristate $w.config.f 6 32 "  IP: Reverse ARP" CONFIG_INET_RARP
	bool $w.config.f 6 33 "  IP: Disable Path MTU Discovery (normally enabled)" CONFIG_NO_PATH_MTU_DISCOVERY
	bool $w.config.f 6 34 "  IP: Drop source routed frames" CONFIG_IP_NOSR
	bool $w.config.f 6 35 "  IP: Allow large windows (not recommended if <16Mb of memory)" CONFIG_SKB_LARGE
	comment $w.config.f 6 36 " "
	tristate $w.config.f 6 37 "The IPX protocol" CONFIG_IPX
	tristate $w.config.f 6 38 "Appletalk DDP" CONFIG_ATALK
	tristate $w.config.f 6 39 "Amateur Radio AX.25 Level 2" CONFIG_AX25
	dep_tristate $w.config.f 6 40 "  Amateur Radio NET/ROM" CONFIG_NETROM
	dep_tristate $w.config.f 6 41 "  Amateur Radio X.25 PLP (Rose)" CONFIG_ROSE
	bool $w.config.f 6 42 "Bridging (EXPERIMENTAL)" CONFIG_BRIDGE
	bool $w.config.f 6 43 "Kernel/User network link driver" CONFIG_NETLINK
	bool $w.config.f 6 44 "  Routing messages" CONFIG_RTNETLINK
	tristate $w.config.f 6 45 "IP Security Protocol (FreeS/WAN IPSEC)" CONFIG_IPSEC
	comment $w.config.f 6 46 "IPSec options (FreeS/WAN)"
	bool $w.config.f 6 47 "   IPSEC: IP-in-IP encapsulation (tunnel mode)" CONFIG_IPSEC_IPIP
	bool $w.config.f 6 48 "   IPSEC: Authentication Header" CONFIG_IPSEC_AH
	bool $w.config.f 6 49 "      HMAC-MD5 authentication algorithm" CONFIG_IPSEC_AUTH_HMAC_MD5
	bool $w.config.f 6 50 "      HMAC-SHA1 authentication algorithm" CONFIG_IPSEC_AUTH_HMAC_SHA1
	bool $w.config.f 6 51 "   IPSEC: Encapsulating Security Payload" CONFIG_IPSEC_ESP
	bool $w.config.f 6 52 "      DES encryption algorithm" CONFIG_IPSEC_ENC_DES
	bool $w.config.f 6 53 "      3DES encryption algorithm" CONFIG_IPSEC_ENC_3DES
	bool $w.config.f 6 54 "   IPSEC: IP Compression" CONFIG_IPSEC_IPCOMP
	bool $w.config.f 6 55 "      LZS compression" CONFIG_IPSEC_IPCOMP_LZS
	bool $w.config.f 6 56 "   IPSEC Debugging Option" CONFIG_IPSEC_DEBUG
	bool $w.config.f 6 57 "   IPSEC NAT-Traversal" CONFIG_IPSEC_NAT_TRAVERSAL



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu6 {} {
	global CONFIG_NET
	global CONFIG_FIREWALL
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu6.config.f.x0 normal {n l y}} else {configure_entry .menu6.config.f.x0 disabled {y n l}}
	global CONFIG_NET_ALIAS
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu6.config.f.x1 normal {n l y}} else {configure_entry .menu6.config.f.x1 disabled {y n l}}
	global CONFIG_INET
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu6.config.f.x2 normal {n l y}} else {configure_entry .menu6.config.f.x2 disabled {y n l}}
	global CONFIG_IP_FORWARD
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu6.config.f.x3 normal {n l y}} else {configure_entry .menu6.config.f.x3 disabled {y n l}}
	global CONFIG_IP_MULTICAST
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu6.config.f.x4 normal {n l y}} else {configure_entry .menu6.config.f.x4 disabled {y n l}}
	global CONFIG_SYN_COOKIES
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu6.config.f.x5 normal {n l y}} else {configure_entry .menu6.config.f.x5 disabled {y n l}}
	global CONFIG_IP_FIREWALL
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1)} then {
	configure_entry .menu6.config.f.x6 normal {n l y}} else {configure_entry .menu6.config.f.x6 disabled {y n l}}
	global CONFIG_IP_FIREWALL_VERBOSE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1)} then {
	configure_entry .menu6.config.f.x7 normal {n l y}} else {configure_entry .menu6.config.f.x7 disabled {y n l}}
	global CONFIG_IP_MASQUERADE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1)} then {
	configure_entry .menu6.config.f.x8 normal {n l y}} else {configure_entry .menu6.config.f.x8 disabled {y n l}}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0)} then {configure_entry .menu6.config.f.x9 normal {m}} else {configure_entry .menu6.config.f.x9 disabled {m}}
	global CONFIG_EXPERIMENTAL
	global CONFIG_IP_MASQUERADE_IPAUTOFW
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu6.config.f.x10 normal {n l y}} else {configure_entry .menu6.config.f.x10 disabled {y n l}}
	global CONFIG_IP_MASQUERADE_IPPORTFW
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu6.config.f.x11 normal {n l y}} else {configure_entry .menu6.config.f.x11 disabled {y n l}}
	global CONFIG_IP_MASQUERADE_PPTP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu6.config.f.x12 normal {n l y}} else {configure_entry .menu6.config.f.x12 disabled {y n l}}
	global CONFIG_IP_MASQUERADE_PPTP_MULTICLIENT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_PPTP == 1)} then {
	configure_entry .menu6.config.f.x13 normal {n l y}} else {configure_entry .menu6.config.f.x13 disabled {y n l}}
	global DEBUG_IP_MASQUERADE_PPTP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_PPTP == 1)} then {
	configure_entry .menu6.config.f.x14 normal {n l y}} else {configure_entry .menu6.config.f.x14 disabled {y n l}}
	global DEBUG_IP_MASQUERADE_PPTP_VERBOSE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_PPTP == 1) && ($DEBUG_IP_MASQUERADE_PPTP == 1)} then {
	configure_entry .menu6.config.f.x15 normal {n l y}} else {configure_entry .menu6.config.f.x15 disabled {y n l}}
	global CONFIG_IP_MASQUERADE_IPSEC
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu6.config.f.x16 normal {n l y}} else {configure_entry .menu6.config.f.x16 disabled {y n l}}
	global CONFIG_IP_MASQUERADE_IPSEC_EXPIRE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_IPSEC == 1)} then {.menu6.config.f.x17.x configure -state normal -foreground [ cget .ref -foreground ]; .menu6.config.f.x17.l configure -state normal; } else {.menu6.config.f.x17.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu6.config.f.x17.l configure -state disabled}
	global CONFIG_IP_MASQUERADE_IPSEC_NOGUESS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_IPSEC == 1)} then {
	configure_entry .menu6.config.f.x18 normal {n l y}} else {configure_entry .menu6.config.f.x18 disabled {y n l}}
	global DEBUG_IP_MASQUERADE_IPSEC
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_IPSEC == 1)} then {
	configure_entry .menu6.config.f.x19 normal {n l y}} else {configure_entry .menu6.config.f.x19 disabled {y n l}}
	global DEBUG_IP_MASQUERADE_IPSEC_VERBOSE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_IPSEC == 1) && ($DEBUG_IP_MASQUERADE_IPSEC == 1)} then {
	configure_entry .menu6.config.f.x20 normal {n l y}} else {configure_entry .menu6.config.f.x20 disabled {y n l}}
	global CONFIG_IP_MASQUERADE_ICMP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0)} then {
	configure_entry .menu6.config.f.x21 normal {n l y}} else {configure_entry .menu6.config.f.x21 disabled {y n l}}
	global CONFIG_IP_TRANSPARENT_PROXY
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu6.config.f.x22 normal {n l y}} else {configure_entry .menu6.config.f.x22 disabled {y n l}}
	global CONFIG_IP_ALWAYS_DEFRAG
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1)} then {
	configure_entry .menu6.config.f.x23 normal {n l y}} else {configure_entry .menu6.config.f.x23 disabled {y n l}}
	global CONFIG_IP_ACCT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu6.config.f.x24 normal {n l y}} else {configure_entry .menu6.config.f.x24 disabled {y n l}}
	global CONFIG_IP_ROUTER
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu6.config.f.x25 normal {n l y}} else {configure_entry .menu6.config.f.x25 disabled {y n l}}
	global CONFIG_MODULES
	global CONFIG_NET_IPIP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu6.config.f.x26 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu6.config.f.x26 normal {m}} else {configure_entry .menu6.config.f.x26 disabled {m}}; configure_entry .menu6.config.f.x26 normal {n l}} else {configure_entry .menu6.config.f.x26 disabled {y n m l}}
	global CONFIG_IP_MROUTE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_MULTICAST == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu6.config.f.x27 normal {n l y}} else {configure_entry .menu6.config.f.x27 disabled {y n l}}
	global CONFIG_IP_ALIAS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NET_ALIAS == 1)} then {
	configure_entry .menu6.config.f.x28 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu6.config.f.x28 normal {m}} else {configure_entry .menu6.config.f.x28 disabled {m}}; configure_entry .menu6.config.f.x28 normal {n l}} else {configure_entry .menu6.config.f.x28 disabled {y n m l}}
	global CONFIG_NETLINK
	global CONFIG_ARPD
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_NETLINK == 1)} then {
	configure_entry .menu6.config.f.x29 normal {n l y}} else {configure_entry .menu6.config.f.x29 disabled {y n l}}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {configure_entry .menu6.config.f.x30 normal {m}} else {configure_entry .menu6.config.f.x30 disabled {m}}
	global CONFIG_INET_PCTCP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu6.config.f.x31 normal {n l y}} else {configure_entry .menu6.config.f.x31 disabled {y n l}}
	global CONFIG_INET_RARP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu6.config.f.x32 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu6.config.f.x32 normal {m}} else {configure_entry .menu6.config.f.x32 disabled {m}}; configure_entry .menu6.config.f.x32 normal {n l}} else {configure_entry .menu6.config.f.x32 disabled {y n m l}}
	global CONFIG_NO_PATH_MTU_DISCOVERY
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu6.config.f.x33 normal {n l y}} else {configure_entry .menu6.config.f.x33 disabled {y n l}}
	global CONFIG_IP_NOSR
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu6.config.f.x34 normal {n l y}} else {configure_entry .menu6.config.f.x34 disabled {y n l}}
	global CONFIG_SKB_LARGE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu6.config.f.x35 normal {n l y}} else {configure_entry .menu6.config.f.x35 disabled {y n l}}
	if {($CONFIG_NET == 1)} then {configure_entry .menu6.config.f.x36 normal {m}} else {configure_entry .menu6.config.f.x36 disabled {m}}
	global CONFIG_IPX
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu6.config.f.x37 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu6.config.f.x37 normal {m}} else {configure_entry .menu6.config.f.x37 disabled {m}}; configure_entry .menu6.config.f.x37 normal {n l}} else {configure_entry .menu6.config.f.x37 disabled {y n m l}}
	global CONFIG_ATALK
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu6.config.f.x38 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu6.config.f.x38 normal {m}} else {configure_entry .menu6.config.f.x38 disabled {m}}; configure_entry .menu6.config.f.x38 normal {n l}} else {configure_entry .menu6.config.f.x38 disabled {y n m l}}
	global CONFIG_AX25
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu6.config.f.x39 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu6.config.f.x39 normal {m}} else {configure_entry .menu6.config.f.x39 disabled {m}}; configure_entry .menu6.config.f.x39 normal {n l}} else {configure_entry .menu6.config.f.x39 disabled {y n m l}}
	global CONFIG_NETROM
	if {($CONFIG_NET == 1) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]];set CONFIG_NETROM [sync_tristate $CONFIG_NETROM $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu6.config.f.x40 disabled {y}} else {configure_entry .menu6.config.f.x40 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu6.config.f.x40 disabled {m}} else {configure_entry .menu6.config.f.x40 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu6.config.f.x40 normal {m}} else {configure_entry .menu6.config.f.x40 disabled {m}}; configure_entry .menu6.config.f.x40 normal {n l}} else {configure_entry .menu6.config.f.x40 disabled {y n m l}}
	global CONFIG_ROSE
	if {($CONFIG_NET == 1) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]];set CONFIG_ROSE [sync_tristate $CONFIG_ROSE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu6.config.f.x41 disabled {y}} else {configure_entry .menu6.config.f.x41 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu6.config.f.x41 disabled {m}} else {configure_entry .menu6.config.f.x41 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu6.config.f.x41 normal {m}} else {configure_entry .menu6.config.f.x41 disabled {m}}; configure_entry .menu6.config.f.x41 normal {n l}} else {configure_entry .menu6.config.f.x41 disabled {y n m l}}
	global CONFIG_BRIDGE
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu6.config.f.x42 normal {n l y}} else {configure_entry .menu6.config.f.x42 disabled {y n l}}
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu6.config.f.x43 normal {n l y}} else {configure_entry .menu6.config.f.x43 disabled {y n l}}
	global CONFIG_RTNETLINK
	if {($CONFIG_NET == 1) && ($CONFIG_NETLINK == 1)} then {
	configure_entry .menu6.config.f.x44 normal {n l y}} else {configure_entry .menu6.config.f.x44 disabled {y n l}}
	global CONFIG_IPSEC
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu6.config.f.x45 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu6.config.f.x45 normal {m}} else {configure_entry .menu6.config.f.x45 disabled {m}}; configure_entry .menu6.config.f.x45 normal {n l}} else {configure_entry .menu6.config.f.x45 disabled {y n m l}}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {configure_entry .menu6.config.f.x46 normal {m}} else {configure_entry .menu6.config.f.x46 disabled {m}}
	global CONFIG_IPSEC_IPIP
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	configure_entry .menu6.config.f.x47 normal {n l y}} else {configure_entry .menu6.config.f.x47 disabled {y n l}}
	global CONFIG_IPSEC_AH
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	configure_entry .menu6.config.f.x48 normal {n l y}} else {configure_entry .menu6.config.f.x48 disabled {y n l}}
	global CONFIG_IPSEC_ESP
	global CONFIG_IPSEC_AUTH_HMAC_MD5
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_AH == 1 || $CONFIG_IPSEC_ESP == 1)} then {
	configure_entry .menu6.config.f.x49 normal {n l y}} else {configure_entry .menu6.config.f.x49 disabled {y n l}}
	global CONFIG_IPSEC_AUTH_HMAC_SHA1
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_AH == 1 || $CONFIG_IPSEC_ESP == 1)} then {
	configure_entry .menu6.config.f.x50 normal {n l y}} else {configure_entry .menu6.config.f.x50 disabled {y n l}}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	configure_entry .menu6.config.f.x51 normal {n l y}} else {configure_entry .menu6.config.f.x51 disabled {y n l}}
	global CONFIG_IPSEC_ENC_DES
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_ESP == 1)} then {
	configure_entry .menu6.config.f.x52 normal {n l y}} else {configure_entry .menu6.config.f.x52 disabled {y n l}}
	global CONFIG_IPSEC_ENC_3DES
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_ESP == 1)} then {
	configure_entry .menu6.config.f.x53 normal {n l y}} else {configure_entry .menu6.config.f.x53 disabled {y n l}}
	global CONFIG_IPSEC_IPCOMP
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	configure_entry .menu6.config.f.x54 normal {n l y}} else {configure_entry .menu6.config.f.x54 disabled {y n l}}
	global CONFIG_IPSEC_IPCOMP_LZS
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_IPCOMP == 1)} then {
	configure_entry .menu6.config.f.x55 normal {n l y}} else {configure_entry .menu6.config.f.x55 disabled {y n l}}
	global CONFIG_IPSEC_DEBUG
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	configure_entry .menu6.config.f.x56 normal {n l y}} else {configure_entry .menu6.config.f.x56 disabled {y n l}}
	global CONFIG_IPSEC_NAT_TRAVERSAL
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	configure_entry .menu6.config.f.x57 normal {n l y}} else {configure_entry .menu6.config.f.x57 disabled {y n l}}
}


proc update_define_menu6 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_NET_IPIP
	global CONFIG_IP_ALIAS
	global CONFIG_INET_RARP
	global CONFIG_IPX
	global CONFIG_ATALK
	global CONFIG_AX25
	global CONFIG_IPSEC
	global CONFIG_IPSEC_ALG
	global CONFIG_IPSEC_ALG_AES
	global CONFIG_FIREWALL
set CONFIG_FIREWALL [expr $CONFIG_FIREWALL|16]
	global CONFIG_NET_ALIAS
set CONFIG_NET_ALIAS [expr $CONFIG_NET_ALIAS|16]
	global CONFIG_INET
set CONFIG_INET [expr $CONFIG_INET|16]
	global CONFIG_IP_FORWARD
set CONFIG_IP_FORWARD [expr $CONFIG_IP_FORWARD|16]
	global CONFIG_IP_MULTICAST
set CONFIG_IP_MULTICAST [expr $CONFIG_IP_MULTICAST|16]
	global CONFIG_SYN_COOKIES
set CONFIG_SYN_COOKIES [expr $CONFIG_SYN_COOKIES|16]
	global CONFIG_IP_FIREWALL
set CONFIG_IP_FIREWALL [expr $CONFIG_IP_FIREWALL|16]
	global CONFIG_IP_FIREWALL_VERBOSE
set CONFIG_IP_FIREWALL_VERBOSE [expr $CONFIG_IP_FIREWALL_VERBOSE|16]
	global CONFIG_IP_MASQUERADE
set CONFIG_IP_MASQUERADE [expr $CONFIG_IP_MASQUERADE|16]
	global CONFIG_IP_MASQUERADE_IPAUTOFW
set CONFIG_IP_MASQUERADE_IPAUTOFW [expr $CONFIG_IP_MASQUERADE_IPAUTOFW|16]
	global CONFIG_IP_MASQUERADE_IPPORTFW
set CONFIG_IP_MASQUERADE_IPPORTFW [expr $CONFIG_IP_MASQUERADE_IPPORTFW|16]
	global CONFIG_IP_MASQUERADE_PPTP
set CONFIG_IP_MASQUERADE_PPTP [expr $CONFIG_IP_MASQUERADE_PPTP|16]
	global CONFIG_IP_MASQUERADE_PPTP_MULTICLIENT
set CONFIG_IP_MASQUERADE_PPTP_MULTICLIENT [expr $CONFIG_IP_MASQUERADE_PPTP_MULTICLIENT|16]
	global DEBUG_IP_MASQUERADE_PPTP
set DEBUG_IP_MASQUERADE_PPTP [expr $DEBUG_IP_MASQUERADE_PPTP|16]
	global DEBUG_IP_MASQUERADE_PPTP_VERBOSE
set DEBUG_IP_MASQUERADE_PPTP_VERBOSE [expr $DEBUG_IP_MASQUERADE_PPTP_VERBOSE|16]
	global CONFIG_IP_MASQUERADE_IPSEC
set CONFIG_IP_MASQUERADE_IPSEC [expr $CONFIG_IP_MASQUERADE_IPSEC|16]
	global CONFIG_IP_MASQUERADE_IPSEC_NOGUESS
set CONFIG_IP_MASQUERADE_IPSEC_NOGUESS [expr $CONFIG_IP_MASQUERADE_IPSEC_NOGUESS|16]
	global DEBUG_IP_MASQUERADE_IPSEC
set DEBUG_IP_MASQUERADE_IPSEC [expr $DEBUG_IP_MASQUERADE_IPSEC|16]
	global DEBUG_IP_MASQUERADE_IPSEC_VERBOSE
set DEBUG_IP_MASQUERADE_IPSEC_VERBOSE [expr $DEBUG_IP_MASQUERADE_IPSEC_VERBOSE|16]
	global CONFIG_IP_MASQUERADE_ICMP
set CONFIG_IP_MASQUERADE_ICMP [expr $CONFIG_IP_MASQUERADE_ICMP|16]
	global CONFIG_IP_TRANSPARENT_PROXY
set CONFIG_IP_TRANSPARENT_PROXY [expr $CONFIG_IP_TRANSPARENT_PROXY|16]
	global CONFIG_IP_ALWAYS_DEFRAG
set CONFIG_IP_ALWAYS_DEFRAG [expr $CONFIG_IP_ALWAYS_DEFRAG|16]
	global CONFIG_IP_ACCT
set CONFIG_IP_ACCT [expr $CONFIG_IP_ACCT|16]
	global CONFIG_IP_ROUTER
set CONFIG_IP_ROUTER [expr $CONFIG_IP_ROUTER|16]
set CONFIG_NET_IPIP [expr $CONFIG_NET_IPIP|16]
	global CONFIG_IP_MROUTE
set CONFIG_IP_MROUTE [expr $CONFIG_IP_MROUTE|16]
set CONFIG_IP_ALIAS [expr $CONFIG_IP_ALIAS|16]
	global CONFIG_ARPD
set CONFIG_ARPD [expr $CONFIG_ARPD|16]
	global CONFIG_INET_PCTCP
set CONFIG_INET_PCTCP [expr $CONFIG_INET_PCTCP|16]
set CONFIG_INET_RARP [expr $CONFIG_INET_RARP|16]
	global CONFIG_NO_PATH_MTU_DISCOVERY
set CONFIG_NO_PATH_MTU_DISCOVERY [expr $CONFIG_NO_PATH_MTU_DISCOVERY|16]
	global CONFIG_IP_NOSR
set CONFIG_IP_NOSR [expr $CONFIG_IP_NOSR|16]
	global CONFIG_SKB_LARGE
set CONFIG_SKB_LARGE [expr $CONFIG_SKB_LARGE|16]
set CONFIG_IPX [expr $CONFIG_IPX|16]
set CONFIG_ATALK [expr $CONFIG_ATALK|16]
set CONFIG_AX25 [expr $CONFIG_AX25|16]
	global CONFIG_BRIDGE
set CONFIG_BRIDGE [expr $CONFIG_BRIDGE|16]
	global CONFIG_NETLINK
set CONFIG_NETLINK [expr $CONFIG_NETLINK|16]
	global CONFIG_RTNETLINK
set CONFIG_RTNETLINK [expr $CONFIG_RTNETLINK|16]
set CONFIG_IPSEC [expr $CONFIG_IPSEC|16]
	global CONFIG_IPSEC_IPIP
set CONFIG_IPSEC_IPIP [expr $CONFIG_IPSEC_IPIP|16]
	global CONFIG_IPSEC_AH
set CONFIG_IPSEC_AH [expr $CONFIG_IPSEC_AH|16]
	global CONFIG_IPSEC_AUTH_HMAC_MD5
set CONFIG_IPSEC_AUTH_HMAC_MD5 [expr $CONFIG_IPSEC_AUTH_HMAC_MD5|16]
	global CONFIG_IPSEC_AUTH_HMAC_SHA1
set CONFIG_IPSEC_AUTH_HMAC_SHA1 [expr $CONFIG_IPSEC_AUTH_HMAC_SHA1|16]
	global CONFIG_IPSEC_ESP
set CONFIG_IPSEC_ESP [expr $CONFIG_IPSEC_ESP|16]
	global CONFIG_IPSEC_ENC_DES
set CONFIG_IPSEC_ENC_DES [expr $CONFIG_IPSEC_ENC_DES|16]
	global CONFIG_IPSEC_ENC_3DES
set CONFIG_IPSEC_ENC_3DES [expr $CONFIG_IPSEC_ENC_3DES|16]
	global CONFIG_IPSEC_IPCOMP
set CONFIG_IPSEC_IPCOMP [expr $CONFIG_IPSEC_IPCOMP|16]
	global CONFIG_IPSEC_IPCOMP_LZS
set CONFIG_IPSEC_IPCOMP_LZS [expr $CONFIG_IPSEC_IPCOMP_LZS|16]
	global CONFIG_IPSEC_DEBUG
set CONFIG_IPSEC_DEBUG [expr $CONFIG_IPSEC_DEBUG|16]
	global CONFIG_IPSEC_NAT_TRAVERSAL
set CONFIG_IPSEC_NAT_TRAVERSAL [expr $CONFIG_IPSEC_NAT_TRAVERSAL|16]
	global CONFIG_NET
	if {($CONFIG_NET == 1)} then {
	set CONFIG_FIREWALL [expr $CONFIG_FIREWALL&15]}
	if {($CONFIG_NET == 1)} then {
	set CONFIG_NET_ALIAS [expr $CONFIG_NET_ALIAS&15]}
	if {($CONFIG_NET == 1)} then {
	set CONFIG_INET [expr $CONFIG_INET&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	set CONFIG_IP_FORWARD [expr $CONFIG_IP_FORWARD&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	set CONFIG_IP_MULTICAST [expr $CONFIG_IP_MULTICAST&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	set CONFIG_SYN_COOKIES [expr $CONFIG_SYN_COOKIES&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1)} then {
	set CONFIG_IP_FIREWALL [expr $CONFIG_IP_FIREWALL&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1)} then {
	set CONFIG_IP_FIREWALL_VERBOSE [expr $CONFIG_IP_FIREWALL_VERBOSE&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1)} then {
	set CONFIG_IP_MASQUERADE [expr $CONFIG_IP_MASQUERADE&15]}
	global CONFIG_EXPERIMENTAL
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_IP_MASQUERADE_IPAUTOFW [expr $CONFIG_IP_MASQUERADE_IPAUTOFW&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_IP_MASQUERADE_IPPORTFW [expr $CONFIG_IP_MASQUERADE_IPPORTFW&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_IP_MASQUERADE_PPTP [expr $CONFIG_IP_MASQUERADE_PPTP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_PPTP == 1)} then {
	set CONFIG_IP_MASQUERADE_PPTP_MULTICLIENT [expr $CONFIG_IP_MASQUERADE_PPTP_MULTICLIENT&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_PPTP == 1)} then {
	set DEBUG_IP_MASQUERADE_PPTP [expr $DEBUG_IP_MASQUERADE_PPTP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_PPTP == 1) && ($DEBUG_IP_MASQUERADE_PPTP == 1)} then {
	set DEBUG_IP_MASQUERADE_PPTP_VERBOSE [expr $DEBUG_IP_MASQUERADE_PPTP_VERBOSE&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_IP_MASQUERADE_IPSEC [expr $CONFIG_IP_MASQUERADE_IPSEC&15]}
	global CONFIG_IP_MASQUERADE_IPSEC_EXPIRE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_IPSEC == 1)} then {validate_int CONFIG_IP_MASQUERADE_IPSEC_EXPIRE "$CONFIG_IP_MASQUERADE_IPSEC_EXPIRE" 30}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_IPSEC == 1)} then {
	set CONFIG_IP_MASQUERADE_IPSEC_NOGUESS [expr $CONFIG_IP_MASQUERADE_IPSEC_NOGUESS&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_IPSEC == 1)} then {
	set DEBUG_IP_MASQUERADE_IPSEC [expr $DEBUG_IP_MASQUERADE_IPSEC&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_IPSEC == 1) && ($DEBUG_IP_MASQUERADE_IPSEC == 1)} then {
	set DEBUG_IP_MASQUERADE_IPSEC_VERBOSE [expr $DEBUG_IP_MASQUERADE_IPSEC_VERBOSE&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0)} then {
	set CONFIG_IP_MASQUERADE_ICMP [expr $CONFIG_IP_MASQUERADE_ICMP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_IP_TRANSPARENT_PROXY [expr $CONFIG_IP_TRANSPARENT_PROXY&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1)} then {
	set CONFIG_IP_ALWAYS_DEFRAG [expr $CONFIG_IP_ALWAYS_DEFRAG&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	set CONFIG_IP_ACCT [expr $CONFIG_IP_ACCT&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	set CONFIG_IP_ROUTER [expr $CONFIG_IP_ROUTER&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NET_IPIP == 2)} then {set CONFIG_NET_IPIP 1}; set CONFIG_NET_IPIP [expr $CONFIG_NET_IPIP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_MULTICAST == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_IP_MROUTE [expr $CONFIG_IP_MROUTE&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NET_ALIAS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_IP_ALIAS == 2)} then {set CONFIG_IP_ALIAS 1}; set CONFIG_IP_ALIAS [expr $CONFIG_IP_ALIAS&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_NETLINK == 1)} then {
	set CONFIG_ARPD [expr $CONFIG_ARPD&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	set CONFIG_INET_PCTCP [expr $CONFIG_INET_PCTCP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_INET_RARP == 2)} then {set CONFIG_INET_RARP 1}; set CONFIG_INET_RARP [expr $CONFIG_INET_RARP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	set CONFIG_NO_PATH_MTU_DISCOVERY [expr $CONFIG_NO_PATH_MTU_DISCOVERY&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	set CONFIG_IP_NOSR [expr $CONFIG_IP_NOSR&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	set CONFIG_SKB_LARGE [expr $CONFIG_SKB_LARGE&15]}
	if {($CONFIG_NET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_IPX == 2)} then {set CONFIG_IPX 1}; set CONFIG_IPX [expr $CONFIG_IPX&15]}
	if {($CONFIG_NET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ATALK == 2)} then {set CONFIG_ATALK 1}; set CONFIG_ATALK [expr $CONFIG_ATALK&15]}
	if {($CONFIG_NET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_AX25 == 2)} then {set CONFIG_AX25 1}; set CONFIG_AX25 [expr $CONFIG_AX25&15]}
	global CONFIG_NETROM
	if {($CONFIG_NET == 1) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]]; set CONFIG_NETROM [sync_tristate $CONFIG_NETROM $tmpvar_dep]; set CONFIG_NETROM [expr $CONFIG_NETROM&15]}
	global CONFIG_ROSE
	if {($CONFIG_NET == 1) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]]; set CONFIG_ROSE [sync_tristate $CONFIG_ROSE $tmpvar_dep]; set CONFIG_ROSE [expr $CONFIG_ROSE&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_BRIDGE [expr $CONFIG_BRIDGE&15]}
	if {($CONFIG_NET == 1)} then {
	set CONFIG_NETLINK [expr $CONFIG_NETLINK&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETLINK == 1)} then {
	set CONFIG_RTNETLINK [expr $CONFIG_RTNETLINK&15]}
	if {($CONFIG_NET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_IPSEC == 2)} then {set CONFIG_IPSEC 1}; set CONFIG_IPSEC [expr $CONFIG_IPSEC&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	set CONFIG_IPSEC_IPIP [expr $CONFIG_IPSEC_IPIP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_IPIP == 1)} then {	global CONSTANT_Y
set CONFIG_IPSEC_ALG $CONSTANT_Y }
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_IPIP == 1)} then {	global CONSTANT_Y
set CONFIG_IPSEC_ALG_AES $CONSTANT_Y }
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	set CONFIG_IPSEC_AH [expr $CONFIG_IPSEC_AH&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_AH == 1 || $CONFIG_IPSEC_ESP == 1)} then {
	set CONFIG_IPSEC_AUTH_HMAC_MD5 [expr $CONFIG_IPSEC_AUTH_HMAC_MD5&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_AH == 1 || $CONFIG_IPSEC_ESP == 1)} then {
	set CONFIG_IPSEC_AUTH_HMAC_SHA1 [expr $CONFIG_IPSEC_AUTH_HMAC_SHA1&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	set CONFIG_IPSEC_ESP [expr $CONFIG_IPSEC_ESP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_ESP == 1)} then {
	set CONFIG_IPSEC_ENC_DES [expr $CONFIG_IPSEC_ENC_DES&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_ESP == 1)} then {
	set CONFIG_IPSEC_ENC_3DES [expr $CONFIG_IPSEC_ENC_3DES&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	set CONFIG_IPSEC_IPCOMP [expr $CONFIG_IPSEC_IPCOMP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_IPCOMP == 1)} then {
	set CONFIG_IPSEC_IPCOMP_LZS [expr $CONFIG_IPSEC_IPCOMP_LZS&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	set CONFIG_IPSEC_DEBUG [expr $CONFIG_IPSEC_DEBUG&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	set CONFIG_IPSEC_NAT_TRAVERSAL [expr $CONFIG_IPSEC_NAT_TRAVERSAL&15]}
}


menu_option menu7 7 "Network device support"
proc menu7 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 7}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 7]]
	message $w.m -width 400 -aspect 300 -text \
		"Network device support"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Network device support" 

	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 7"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 7; menu8 .menu8 \"$title\""
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 7; menu6 .menu6 \"$title\""
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 7 0 "Network device support" CONFIG_NETDEVICES
	tristate $w.config.f 7 1 "Dummy net driver support" CONFIG_DUMMY
	tristate $w.config.f 7 2 "SLIP (serial line) support" CONFIG_SLIP
	bool $w.config.f 7 3 " CSLIP compressed headers" CONFIG_SLIP_COMPRESSED
	bool $w.config.f 7 4 " Keepalive and linefill" CONFIG_SLIP_SMART
	bool $w.config.f 7 5 " Six bit SLIP encapsulation" CONFIG_SLIP_MODE_SLIP6
	tristate $w.config.f 7 6 "PPP (point-to-point) support" CONFIG_PPP
	comment $w.config.f 7 7 "CCP compressors for PPP are only built as modules."
	tristate $w.config.f 7 8 "EQL (serial line load balancing) support" CONFIG_EQUALIZER
	bool $w.config.f 7 9 "Cirrus Logic Crystal LAN cs8900 ethernet" CONFIG_UCCS8900
	bool $w.config.f 7 10 "Hardware byte-swapping support for cs8900 ethernet" CONFIG_UCCS8900_HW_SWAP
	hex $w.config.f 7 11 "Base Address for cs8900 ethernet" CS8900_BASE
	hex $w.config.f 7 12 "Base Address for cs8900 ethernet" CS8900_BASE
	bool $w.config.f 7 13 "SMC 9194 ethernet" CONFIG_SMC9194
	bool $w.config.f 7 14 "SMC 91C111 ethernet" CONFIG_SMC91111
	bool $w.config.f 7 15 "NE2000/NE1000 ISA ethernet" CONFIG_NE2000
	bool $w.config.f 7 16 "FEC ethernet controller (of ColdFire 5272)" CONFIG_FEC
	bool $w.config.f 7 17 "PCI NE2000 support" CONFIG_NE2K_PCI
	bool $w.config.f 7 18 "DECchip Tulip (dc21x4x) PCI support" CONFIG_DEC_ELCP
	bool $w.config.f 7 19 "MC68EN302 SCC ethernet" CONFIG_M68EN302_ETHERNET



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu7 {} {
	global CONFIG_NET
	global CONFIG_NETDEVICES
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu7.config.f.x0 normal {n l y}} else {configure_entry .menu7.config.f.x0 disabled {y n l}}
	global CONFIG_MODULES
	global CONFIG_DUMMY
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu7.config.f.x1 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu7.config.f.x1 normal {m}} else {configure_entry .menu7.config.f.x1 disabled {m}}; configure_entry .menu7.config.f.x1 normal {n l}} else {configure_entry .menu7.config.f.x1 disabled {y n m l}}
	global CONFIG_SLIP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu7.config.f.x2 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu7.config.f.x2 normal {m}} else {configure_entry .menu7.config.f.x2 disabled {m}}; configure_entry .menu7.config.f.x2 normal {n l}} else {configure_entry .menu7.config.f.x2 disabled {y n m l}}
	global CONFIG_SLIP_COMPRESSED
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SLIP != 0)} then {
	configure_entry .menu7.config.f.x3 normal {n l y}} else {configure_entry .menu7.config.f.x3 disabled {y n l}}
	global CONFIG_SLIP_SMART
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SLIP != 0)} then {
	configure_entry .menu7.config.f.x4 normal {n l y}} else {configure_entry .menu7.config.f.x4 disabled {y n l}}
	global CONFIG_SLIP_MODE_SLIP6
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SLIP != 0)} then {
	configure_entry .menu7.config.f.x5 normal {n l y}} else {configure_entry .menu7.config.f.x5 disabled {y n l}}
	global CONFIG_PPP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu7.config.f.x6 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu7.config.f.x6 normal {m}} else {configure_entry .menu7.config.f.x6 disabled {m}}; configure_entry .menu7.config.f.x6 normal {n l}} else {configure_entry .menu7.config.f.x6 disabled {y n m l}}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0)} then {configure_entry .menu7.config.f.x7 normal {m}} else {configure_entry .menu7.config.f.x7 disabled {m}}
	global CONFIG_EQUALIZER
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu7.config.f.x8 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu7.config.f.x8 normal {m}} else {configure_entry .menu7.config.f.x8 disabled {m}}; configure_entry .menu7.config.f.x8 normal {n l}} else {configure_entry .menu7.config.f.x8 disabled {y n m l}}
	global CONFIG_UCCS8900
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu7.config.f.x9 normal {n l y}} else {configure_entry .menu7.config.f.x9 disabled {y n l}}
	global CONFIG_UCCS8900_HW_SWAP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_UCCS8900 != 0)} then {
	configure_entry .menu7.config.f.x10 normal {n l y}} else {configure_entry .menu7.config.f.x10 disabled {y n l}}
	global CONFIG_ALMA_ANS
	global CS8900_BASE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_UCCS8900 != 0) && ($CONFIG_ALMA_ANS == 1)} then {.menu7.config.f.x11.x configure -state normal -foreground [ cget .ref -foreground ]; .menu7.config.f.x11.l configure -state normal; } else {.menu7.config.f.x11.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu7.config.f.x11.l configure -state disabled}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_UCCS8900 != 0) && ($CONFIG_ALMA_ANS != 1)} then {.menu7.config.f.x12.x configure -state normal -foreground [ cget .ref -foreground ]; .menu7.config.f.x12.l configure -state normal; } else {.menu7.config.f.x12.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu7.config.f.x12.l configure -state disabled}
	global CONFIG_SMC9194
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu7.config.f.x13 normal {n l y}} else {configure_entry .menu7.config.f.x13 disabled {y n l}}
	global CONFIG_SMC91111
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu7.config.f.x14 normal {n l y}} else {configure_entry .menu7.config.f.x14 disabled {y n l}}
	global CONFIG_NE2000
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu7.config.f.x15 normal {n l y}} else {configure_entry .menu7.config.f.x15 disabled {y n l}}
	global CONFIG_FEC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu7.config.f.x16 normal {n l y}} else {configure_entry .menu7.config.f.x16 disabled {y n l}}
	global CONFIG_PCI
	global CONFIG_NE2K_PCI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1)} then {
	configure_entry .menu7.config.f.x17 normal {n l y}} else {configure_entry .menu7.config.f.x17 disabled {y n l}}
	global CONFIG_DEC_ELCP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1)} then {
	configure_entry .menu7.config.f.x18 normal {n l y}} else {configure_entry .menu7.config.f.x18 disabled {y n l}}
	global CONFIG_M68EN302
	global CONFIG_M68EN302_ETHERNET
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_M68EN302 == 1)} then {
	configure_entry .menu7.config.f.x19 normal {n l y}} else {configure_entry .menu7.config.f.x19 disabled {y n l}}
}


proc update_define_menu7 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_DUMMY
	global CONFIG_SLIP
	global CONFIG_PPP
	global CONFIG_EQUALIZER
	global CONFIG_NETDEVICES
set CONFIG_NETDEVICES [expr $CONFIG_NETDEVICES|16]
set CONFIG_DUMMY [expr $CONFIG_DUMMY|16]
set CONFIG_SLIP [expr $CONFIG_SLIP|16]
	global CONFIG_SLIP_COMPRESSED
set CONFIG_SLIP_COMPRESSED [expr $CONFIG_SLIP_COMPRESSED|16]
	global CONFIG_SLIP_SMART
set CONFIG_SLIP_SMART [expr $CONFIG_SLIP_SMART|16]
	global CONFIG_SLIP_MODE_SLIP6
set CONFIG_SLIP_MODE_SLIP6 [expr $CONFIG_SLIP_MODE_SLIP6|16]
set CONFIG_PPP [expr $CONFIG_PPP|16]
set CONFIG_EQUALIZER [expr $CONFIG_EQUALIZER|16]
	global CONFIG_UCCS8900
set CONFIG_UCCS8900 [expr $CONFIG_UCCS8900|16]
	global CONFIG_UCCS8900_HW_SWAP
set CONFIG_UCCS8900_HW_SWAP [expr $CONFIG_UCCS8900_HW_SWAP|16]
	global CONFIG_SMC9194
set CONFIG_SMC9194 [expr $CONFIG_SMC9194|16]
	global CONFIG_SMC91111
set CONFIG_SMC91111 [expr $CONFIG_SMC91111|16]
	global CONFIG_NE2000
set CONFIG_NE2000 [expr $CONFIG_NE2000|16]
	global CONFIG_FEC
set CONFIG_FEC [expr $CONFIG_FEC|16]
	global CONFIG_NE2K_PCI
set CONFIG_NE2K_PCI [expr $CONFIG_NE2K_PCI|16]
	global CONFIG_DEC_ELCP
set CONFIG_DEC_ELCP [expr $CONFIG_DEC_ELCP|16]
	global CONFIG_M68EN302_ETHERNET
set CONFIG_M68EN302_ETHERNET [expr $CONFIG_M68EN302_ETHERNET|16]
	global CONFIG_NET
	if {($CONFIG_NET == 1)} then {
	set CONFIG_NETDEVICES [expr $CONFIG_NETDEVICES&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_DUMMY == 2)} then {set CONFIG_DUMMY 1}; set CONFIG_DUMMY [expr $CONFIG_DUMMY&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_SLIP == 2)} then {set CONFIG_SLIP 1}; set CONFIG_SLIP [expr $CONFIG_SLIP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SLIP != 0)} then {
	set CONFIG_SLIP_COMPRESSED [expr $CONFIG_SLIP_COMPRESSED&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SLIP != 0)} then {
	set CONFIG_SLIP_SMART [expr $CONFIG_SLIP_SMART&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SLIP != 0)} then {
	set CONFIG_SLIP_MODE_SLIP6 [expr $CONFIG_SLIP_MODE_SLIP6&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_PPP == 2)} then {set CONFIG_PPP 1}; set CONFIG_PPP [expr $CONFIG_PPP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_EQUALIZER == 2)} then {set CONFIG_EQUALIZER 1}; set CONFIG_EQUALIZER [expr $CONFIG_EQUALIZER&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	set CONFIG_UCCS8900 [expr $CONFIG_UCCS8900&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_UCCS8900 != 0)} then {
	set CONFIG_UCCS8900_HW_SWAP [expr $CONFIG_UCCS8900_HW_SWAP&15]}
	global CONFIG_ALMA_ANS
	global CS8900_BASE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_UCCS8900 != 0) && ($CONFIG_ALMA_ANS == 1)} then {validate_hex CS8900_BASE "$CS8900_BASE" 0x10200300}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_UCCS8900 != 0) && ($CONFIG_ALMA_ANS != 1)} then {validate_hex CS8900_BASE "$CS8900_BASE" 0x10000300}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	set CONFIG_SMC9194 [expr $CONFIG_SMC9194&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	set CONFIG_SMC91111 [expr $CONFIG_SMC91111&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	set CONFIG_NE2000 [expr $CONFIG_NE2000&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	set CONFIG_FEC [expr $CONFIG_FEC&15]}
	global CONFIG_PCI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1)} then {
	set CONFIG_NE2K_PCI [expr $CONFIG_NE2K_PCI&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1)} then {
	set CONFIG_DEC_ELCP [expr $CONFIG_DEC_ELCP&15]}
	global CONFIG_M68EN302
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_M68EN302 == 1)} then {
	set CONFIG_M68EN302_ETHERNET [expr $CONFIG_M68EN302_ETHERNET&15]}
}


menu_option menu8 8 "Filesystems"
proc menu8 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 8}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 8]]
	message $w.m -width 400 -aspect 300 -text \
		"Filesystems"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Filesystems" 

	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 8"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; menu9 .menu9 \"$title\""
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 8; menu7 .menu7 \"$title\""
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 8 0 "Quota support" CONFIG_QUOTA
	tristate $w.config.f 8 1 "Minix fs support" CONFIG_MINIX_FS
	tristate $w.config.f 8 2 "Extended fs support" CONFIG_EXT_FS
	tristate $w.config.f 8 3 "Second extended fs support" CONFIG_EXT2_FS
	tristate $w.config.f 8 4 "xiafs filesystem support" CONFIG_XIA_FS
	tristate $w.config.f 8 5 "Native language support (Needed for FAT and ISO9660)" CONFIG_NLS
	dep_tristate $w.config.f 8 6 "  ISO9660 cdrom filesystem support" CONFIG_ISO9660_FS
	dep_tristate $w.config.f 8 7 "  DOS FAT fs support" CONFIG_FAT_FS
	dep_tristate $w.config.f 8 8 "    MSDOS fs support" CONFIG_MSDOS_FS
	dep_tristate $w.config.f 8 9 "      umsdos: Unix like fs on top of std MSDOS FAT fs" CONFIG_UMSDOS_FS
	dep_tristate $w.config.f 8 10 "      VFAT (Windows-95) fs support" CONFIG_VFAT_FS
	submenu $w.config.f 8 11 "Select available code pages" 9
	bool $w.config.f 8 12 "/proc filesystem support" CONFIG_PROC_FS
	tristate $w.config.f 8 13 "NFS filesystem support" CONFIG_NFS_FS
	bool $w.config.f 8 14 "  Root file system on NFS" CONFIG_ROOT_NFS
	bool $w.config.f 8 15 "    BOOTP support" CONFIG_RNFS_BOOTP
	bool $w.config.f 8 16 "    RARP support" CONFIG_RNFS_RARP
	tristate $w.config.f 8 17 "SMB filesystem support (to mount WfW shares etc..)" CONFIG_SMB_FS
	bool $w.config.f 8 18 "  SMB Win95 bug work-around" CONFIG_SMB_WIN95
	tristate $w.config.f 8 19 "NCP filesystem support (to mount NetWare volumes)" CONFIG_NCP_FS
	bool $w.config.f 8 20 "  Packet signatures" CONFIG_NCPFS_PACKET_SIGNING
	bool $w.config.f 8 21 "  Proprietary file locking" CONFIG_NCPFS_IOCTL_LOCKING
	bool $w.config.f 8 22 "  Clear remove/delete inhibit when needed" CONFIG_NCPFS_STRONG
	bool $w.config.f 8 23 "  Use NFS namespace if available" CONFIG_NCPFS_NFS_NS
	bool $w.config.f 8 24 "  Use LONG (OS/2) namespace if available" CONFIG_NCPFS_OS2_NS
	bool $w.config.f 8 25 "  Allow mounting of volume subdirectories" CONFIG_NCPFS_MOUNT_SUBDIR
	tristate $w.config.f 8 26 "OS/2 HPFS filesystem support (read only)" CONFIG_HPFS_FS
	tristate $w.config.f 8 27 "System V and Coherent filesystem support" CONFIG_SYSV_FS
	tristate $w.config.f 8 28 "Kernel automounter support (EXPERIMENTAL)" CONFIG_AUTOFS_FS
	tristate $w.config.f 8 29 "Amiga FFS filesystem support (EXPERIMENTAL)" CONFIG_AFFS_FS
	tristate $w.config.f 8 30 "ROM filesystem support" CONFIG_ROMFS_FS
	tristate $w.config.f 8 31 "Journaling FLASH filesystem support" CONFIG_JFFS_FS
	tristate $w.config.f 8 32 "UFS filesystem support (read only)" CONFIG_UFS_FS
	bool $w.config.f 8 33 "  BSD disklabel (FreeBSD partition tables) support" CONFIG_BSD_DISKLABEL
	bool $w.config.f 8 34 "  SMD disklabel (Sun partition tables) support" CONFIG_SMD_DISKLABEL



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu8 {} {
	global CONFIG_MINIX_FS
	global CONFIG_MODULES

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu8.config.f.x1 normal {m}} else {configure_entry .menu8.config.f.x1 disabled {m}}
	global CONFIG_EXT_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu8.config.f.x2 normal {m}} else {configure_entry .menu8.config.f.x2 disabled {m}}
	global CONFIG_EXT2_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu8.config.f.x3 normal {m}} else {configure_entry .menu8.config.f.x3 disabled {m}}
	global CONFIG_XIA_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu8.config.f.x4 normal {m}} else {configure_entry .menu8.config.f.x4 disabled {m}}
	global CONFIG_NLS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu8.config.f.x5 normal {m}} else {configure_entry .menu8.config.f.x5 disabled {m}}
	global CONFIG_ISO9660_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_ISO9660_FS [sync_tristate $CONFIG_ISO9660_FS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu8.config.f.x6 disabled {y}} else {configure_entry .menu8.config.f.x6 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu8.config.f.x6 disabled {m}} else {configure_entry .menu8.config.f.x6 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu8.config.f.x6 normal {m}} else {configure_entry .menu8.config.f.x6 disabled {m}}; configure_entry .menu8.config.f.x6 normal {n l}} else {configure_entry .menu8.config.f.x6 disabled {y n m l}}
	global CONFIG_FAT_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_FAT_FS [sync_tristate $CONFIG_FAT_FS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu8.config.f.x7 disabled {y}} else {configure_entry .menu8.config.f.x7 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu8.config.f.x7 disabled {m}} else {configure_entry .menu8.config.f.x7 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu8.config.f.x7 normal {m}} else {configure_entry .menu8.config.f.x7 disabled {m}}; configure_entry .menu8.config.f.x7 normal {n l}} else {configure_entry .menu8.config.f.x7 disabled {y n m l}}
	global CONFIG_MSDOS_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_FAT_FS == 1 || $CONFIG_FAT_FS == 2 || $CONFIG_FAT_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_FAT_FS]];set CONFIG_MSDOS_FS [sync_tristate $CONFIG_MSDOS_FS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu8.config.f.x8 disabled {y}} else {configure_entry .menu8.config.f.x8 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu8.config.f.x8 disabled {m}} else {configure_entry .menu8.config.f.x8 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu8.config.f.x8 normal {m}} else {configure_entry .menu8.config.f.x8 disabled {m}}; configure_entry .menu8.config.f.x8 normal {n l}} else {configure_entry .menu8.config.f.x8 disabled {y n m l}}
	global CONFIG_UMSDOS_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_MSDOS_FS == 1 || $CONFIG_MSDOS_FS == 2 || $CONFIG_MSDOS_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MSDOS_FS]];set CONFIG_UMSDOS_FS [sync_tristate $CONFIG_UMSDOS_FS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu8.config.f.x9 disabled {y}} else {configure_entry .menu8.config.f.x9 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu8.config.f.x9 disabled {m}} else {configure_entry .menu8.config.f.x9 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu8.config.f.x9 normal {m}} else {configure_entry .menu8.config.f.x9 disabled {m}}; configure_entry .menu8.config.f.x9 normal {n l}} else {configure_entry .menu8.config.f.x9 disabled {y n m l}}
	global CONFIG_VFAT_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_FAT_FS == 1 || $CONFIG_FAT_FS == 2 || $CONFIG_FAT_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_FAT_FS]];set CONFIG_VFAT_FS [sync_tristate $CONFIG_VFAT_FS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu8.config.f.x10 disabled {y}} else {configure_entry .menu8.config.f.x10 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu8.config.f.x10 disabled {m}} else {configure_entry .menu8.config.f.x10 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu8.config.f.x10 normal {m}} else {configure_entry .menu8.config.f.x10 disabled {m}}; configure_entry .menu8.config.f.x10 normal {n l}} else {configure_entry .menu8.config.f.x10 disabled {y n m l}}
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2)} then {configure_entry .menu8.config.f.x11 normal {m}} else {configure_entry .menu8.config.f.x11 disabled {m}}
	global CONFIG_INET
	global CONFIG_NFS_FS
	if {($CONFIG_INET == 1)} then {
	configure_entry .menu8.config.f.x13 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu8.config.f.x13 normal {m}} else {configure_entry .menu8.config.f.x13 disabled {m}}; configure_entry .menu8.config.f.x13 normal {n l}} else {configure_entry .menu8.config.f.x13 disabled {y n m l}}
	global CONFIG_ROOT_NFS
	if {($CONFIG_INET == 1) && ($CONFIG_NFS_FS == 1)} then {
	configure_entry .menu8.config.f.x14 normal {n l y}} else {configure_entry .menu8.config.f.x14 disabled {y n l}}
	global CONFIG_RNFS_BOOTP
	if {($CONFIG_INET == 1) && ($CONFIG_NFS_FS == 1) && ($CONFIG_ROOT_NFS == 1)} then {
	configure_entry .menu8.config.f.x15 normal {n l y}} else {configure_entry .menu8.config.f.x15 disabled {y n l}}
	global CONFIG_RNFS_RARP
	if {($CONFIG_INET == 1) && ($CONFIG_NFS_FS == 1) && ($CONFIG_ROOT_NFS == 1)} then {
	configure_entry .menu8.config.f.x16 normal {n l y}} else {configure_entry .menu8.config.f.x16 disabled {y n l}}
	global CONFIG_SMB_FS
	if {($CONFIG_INET == 1)} then {
	configure_entry .menu8.config.f.x17 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu8.config.f.x17 normal {m}} else {configure_entry .menu8.config.f.x17 disabled {m}}; configure_entry .menu8.config.f.x17 normal {n l}} else {configure_entry .menu8.config.f.x17 disabled {y n m l}}
	global CONFIG_SMB_WIN95
	if {($CONFIG_INET == 1) && ($CONFIG_SMB_FS != 0)} then {
	configure_entry .menu8.config.f.x18 normal {n l y}} else {configure_entry .menu8.config.f.x18 disabled {y n l}}
	global CONFIG_IPX
	global CONFIG_NCP_FS
	if {($CONFIG_IPX != 0)} then {
	configure_entry .menu8.config.f.x19 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu8.config.f.x19 normal {m}} else {configure_entry .menu8.config.f.x19 disabled {m}}; configure_entry .menu8.config.f.x19 normal {n l}} else {configure_entry .menu8.config.f.x19 disabled {y n m l}}
	global CONFIG_NCPFS_PACKET_SIGNING
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {
	configure_entry .menu8.config.f.x20 normal {n l y}} else {configure_entry .menu8.config.f.x20 disabled {y n l}}
	global CONFIG_NCPFS_IOCTL_LOCKING
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {
	configure_entry .menu8.config.f.x21 normal {n l y}} else {configure_entry .menu8.config.f.x21 disabled {y n l}}
	global CONFIG_NCPFS_STRONG
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {
	configure_entry .menu8.config.f.x22 normal {n l y}} else {configure_entry .menu8.config.f.x22 disabled {y n l}}
	global CONFIG_NCPFS_NFS_NS
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {
	configure_entry .menu8.config.f.x23 normal {n l y}} else {configure_entry .menu8.config.f.x23 disabled {y n l}}
	global CONFIG_NCPFS_OS2_NS
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {
	configure_entry .menu8.config.f.x24 normal {n l y}} else {configure_entry .menu8.config.f.x24 disabled {y n l}}
	global CONFIG_NCPFS_MOUNT_SUBDIR
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {
	configure_entry .menu8.config.f.x25 normal {n l y}} else {configure_entry .menu8.config.f.x25 disabled {y n l}}
	global CONFIG_HPFS_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu8.config.f.x26 normal {m}} else {configure_entry .menu8.config.f.x26 disabled {m}}
	global CONFIG_SYSV_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu8.config.f.x27 normal {m}} else {configure_entry .menu8.config.f.x27 disabled {m}}
	global CONFIG_EXPERIMENTAL
	global CONFIG_AUTOFS_FS
	if {($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu8.config.f.x28 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu8.config.f.x28 normal {m}} else {configure_entry .menu8.config.f.x28 disabled {m}}; configure_entry .menu8.config.f.x28 normal {n l}} else {configure_entry .menu8.config.f.x28 disabled {y n m l}}
	global CONFIG_AFFS_FS
	if {($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu8.config.f.x29 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu8.config.f.x29 normal {m}} else {configure_entry .menu8.config.f.x29 disabled {m}}; configure_entry .menu8.config.f.x29 normal {n l}} else {configure_entry .menu8.config.f.x29 disabled {y n m l}}
	global CONFIG_ROMFS_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu8.config.f.x30 normal {m}} else {configure_entry .menu8.config.f.x30 disabled {m}}
	global CONFIG_JFFS_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu8.config.f.x31 normal {m}} else {configure_entry .menu8.config.f.x31 disabled {m}}
	global CONFIG_UFS_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu8.config.f.x32 normal {m}} else {configure_entry .menu8.config.f.x32 disabled {m}}
	global CONFIG_BSD_DISKLABEL
	if {($CONFIG_UFS_FS != 0)} then {
	configure_entry .menu8.config.f.x33 normal {n l y}} else {configure_entry .menu8.config.f.x33 disabled {y n l}}
	global CONFIG_SMD_DISKLABEL
	if {($CONFIG_UFS_FS != 0)} then {
	configure_entry .menu8.config.f.x34 normal {n l y}} else {configure_entry .menu8.config.f.x34 disabled {y n l}}
}


proc update_define_menu8 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_MINIX_FS
	global CONFIG_EXT_FS
	global CONFIG_EXT2_FS
	global CONFIG_XIA_FS
	global CONFIG_NLS
	global CONFIG_NFS_FS
	global CONFIG_SMB_FS
	global CONFIG_NCP_FS
	global CONFIG_HPFS_FS
	global CONFIG_SYSV_FS
	global CONFIG_AUTOFS_FS
	global CONFIG_AFFS_FS
	global CONFIG_AMIGA_PARTITION
	global CONFIG_ROMFS_FS
	global CONFIG_JFFS_FS
	global CONFIG_UFS_FS
set CONFIG_NFS_FS [expr $CONFIG_NFS_FS|16]
	global CONFIG_ROOT_NFS
set CONFIG_ROOT_NFS [expr $CONFIG_ROOT_NFS|16]
	global CONFIG_RNFS_BOOTP
set CONFIG_RNFS_BOOTP [expr $CONFIG_RNFS_BOOTP|16]
	global CONFIG_RNFS_RARP
set CONFIG_RNFS_RARP [expr $CONFIG_RNFS_RARP|16]
set CONFIG_SMB_FS [expr $CONFIG_SMB_FS|16]
	global CONFIG_SMB_WIN95
set CONFIG_SMB_WIN95 [expr $CONFIG_SMB_WIN95|16]
set CONFIG_NCP_FS [expr $CONFIG_NCP_FS|16]
	global CONFIG_NCPFS_PACKET_SIGNING
set CONFIG_NCPFS_PACKET_SIGNING [expr $CONFIG_NCPFS_PACKET_SIGNING|16]
	global CONFIG_NCPFS_IOCTL_LOCKING
set CONFIG_NCPFS_IOCTL_LOCKING [expr $CONFIG_NCPFS_IOCTL_LOCKING|16]
	global CONFIG_NCPFS_STRONG
set CONFIG_NCPFS_STRONG [expr $CONFIG_NCPFS_STRONG|16]
	global CONFIG_NCPFS_NFS_NS
set CONFIG_NCPFS_NFS_NS [expr $CONFIG_NCPFS_NFS_NS|16]
	global CONFIG_NCPFS_OS2_NS
set CONFIG_NCPFS_OS2_NS [expr $CONFIG_NCPFS_OS2_NS|16]
	global CONFIG_NCPFS_MOUNT_SUBDIR
set CONFIG_NCPFS_MOUNT_SUBDIR [expr $CONFIG_NCPFS_MOUNT_SUBDIR|16]
set CONFIG_AUTOFS_FS [expr $CONFIG_AUTOFS_FS|16]
set CONFIG_AFFS_FS [expr $CONFIG_AFFS_FS|16]
	global CONFIG_BSD_DISKLABEL
set CONFIG_BSD_DISKLABEL [expr $CONFIG_BSD_DISKLABEL|16]
	global CONFIG_SMD_DISKLABEL
set CONFIG_SMD_DISKLABEL [expr $CONFIG_SMD_DISKLABEL|16]

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_MINIX_FS == 2)} then {set CONFIG_MINIX_FS 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_EXT_FS == 2)} then {set CONFIG_EXT_FS 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_EXT2_FS == 2)} then {set CONFIG_EXT2_FS 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_XIA_FS == 2)} then {set CONFIG_XIA_FS 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_NLS == 2)} then {set CONFIG_NLS 1}}
	global CONFIG_ISO9660_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_ISO9660_FS [sync_tristate $CONFIG_ISO9660_FS $tmpvar_dep]; set CONFIG_ISO9660_FS [expr $CONFIG_ISO9660_FS&15]}
	global CONFIG_FAT_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_FAT_FS [sync_tristate $CONFIG_FAT_FS $tmpvar_dep]; set CONFIG_FAT_FS [expr $CONFIG_FAT_FS&15]}
	global CONFIG_MSDOS_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_FAT_FS == 1 || $CONFIG_FAT_FS == 2 || $CONFIG_FAT_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_FAT_FS]]; set CONFIG_MSDOS_FS [sync_tristate $CONFIG_MSDOS_FS $tmpvar_dep]; set CONFIG_MSDOS_FS [expr $CONFIG_MSDOS_FS&15]}
	global CONFIG_UMSDOS_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_MSDOS_FS == 1 || $CONFIG_MSDOS_FS == 2 || $CONFIG_MSDOS_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MSDOS_FS]]; set CONFIG_UMSDOS_FS [sync_tristate $CONFIG_UMSDOS_FS $tmpvar_dep]; set CONFIG_UMSDOS_FS [expr $CONFIG_UMSDOS_FS&15]}
	global CONFIG_VFAT_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_FAT_FS == 1 || $CONFIG_FAT_FS == 2 || $CONFIG_FAT_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_FAT_FS]]; set CONFIG_VFAT_FS [sync_tristate $CONFIG_VFAT_FS $tmpvar_dep]; set CONFIG_VFAT_FS [expr $CONFIG_VFAT_FS&15]}
	global CONFIG_INET
	if {($CONFIG_INET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NFS_FS == 2)} then {set CONFIG_NFS_FS 1}; set CONFIG_NFS_FS [expr $CONFIG_NFS_FS&15]}
	if {($CONFIG_INET == 1) && ($CONFIG_NFS_FS == 1)} then {
	set CONFIG_ROOT_NFS [expr $CONFIG_ROOT_NFS&15]}
	if {($CONFIG_INET == 1) && ($CONFIG_NFS_FS == 1) && ($CONFIG_ROOT_NFS == 1)} then {
	set CONFIG_RNFS_BOOTP [expr $CONFIG_RNFS_BOOTP&15]}
	if {($CONFIG_INET == 1) && ($CONFIG_NFS_FS == 1) && ($CONFIG_ROOT_NFS == 1)} then {
	set CONFIG_RNFS_RARP [expr $CONFIG_RNFS_RARP&15]}
	if {($CONFIG_INET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_SMB_FS == 2)} then {set CONFIG_SMB_FS 1}; set CONFIG_SMB_FS [expr $CONFIG_SMB_FS&15]}
	if {($CONFIG_INET == 1) && ($CONFIG_SMB_FS != 0)} then {
	set CONFIG_SMB_WIN95 [expr $CONFIG_SMB_WIN95&15]}
	global CONFIG_IPX
	if {($CONFIG_IPX != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NCP_FS == 2)} then {set CONFIG_NCP_FS 1}; set CONFIG_NCP_FS [expr $CONFIG_NCP_FS&15]}
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {
	set CONFIG_NCPFS_PACKET_SIGNING [expr $CONFIG_NCPFS_PACKET_SIGNING&15]}
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {
	set CONFIG_NCPFS_IOCTL_LOCKING [expr $CONFIG_NCPFS_IOCTL_LOCKING&15]}
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {
	set CONFIG_NCPFS_STRONG [expr $CONFIG_NCPFS_STRONG&15]}
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {
	set CONFIG_NCPFS_NFS_NS [expr $CONFIG_NCPFS_NFS_NS&15]}
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {
	set CONFIG_NCPFS_OS2_NS [expr $CONFIG_NCPFS_OS2_NS&15]}
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {
	set CONFIG_NCPFS_MOUNT_SUBDIR [expr $CONFIG_NCPFS_MOUNT_SUBDIR&15]}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_HPFS_FS == 2)} then {set CONFIG_HPFS_FS 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_SYSV_FS == 2)} then {set CONFIG_SYSV_FS 1}}
	global CONFIG_EXPERIMENTAL
	if {($CONFIG_EXPERIMENTAL == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_AUTOFS_FS == 2)} then {set CONFIG_AUTOFS_FS 1}; set CONFIG_AUTOFS_FS [expr $CONFIG_AUTOFS_FS&15]}
	if {($CONFIG_EXPERIMENTAL == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_AFFS_FS == 2)} then {set CONFIG_AFFS_FS 1}; set CONFIG_AFFS_FS [expr $CONFIG_AFFS_FS&15]}
	if {($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_AFFS_FS != 0)} then {	global CONSTANT_Y
set CONFIG_AMIGA_PARTITION $CONSTANT_Y }

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_ROMFS_FS == 2)} then {set CONFIG_ROMFS_FS 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_JFFS_FS == 2)} then {set CONFIG_JFFS_FS 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_UFS_FS == 2)} then {set CONFIG_UFS_FS 1}}
	if {($CONFIG_UFS_FS != 0)} then {
	set CONFIG_BSD_DISKLABEL [expr $CONFIG_BSD_DISKLABEL&15]}
	if {($CONFIG_UFS_FS != 0)} then {
	set CONFIG_SMD_DISKLABEL [expr $CONFIG_SMD_DISKLABEL&15]}
}


proc menu9 {w title} {
	set oldFocus [focus]
	catch {focus .menu8}
	catch {destroy $w; unregister_active 9}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 9]]
	message $w.m -width 400 -aspect 300 -text \
		"Select available code pages"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Select available code pages" 

	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 9"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 9; catch {destroy .menu8}; unregister_active 8; menu10 .menu10 \"$title\""
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 9; menu8 .menu8 \"$title\""
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	dep_tristate $w.config.f 9 0 "Codepage 437 (United States, Canada)" CONFIG_NLS_CODEPAGE_437
	dep_tristate $w.config.f 9 1 "Codepage 737 (Greek)" CONFIG_NLS_CODEPAGE_737
	dep_tristate $w.config.f 9 2 "Codepage 775 (Baltic Rim)" CONFIG_NLS_CODEPAGE_775
	dep_tristate $w.config.f 9 3 "Codepage 850 (Europe)" CONFIG_NLS_CODEPAGE_850
	dep_tristate $w.config.f 9 4 "Codepage 852 (Central/Eastern Europe)" CONFIG_NLS_CODEPAGE_852
	dep_tristate $w.config.f 9 5 "Codepage 855 (Cyrillic)" CONFIG_NLS_CODEPAGE_855
	dep_tristate $w.config.f 9 6 "Codepage 857 (Turkish)" CONFIG_NLS_CODEPAGE_857
	dep_tristate $w.config.f 9 7 "Codepage 860 (Portugese)" CONFIG_NLS_CODEPAGE_860
	dep_tristate $w.config.f 9 8 "Codepage 861 (Icelandic)" CONFIG_NLS_CODEPAGE_861
	dep_tristate $w.config.f 9 9 "Codepage 862 (Hebrew)" CONFIG_NLS_CODEPAGE_862
	dep_tristate $w.config.f 9 10 "Codepage 863 (Canadian French)" CONFIG_NLS_CODEPAGE_863
	dep_tristate $w.config.f 9 11 "Codepage 864 (Arabic)" CONFIG_NLS_CODEPAGE_864
	dep_tristate $w.config.f 9 12 "Codepage 865 (Nordic European)" CONFIG_NLS_CODEPAGE_865
	dep_tristate $w.config.f 9 13 "Codepage 866 (Cyrillic/Russian)" CONFIG_NLS_CODEPAGE_866
	dep_tristate $w.config.f 9 14 "Codepage 869 (Greek)" CONFIG_NLS_CODEPAGE_869
	dep_tristate $w.config.f 9 15 "Codepage 874 (Thai)" CONFIG_NLS_CODEPAGE_874
	dep_tristate $w.config.f 9 16 "NLS ISO 8859-1 (Latin 1; Western Europe)" CONFIG_NLS_ISO8859_1
	dep_tristate $w.config.f 9 17 "NLS ISO 8859-2 (Latin 2; Slavic/Central European)" CONFIG_NLS_ISO8859_2
	dep_tristate $w.config.f 9 18 "NLS ISO 8859-3 (Latin 3; Esperanto, Galician, Maltese, Turkish)" CONFIG_NLS_ISO8859_3
	dep_tristate $w.config.f 9 19 "NLS ISO 8859-4 (Latin 4; Estonian, Latvian, Lithuanian)" CONFIG_NLS_ISO8859_4
	dep_tristate $w.config.f 9 20 "NLS ISO 8859-5 (Cyrillic)" CONFIG_NLS_ISO8859_5
	dep_tristate $w.config.f 9 21 "NLS ISO 8859-6 (Arabic)" CONFIG_NLS_ISO8859_6
	dep_tristate $w.config.f 9 22 "NLS ISO 8859-7 (Modern Greek)" CONFIG_NLS_ISO8859_7
	dep_tristate $w.config.f 9 23 "NLS ISO 8859-8 (Hebrew)" CONFIG_NLS_ISO8859_8
	dep_tristate $w.config.f 9 24 "NLS ISO 8859-9 (Latin 5; Turkey)" CONFIG_NLS_ISO8859_9
	dep_tristate $w.config.f 9 25 "NLS ISO 8859-14 (Latin 8; Celtic)" CONFIG_NLS_ISO8859_14
	dep_tristate $w.config.f 9 26 "NLS ISO 8859-15 (Latin 9; Western European Languages with Euro)" CONFIG_NLS_ISO8859_15
	dep_tristate $w.config.f 9 27 "NLS KOI8-R (Russian)" CONFIG_NLS_KOI8_R



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu8] == 0} then {menu8 .menu8 "Filesystems"}
	set winx [expr [winfo x .menu8]+30]; set winy [expr [winfo y .menu8]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu9 {} {
	global CONFIG_MODULES
	global CONFIG_NLS
	global CONFIG_NLS_CODEPAGE_437
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_437 [sync_tristate $CONFIG_NLS_CODEPAGE_437 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x0 disabled {y}} else {configure_entry .menu9.config.f.x0 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x0 disabled {m}} else {configure_entry .menu9.config.f.x0 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x0 normal {m}} else {configure_entry .menu9.config.f.x0 disabled {m}}; configure_entry .menu9.config.f.x0 normal {n l}} else {configure_entry .menu9.config.f.x0 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_737
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_737 [sync_tristate $CONFIG_NLS_CODEPAGE_737 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x1 disabled {y}} else {configure_entry .menu9.config.f.x1 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x1 disabled {m}} else {configure_entry .menu9.config.f.x1 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x1 normal {m}} else {configure_entry .menu9.config.f.x1 disabled {m}}; configure_entry .menu9.config.f.x1 normal {n l}} else {configure_entry .menu9.config.f.x1 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_775
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_775 [sync_tristate $CONFIG_NLS_CODEPAGE_775 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x2 disabled {y}} else {configure_entry .menu9.config.f.x2 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x2 disabled {m}} else {configure_entry .menu9.config.f.x2 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x2 normal {m}} else {configure_entry .menu9.config.f.x2 disabled {m}}; configure_entry .menu9.config.f.x2 normal {n l}} else {configure_entry .menu9.config.f.x2 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_850
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_850 [sync_tristate $CONFIG_NLS_CODEPAGE_850 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x3 disabled {y}} else {configure_entry .menu9.config.f.x3 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x3 disabled {m}} else {configure_entry .menu9.config.f.x3 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x3 normal {m}} else {configure_entry .menu9.config.f.x3 disabled {m}}; configure_entry .menu9.config.f.x3 normal {n l}} else {configure_entry .menu9.config.f.x3 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_852
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_852 [sync_tristate $CONFIG_NLS_CODEPAGE_852 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x4 disabled {y}} else {configure_entry .menu9.config.f.x4 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x4 disabled {m}} else {configure_entry .menu9.config.f.x4 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x4 normal {m}} else {configure_entry .menu9.config.f.x4 disabled {m}}; configure_entry .menu9.config.f.x4 normal {n l}} else {configure_entry .menu9.config.f.x4 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_855
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_855 [sync_tristate $CONFIG_NLS_CODEPAGE_855 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x5 disabled {y}} else {configure_entry .menu9.config.f.x5 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x5 disabled {m}} else {configure_entry .menu9.config.f.x5 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x5 normal {m}} else {configure_entry .menu9.config.f.x5 disabled {m}}; configure_entry .menu9.config.f.x5 normal {n l}} else {configure_entry .menu9.config.f.x5 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_857
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_857 [sync_tristate $CONFIG_NLS_CODEPAGE_857 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x6 disabled {y}} else {configure_entry .menu9.config.f.x6 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x6 disabled {m}} else {configure_entry .menu9.config.f.x6 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x6 normal {m}} else {configure_entry .menu9.config.f.x6 disabled {m}}; configure_entry .menu9.config.f.x6 normal {n l}} else {configure_entry .menu9.config.f.x6 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_860
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_860 [sync_tristate $CONFIG_NLS_CODEPAGE_860 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x7 disabled {y}} else {configure_entry .menu9.config.f.x7 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x7 disabled {m}} else {configure_entry .menu9.config.f.x7 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x7 normal {m}} else {configure_entry .menu9.config.f.x7 disabled {m}}; configure_entry .menu9.config.f.x7 normal {n l}} else {configure_entry .menu9.config.f.x7 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_861
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_861 [sync_tristate $CONFIG_NLS_CODEPAGE_861 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x8 disabled {y}} else {configure_entry .menu9.config.f.x8 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x8 disabled {m}} else {configure_entry .menu9.config.f.x8 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x8 normal {m}} else {configure_entry .menu9.config.f.x8 disabled {m}}; configure_entry .menu9.config.f.x8 normal {n l}} else {configure_entry .menu9.config.f.x8 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_862
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_862 [sync_tristate $CONFIG_NLS_CODEPAGE_862 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x9 disabled {y}} else {configure_entry .menu9.config.f.x9 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x9 disabled {m}} else {configure_entry .menu9.config.f.x9 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x9 normal {m}} else {configure_entry .menu9.config.f.x9 disabled {m}}; configure_entry .menu9.config.f.x9 normal {n l}} else {configure_entry .menu9.config.f.x9 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_863
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_863 [sync_tristate $CONFIG_NLS_CODEPAGE_863 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x10 disabled {y}} else {configure_entry .menu9.config.f.x10 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x10 disabled {m}} else {configure_entry .menu9.config.f.x10 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x10 normal {m}} else {configure_entry .menu9.config.f.x10 disabled {m}}; configure_entry .menu9.config.f.x10 normal {n l}} else {configure_entry .menu9.config.f.x10 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_864
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_864 [sync_tristate $CONFIG_NLS_CODEPAGE_864 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x11 disabled {y}} else {configure_entry .menu9.config.f.x11 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x11 disabled {m}} else {configure_entry .menu9.config.f.x11 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x11 normal {m}} else {configure_entry .menu9.config.f.x11 disabled {m}}; configure_entry .menu9.config.f.x11 normal {n l}} else {configure_entry .menu9.config.f.x11 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_865
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_865 [sync_tristate $CONFIG_NLS_CODEPAGE_865 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x12 disabled {y}} else {configure_entry .menu9.config.f.x12 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x12 disabled {m}} else {configure_entry .menu9.config.f.x12 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x12 normal {m}} else {configure_entry .menu9.config.f.x12 disabled {m}}; configure_entry .menu9.config.f.x12 normal {n l}} else {configure_entry .menu9.config.f.x12 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_866
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_866 [sync_tristate $CONFIG_NLS_CODEPAGE_866 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x13 disabled {y}} else {configure_entry .menu9.config.f.x13 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x13 disabled {m}} else {configure_entry .menu9.config.f.x13 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x13 normal {m}} else {configure_entry .menu9.config.f.x13 disabled {m}}; configure_entry .menu9.config.f.x13 normal {n l}} else {configure_entry .menu9.config.f.x13 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_869
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_869 [sync_tristate $CONFIG_NLS_CODEPAGE_869 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x14 disabled {y}} else {configure_entry .menu9.config.f.x14 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x14 disabled {m}} else {configure_entry .menu9.config.f.x14 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x14 normal {m}} else {configure_entry .menu9.config.f.x14 disabled {m}}; configure_entry .menu9.config.f.x14 normal {n l}} else {configure_entry .menu9.config.f.x14 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_874
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_CODEPAGE_874 [sync_tristate $CONFIG_NLS_CODEPAGE_874 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x15 disabled {y}} else {configure_entry .menu9.config.f.x15 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x15 disabled {m}} else {configure_entry .menu9.config.f.x15 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x15 normal {m}} else {configure_entry .menu9.config.f.x15 disabled {m}}; configure_entry .menu9.config.f.x15 normal {n l}} else {configure_entry .menu9.config.f.x15 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_1
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_ISO8859_1 [sync_tristate $CONFIG_NLS_ISO8859_1 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x16 disabled {y}} else {configure_entry .menu9.config.f.x16 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x16 disabled {m}} else {configure_entry .menu9.config.f.x16 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x16 normal {m}} else {configure_entry .menu9.config.f.x16 disabled {m}}; configure_entry .menu9.config.f.x16 normal {n l}} else {configure_entry .menu9.config.f.x16 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_2
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_ISO8859_2 [sync_tristate $CONFIG_NLS_ISO8859_2 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x17 disabled {y}} else {configure_entry .menu9.config.f.x17 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x17 disabled {m}} else {configure_entry .menu9.config.f.x17 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x17 normal {m}} else {configure_entry .menu9.config.f.x17 disabled {m}}; configure_entry .menu9.config.f.x17 normal {n l}} else {configure_entry .menu9.config.f.x17 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_3
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_ISO8859_3 [sync_tristate $CONFIG_NLS_ISO8859_3 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x18 disabled {y}} else {configure_entry .menu9.config.f.x18 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x18 disabled {m}} else {configure_entry .menu9.config.f.x18 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x18 normal {m}} else {configure_entry .menu9.config.f.x18 disabled {m}}; configure_entry .menu9.config.f.x18 normal {n l}} else {configure_entry .menu9.config.f.x18 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_4
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_ISO8859_4 [sync_tristate $CONFIG_NLS_ISO8859_4 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x19 disabled {y}} else {configure_entry .menu9.config.f.x19 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x19 disabled {m}} else {configure_entry .menu9.config.f.x19 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x19 normal {m}} else {configure_entry .menu9.config.f.x19 disabled {m}}; configure_entry .menu9.config.f.x19 normal {n l}} else {configure_entry .menu9.config.f.x19 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_5
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_ISO8859_5 [sync_tristate $CONFIG_NLS_ISO8859_5 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x20 disabled {y}} else {configure_entry .menu9.config.f.x20 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x20 disabled {m}} else {configure_entry .menu9.config.f.x20 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x20 normal {m}} else {configure_entry .menu9.config.f.x20 disabled {m}}; configure_entry .menu9.config.f.x20 normal {n l}} else {configure_entry .menu9.config.f.x20 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_6
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_ISO8859_6 [sync_tristate $CONFIG_NLS_ISO8859_6 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x21 disabled {y}} else {configure_entry .menu9.config.f.x21 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x21 disabled {m}} else {configure_entry .menu9.config.f.x21 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x21 normal {m}} else {configure_entry .menu9.config.f.x21 disabled {m}}; configure_entry .menu9.config.f.x21 normal {n l}} else {configure_entry .menu9.config.f.x21 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_7
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_ISO8859_7 [sync_tristate $CONFIG_NLS_ISO8859_7 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x22 disabled {y}} else {configure_entry .menu9.config.f.x22 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x22 disabled {m}} else {configure_entry .menu9.config.f.x22 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x22 normal {m}} else {configure_entry .menu9.config.f.x22 disabled {m}}; configure_entry .menu9.config.f.x22 normal {n l}} else {configure_entry .menu9.config.f.x22 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_8
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_ISO8859_8 [sync_tristate $CONFIG_NLS_ISO8859_8 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x23 disabled {y}} else {configure_entry .menu9.config.f.x23 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x23 disabled {m}} else {configure_entry .menu9.config.f.x23 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x23 normal {m}} else {configure_entry .menu9.config.f.x23 disabled {m}}; configure_entry .menu9.config.f.x23 normal {n l}} else {configure_entry .menu9.config.f.x23 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_9
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_ISO8859_9 [sync_tristate $CONFIG_NLS_ISO8859_9 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x24 disabled {y}} else {configure_entry .menu9.config.f.x24 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x24 disabled {m}} else {configure_entry .menu9.config.f.x24 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x24 normal {m}} else {configure_entry .menu9.config.f.x24 disabled {m}}; configure_entry .menu9.config.f.x24 normal {n l}} else {configure_entry .menu9.config.f.x24 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_14
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_ISO8859_14 [sync_tristate $CONFIG_NLS_ISO8859_14 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x25 disabled {y}} else {configure_entry .menu9.config.f.x25 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x25 disabled {m}} else {configure_entry .menu9.config.f.x25 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x25 normal {m}} else {configure_entry .menu9.config.f.x25 disabled {m}}; configure_entry .menu9.config.f.x25 normal {n l}} else {configure_entry .menu9.config.f.x25 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_15
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_ISO8859_15 [sync_tristate $CONFIG_NLS_ISO8859_15 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x26 disabled {y}} else {configure_entry .menu9.config.f.x26 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x26 disabled {m}} else {configure_entry .menu9.config.f.x26 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x26 normal {m}} else {configure_entry .menu9.config.f.x26 disabled {m}}; configure_entry .menu9.config.f.x26 normal {n l}} else {configure_entry .menu9.config.f.x26 disabled {y n m l}}
	global CONFIG_NLS_KOI8_R
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]];set CONFIG_NLS_KOI8_R [sync_tristate $CONFIG_NLS_KOI8_R $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x27 disabled {y}} else {configure_entry .menu9.config.f.x27 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x27 disabled {m}} else {configure_entry .menu9.config.f.x27 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x27 normal {m}} else {configure_entry .menu9.config.f.x27 disabled {m}}; configure_entry .menu9.config.f.x27 normal {n l}} else {configure_entry .menu9.config.f.x27 disabled {y n m l}}
}


proc update_define_menu9 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_NLS
	global CONFIG_NLS_CODEPAGE_437
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_437 [sync_tristate $CONFIG_NLS_CODEPAGE_437 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_437 [expr $CONFIG_NLS_CODEPAGE_437&15]}
	global CONFIG_NLS_CODEPAGE_737
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_737 [sync_tristate $CONFIG_NLS_CODEPAGE_737 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_737 [expr $CONFIG_NLS_CODEPAGE_737&15]}
	global CONFIG_NLS_CODEPAGE_775
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_775 [sync_tristate $CONFIG_NLS_CODEPAGE_775 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_775 [expr $CONFIG_NLS_CODEPAGE_775&15]}
	global CONFIG_NLS_CODEPAGE_850
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_850 [sync_tristate $CONFIG_NLS_CODEPAGE_850 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_850 [expr $CONFIG_NLS_CODEPAGE_850&15]}
	global CONFIG_NLS_CODEPAGE_852
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_852 [sync_tristate $CONFIG_NLS_CODEPAGE_852 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_852 [expr $CONFIG_NLS_CODEPAGE_852&15]}
	global CONFIG_NLS_CODEPAGE_855
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_855 [sync_tristate $CONFIG_NLS_CODEPAGE_855 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_855 [expr $CONFIG_NLS_CODEPAGE_855&15]}
	global CONFIG_NLS_CODEPAGE_857
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_857 [sync_tristate $CONFIG_NLS_CODEPAGE_857 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_857 [expr $CONFIG_NLS_CODEPAGE_857&15]}
	global CONFIG_NLS_CODEPAGE_860
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_860 [sync_tristate $CONFIG_NLS_CODEPAGE_860 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_860 [expr $CONFIG_NLS_CODEPAGE_860&15]}
	global CONFIG_NLS_CODEPAGE_861
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_861 [sync_tristate $CONFIG_NLS_CODEPAGE_861 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_861 [expr $CONFIG_NLS_CODEPAGE_861&15]}
	global CONFIG_NLS_CODEPAGE_862
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_862 [sync_tristate $CONFIG_NLS_CODEPAGE_862 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_862 [expr $CONFIG_NLS_CODEPAGE_862&15]}
	global CONFIG_NLS_CODEPAGE_863
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_863 [sync_tristate $CONFIG_NLS_CODEPAGE_863 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_863 [expr $CONFIG_NLS_CODEPAGE_863&15]}
	global CONFIG_NLS_CODEPAGE_864
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_864 [sync_tristate $CONFIG_NLS_CODEPAGE_864 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_864 [expr $CONFIG_NLS_CODEPAGE_864&15]}
	global CONFIG_NLS_CODEPAGE_865
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_865 [sync_tristate $CONFIG_NLS_CODEPAGE_865 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_865 [expr $CONFIG_NLS_CODEPAGE_865&15]}
	global CONFIG_NLS_CODEPAGE_866
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_866 [sync_tristate $CONFIG_NLS_CODEPAGE_866 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_866 [expr $CONFIG_NLS_CODEPAGE_866&15]}
	global CONFIG_NLS_CODEPAGE_869
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_869 [sync_tristate $CONFIG_NLS_CODEPAGE_869 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_869 [expr $CONFIG_NLS_CODEPAGE_869&15]}
	global CONFIG_NLS_CODEPAGE_874
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_CODEPAGE_874 [sync_tristate $CONFIG_NLS_CODEPAGE_874 $tmpvar_dep]; set CONFIG_NLS_CODEPAGE_874 [expr $CONFIG_NLS_CODEPAGE_874&15]}
	global CONFIG_NLS_ISO8859_1
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_ISO8859_1 [sync_tristate $CONFIG_NLS_ISO8859_1 $tmpvar_dep]; set CONFIG_NLS_ISO8859_1 [expr $CONFIG_NLS_ISO8859_1&15]}
	global CONFIG_NLS_ISO8859_2
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_ISO8859_2 [sync_tristate $CONFIG_NLS_ISO8859_2 $tmpvar_dep]; set CONFIG_NLS_ISO8859_2 [expr $CONFIG_NLS_ISO8859_2&15]}
	global CONFIG_NLS_ISO8859_3
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_ISO8859_3 [sync_tristate $CONFIG_NLS_ISO8859_3 $tmpvar_dep]; set CONFIG_NLS_ISO8859_3 [expr $CONFIG_NLS_ISO8859_3&15]}
	global CONFIG_NLS_ISO8859_4
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_ISO8859_4 [sync_tristate $CONFIG_NLS_ISO8859_4 $tmpvar_dep]; set CONFIG_NLS_ISO8859_4 [expr $CONFIG_NLS_ISO8859_4&15]}
	global CONFIG_NLS_ISO8859_5
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_ISO8859_5 [sync_tristate $CONFIG_NLS_ISO8859_5 $tmpvar_dep]; set CONFIG_NLS_ISO8859_5 [expr $CONFIG_NLS_ISO8859_5&15]}
	global CONFIG_NLS_ISO8859_6
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_ISO8859_6 [sync_tristate $CONFIG_NLS_ISO8859_6 $tmpvar_dep]; set CONFIG_NLS_ISO8859_6 [expr $CONFIG_NLS_ISO8859_6&15]}
	global CONFIG_NLS_ISO8859_7
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_ISO8859_7 [sync_tristate $CONFIG_NLS_ISO8859_7 $tmpvar_dep]; set CONFIG_NLS_ISO8859_7 [expr $CONFIG_NLS_ISO8859_7&15]}
	global CONFIG_NLS_ISO8859_8
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_ISO8859_8 [sync_tristate $CONFIG_NLS_ISO8859_8 $tmpvar_dep]; set CONFIG_NLS_ISO8859_8 [expr $CONFIG_NLS_ISO8859_8&15]}
	global CONFIG_NLS_ISO8859_9
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_ISO8859_9 [sync_tristate $CONFIG_NLS_ISO8859_9 $tmpvar_dep]; set CONFIG_NLS_ISO8859_9 [expr $CONFIG_NLS_ISO8859_9&15]}
	global CONFIG_NLS_ISO8859_14
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_ISO8859_14 [sync_tristate $CONFIG_NLS_ISO8859_14 $tmpvar_dep]; set CONFIG_NLS_ISO8859_14 [expr $CONFIG_NLS_ISO8859_14&15]}
	global CONFIG_NLS_ISO8859_15
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_ISO8859_15 [sync_tristate $CONFIG_NLS_ISO8859_15 $tmpvar_dep]; set CONFIG_NLS_ISO8859_15 [expr $CONFIG_NLS_ISO8859_15&15]}
	global CONFIG_NLS_KOI8_R
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NLS]]; set CONFIG_NLS_KOI8_R [sync_tristate $CONFIG_NLS_KOI8_R $tmpvar_dep]; set CONFIG_NLS_KOI8_R [expr $CONFIG_NLS_KOI8_R&15]}
}


menu_option menu10 10 "Character devices"
proc menu10 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 10}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 10]]
	message $w.m -width 400 -aspect 300 -text \
		"Character devices"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Character devices" 

	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 10"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 10; menu11 .menu11 \"$title\""
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 10; menu9 .menu9 \"$title\""
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 10 0 "Support UART on MC68360 SMC" CONFIG_M68360_SMC_UART
	bool $w.config.f 10 1 "Support UART on MC68360 SCC" CONFIG_M68360_SCC_UART
	bool $w.config.f 10 2 "Support SIM Watchdog" CONFIG_M68360_SIM_WDT
	bool $w.config.f 10 3 "    Require user program to write 0x55 0xAA" CONFIG_M68360_SIM_WDT_55_AA
	bool $w.config.f 10 4 "68328 serial support" CONFIG_68328_SERIAL
	bool $w.config.f 10 5 "68328 digitizer support" CONFIG_68328_DIGI
	bool $w.config.f 10 6 "Support RTS/CTS on 68328 serial support" CONFIG_68328_SERIAL_RTS_CTS
	bool $w.config.f 10 7 "68328 serial support" CONFIG_68328_SERIAL
	bool $w.config.f 10 8 "68328 digitizer support" CONFIG_68328_DIGI
	bool $w.config.f 10 9 "Support RTS/CTS on 68328 serial support" CONFIG_68328_SERIAL_RTS_CTS
	bool $w.config.f 10 10 "68681 serial support" CONFIG_68681_SERIAL
	bool $w.config.f 10 11 "MAX311X serial support" CONFIG_MAX311X_SERIAL
	bool $w.config.f 10 12 "PWM audio support" CONFIG_PWM
	bool $w.config.f 10 13 "68332 serial support" CONFIG_68332_SERIAL
	bool $w.config.f 10 14 "68332 simple /dev/tpu dio support" CONFIG_68332_TPU
	bool $w.config.f 10 15 "68332 simple /dev/portf dio support" CONFIG_68332_PORTF
	bool $w.config.f 10 16 "68332 simple /dev/porte dio support" CONFIG_68332_PORTE
	bool $w.config.f 10 17 "68332 keyboard support" CONFIG_68332_KEYBOARD
	bool $w.config.f 10 18 "lc7981 graphical display support" CONFIG_LC7981
	bool $w.config.f 10 19 "68302 serial support" CONFIG_68302_SERIAL
	bool $w.config.f 10 20 "ColdFire serial support" CONFIG_COLDFIRE_SERIAL
	bool $w.config.f 10 21 "16550 serial support" CONFIG_SERIAL
	bool $w.config.f 10 22 "ColdFire MBUS Support" CONFIG_MCF_MBUS
	bool $w.config.f 10 23 "ColdFire QSPI Support" CONFIG_MCF_QSPI
	bool $w.config.f 10 24 "TEXT based LCD driver" CONFIG_LCDTXT
	bool $w.config.f 10 25 "Simple keypad driver" CONFIG_KEYPAD
	bool $w.config.f 10 26 "ColdFire DMA driven LCD driver" CONFIG_LCDDMA
	bool $w.config.f 10 27 "ColdFire DMA driven DAC0800 driver" CONFIG_DAC0800
	bool $w.config.f 10 28 "ColdFire DMA driven I2S DAC driver" CONFIG_DACI2S
	bool $w.config.f 10 29 "ColdFire T6963 driver" CONFIG_T6963
	bool $w.config.f 10 30 "   Use PIO mode" CONFIG_T6963_PIO
	bool $w.config.f 10 31 "LED Manager support" CONFIG_LEDMAN
	bool $w.config.f 10 32 "LIRC Interrupt Based Driver" CONFIG_LIRC_INTR
	tristate $w.config.f 10 33 "IDE test driver" CONFIG_IDETEST
	bool $w.config.f 10 34 "Reset switch support" CONFIG_RESETSWITCH
	bool $w.config.f 10 35 "DS1302 Real Time Clock driver" CONFIG_DS1302
	bool $w.config.f 10 36 "Expansion interface driver" CONFIG_EXP
	bool $w.config.f 10 37 "Watchdog Timer Support" CONFIG_WATCHDOG
	bool $w.config.f 10 38 "NEC uPD72001-11 MPSC serial support" CONFIG_72001_SERIAL
	bool $w.config.f 10 39 "FTDI FT245 serial support" CONFIG_FT245_SERIAL
	bool $w.config.f 10 40 "DS1743/DS1743P NVRAM/Clock support" CONFIG_DS1743



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu10 {} {
	global CONFIG_360QUICC
	global CONFIG_M68360_SMC_UART
	if {($CONFIG_360QUICC == 1)} then {
	configure_entry .menu10.config.f.x0 normal {n l y}} else {configure_entry .menu10.config.f.x0 disabled {y n l}}
	global CONFIG_M68360_SCC_UART
	if {($CONFIG_360QUICC == 1)} then {
	configure_entry .menu10.config.f.x1 normal {n l y}} else {configure_entry .menu10.config.f.x1 disabled {y n l}}
	global CONFIG_M68360_SIM_WDT
	if {($CONFIG_360QUICC == 1)} then {
	configure_entry .menu10.config.f.x2 normal {n l y}} else {configure_entry .menu10.config.f.x2 disabled {y n l}}
	global CONFIG_M68360_SIM_WDT_55_AA
	if {($CONFIG_360QUICC == 1) && ($CONFIG_M68360_SIM_WDT == 1)} then {
	configure_entry .menu10.config.f.x3 normal {n l y}} else {configure_entry .menu10.config.f.x3 disabled {y n l}}
	global CONFIG_M68328
	global CONFIG_68328_SERIAL
	if {($CONFIG_M68328 == 1)} then {
	configure_entry .menu10.config.f.x4 normal {n l y}} else {configure_entry .menu10.config.f.x4 disabled {y n l}}
	global CONFIG_68328_DIGI
	if {($CONFIG_M68328 == 1)} then {
	configure_entry .menu10.config.f.x5 normal {n l y}} else {configure_entry .menu10.config.f.x5 disabled {y n l}}
	global CONFIG_68328_SERIAL_RTS_CTS
	if {($CONFIG_M68328 == 1) && ($CONFIG_68328_SERIAL == 1)} then {
	configure_entry .menu10.config.f.x6 normal {n l y}} else {configure_entry .menu10.config.f.x6 disabled {y n l}}
	global CONFIG_M68EZ328
	if {($CONFIG_M68EZ328 == 1)} then {
	configure_entry .menu10.config.f.x7 normal {n l y}} else {configure_entry .menu10.config.f.x7 disabled {y n l}}
	if {($CONFIG_M68EZ328 == 1)} then {
	configure_entry .menu10.config.f.x8 normal {n l y}} else {configure_entry .menu10.config.f.x8 disabled {y n l}}
	if {($CONFIG_M68EZ328 == 1) && ($CONFIG_68328_SERIAL == 1)} then {
	configure_entry .menu10.config.f.x9 normal {n l y}} else {configure_entry .menu10.config.f.x9 disabled {y n l}}
	global CONFIG_M68EZ328ADS
	global CONFIG_68681_SERIAL
	if {($CONFIG_M68EZ328 == 1) && ($CONFIG_M68EZ328ADS == 1)} then {
	configure_entry .menu10.config.f.x10 normal {n l y}} else {configure_entry .menu10.config.f.x10 disabled {y n l}}
	global CONFIG_MAX311X_SERIAL
	if {($CONFIG_M68EZ328 == 1)} then {
	configure_entry .menu10.config.f.x11 normal {n l y}} else {configure_entry .menu10.config.f.x11 disabled {y n l}}
	global CONFIG_PWM
	if {($CONFIG_M68EZ328 == 1)} then {
	configure_entry .menu10.config.f.x12 normal {n l y}} else {configure_entry .menu10.config.f.x12 disabled {y n l}}
	global CONFIG_M68332
	global CONFIG_M68376
	global CONFIG_68332_SERIAL
	if {($CONFIG_M68332 == 1 || $CONFIG_M68376 == 1)} then {
	configure_entry .menu10.config.f.x13 normal {n l y}} else {configure_entry .menu10.config.f.x13 disabled {y n l}}
	global CONFIG_68332_TPU
	if {($CONFIG_M68332 == 1 || $CONFIG_M68376 == 1)} then {
	configure_entry .menu10.config.f.x14 normal {n l y}} else {configure_entry .menu10.config.f.x14 disabled {y n l}}
	global CONFIG_68332_PORTF
	if {($CONFIG_M68332 == 1 || $CONFIG_M68376 == 1)} then {
	configure_entry .menu10.config.f.x15 normal {n l y}} else {configure_entry .menu10.config.f.x15 disabled {y n l}}
	global CONFIG_68332_PORTE
	if {($CONFIG_M68332 == 1 || $CONFIG_M68376 == 1)} then {
	configure_entry .menu10.config.f.x16 normal {n l y}} else {configure_entry .menu10.config.f.x16 disabled {y n l}}
	global CONFIG_68332_KEYBOARD
	if {($CONFIG_M68332 == 1 || $CONFIG_M68376 == 1)} then {
	configure_entry .menu10.config.f.x17 normal {n l y}} else {configure_entry .menu10.config.f.x17 disabled {y n l}}
	global CONFIG_LC7981
	if {($CONFIG_M68332 == 1 || $CONFIG_M68376 == 1)} then {
	configure_entry .menu10.config.f.x18 normal {n l y}} else {configure_entry .menu10.config.f.x18 disabled {y n l}}
	global CONFIG_M68EN302
	global CONFIG_68302_SERIAL
	if {($CONFIG_M68EN302 == 1)} then {
	configure_entry .menu10.config.f.x19 normal {n l y}} else {configure_entry .menu10.config.f.x19 disabled {y n l}}
	global CONFIG_COLDFIRE
	global CONFIG_COLDFIRE_SERIAL
	if {($CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu10.config.f.x20 normal {n l y}} else {configure_entry .menu10.config.f.x20 disabled {y n l}}
	global CONFIG_SERIAL
	if {($CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu10.config.f.x21 normal {n l y}} else {configure_entry .menu10.config.f.x21 disabled {y n l}}
	global CONFIG_MCF_MBUS
	if {($CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu10.config.f.x22 normal {n l y}} else {configure_entry .menu10.config.f.x22 disabled {y n l}}
	global CONFIG_MCF_QSPI
	if {($CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu10.config.f.x23 normal {n l y}} else {configure_entry .menu10.config.f.x23 disabled {y n l}}
	global CONFIG_LCDTXT
	if {($CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu10.config.f.x24 normal {n l y}} else {configure_entry .menu10.config.f.x24 disabled {y n l}}
	global CONFIG_KEYPAD
	if {($CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu10.config.f.x25 normal {n l y}} else {configure_entry .menu10.config.f.x25 disabled {y n l}}
	global CONFIG_LCDDMA
	if {($CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu10.config.f.x26 normal {n l y}} else {configure_entry .menu10.config.f.x26 disabled {y n l}}
	global CONFIG_DAC0800
	if {($CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu10.config.f.x27 normal {n l y}} else {configure_entry .menu10.config.f.x27 disabled {y n l}}
	global CONFIG_DACI2S
	if {($CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu10.config.f.x28 normal {n l y}} else {configure_entry .menu10.config.f.x28 disabled {y n l}}
	global CONFIG_T6963
	if {($CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu10.config.f.x29 normal {n l y}} else {configure_entry .menu10.config.f.x29 disabled {y n l}}
	global CONFIG_T6963_PIO
	if {($CONFIG_COLDFIRE == 1) && ($CONFIG_T6963 == 1)} then {
	configure_entry .menu10.config.f.x30 normal {n l y}} else {configure_entry .menu10.config.f.x30 disabled {y n l}}
	global CONFIG_LEDMAN
	if {($CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu10.config.f.x31 normal {n l y}} else {configure_entry .menu10.config.f.x31 disabled {y n l}}
	global CONFIG_LIRC_INTR
	if {($CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu10.config.f.x32 normal {n l y}} else {configure_entry .menu10.config.f.x32 disabled {y n l}}
	global CONFIG_MODULES
	global CONFIG_IDETEST
	if {($CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu10.config.f.x33 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu10.config.f.x33 normal {m}} else {configure_entry .menu10.config.f.x33 disabled {m}}; configure_entry .menu10.config.f.x33 normal {n l}} else {configure_entry .menu10.config.f.x33 disabled {y n m l}}
	global CONFIG_RESETSWITCH
	if {($CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu10.config.f.x34 normal {n l y}} else {configure_entry .menu10.config.f.x34 disabled {y n l}}
	global CONFIG_DS1302
	if {($CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu10.config.f.x35 normal {n l y}} else {configure_entry .menu10.config.f.x35 disabled {y n l}}
	global CONFIG_EXP
	if {($CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu10.config.f.x36 normal {n l y}} else {configure_entry .menu10.config.f.x36 disabled {y n l}}
	global CONFIG_WATCHDOG
	if {($CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu10.config.f.x37 normal {n l y}} else {configure_entry .menu10.config.f.x37 disabled {y n l}}
	global CONFIG_M68000
	global CONFIG_72001_SERIAL
	if {($CONFIG_M68000 == 1)} then {
	configure_entry .menu10.config.f.x38 normal {n l y}} else {configure_entry .menu10.config.f.x38 disabled {y n l}}
	global CONFIG_FT245_SERIAL
	if {($CONFIG_M68000 == 1)} then {
	configure_entry .menu10.config.f.x39 normal {n l y}} else {configure_entry .menu10.config.f.x39 disabled {y n l}}
}


proc update_define_menu10 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_T6963_DMA
	global CONFIG_IDETEST
	global CONFIG_M68360_SMC_UART
set CONFIG_M68360_SMC_UART [expr $CONFIG_M68360_SMC_UART|16]
	global CONFIG_M68360_SCC_UART
set CONFIG_M68360_SCC_UART [expr $CONFIG_M68360_SCC_UART|16]
	global CONFIG_M68360_SIM_WDT
set CONFIG_M68360_SIM_WDT [expr $CONFIG_M68360_SIM_WDT|16]
	global CONFIG_M68360_SIM_WDT_55_AA
set CONFIG_M68360_SIM_WDT_55_AA [expr $CONFIG_M68360_SIM_WDT_55_AA|16]
	global CONFIG_68328_SERIAL
set CONFIG_68328_SERIAL [expr $CONFIG_68328_SERIAL|16]
	global CONFIG_68328_DIGI
set CONFIG_68328_DIGI [expr $CONFIG_68328_DIGI|16]
	global CONFIG_68328_SERIAL_RTS_CTS
set CONFIG_68328_SERIAL_RTS_CTS [expr $CONFIG_68328_SERIAL_RTS_CTS|16]
set CONFIG_68328_SERIAL [expr $CONFIG_68328_SERIAL|16]
set CONFIG_68328_DIGI [expr $CONFIG_68328_DIGI|16]
set CONFIG_68328_SERIAL_RTS_CTS [expr $CONFIG_68328_SERIAL_RTS_CTS|16]
	global CONFIG_68681_SERIAL
set CONFIG_68681_SERIAL [expr $CONFIG_68681_SERIAL|16]
	global CONFIG_MAX311X_SERIAL
set CONFIG_MAX311X_SERIAL [expr $CONFIG_MAX311X_SERIAL|16]
	global CONFIG_PWM
set CONFIG_PWM [expr $CONFIG_PWM|16]
	global CONFIG_68332_SERIAL
set CONFIG_68332_SERIAL [expr $CONFIG_68332_SERIAL|16]
	global CONFIG_68332_TPU
set CONFIG_68332_TPU [expr $CONFIG_68332_TPU|16]
	global CONFIG_68332_PORTF
set CONFIG_68332_PORTF [expr $CONFIG_68332_PORTF|16]
	global CONFIG_68332_PORTE
set CONFIG_68332_PORTE [expr $CONFIG_68332_PORTE|16]
	global CONFIG_68332_KEYBOARD
set CONFIG_68332_KEYBOARD [expr $CONFIG_68332_KEYBOARD|16]
	global CONFIG_LC7981
set CONFIG_LC7981 [expr $CONFIG_LC7981|16]
	global CONFIG_68302_SERIAL
set CONFIG_68302_SERIAL [expr $CONFIG_68302_SERIAL|16]
	global CONFIG_COLDFIRE_SERIAL
set CONFIG_COLDFIRE_SERIAL [expr $CONFIG_COLDFIRE_SERIAL|16]
	global CONFIG_SERIAL
set CONFIG_SERIAL [expr $CONFIG_SERIAL|16]
	global CONFIG_MCF_MBUS
set CONFIG_MCF_MBUS [expr $CONFIG_MCF_MBUS|16]
	global CONFIG_MCF_QSPI
set CONFIG_MCF_QSPI [expr $CONFIG_MCF_QSPI|16]
	global CONFIG_LCDTXT
set CONFIG_LCDTXT [expr $CONFIG_LCDTXT|16]
	global CONFIG_KEYPAD
set CONFIG_KEYPAD [expr $CONFIG_KEYPAD|16]
	global CONFIG_LCDDMA
set CONFIG_LCDDMA [expr $CONFIG_LCDDMA|16]
	global CONFIG_DAC0800
set CONFIG_DAC0800 [expr $CONFIG_DAC0800|16]
	global CONFIG_DACI2S
set CONFIG_DACI2S [expr $CONFIG_DACI2S|16]
	global CONFIG_T6963
set CONFIG_T6963 [expr $CONFIG_T6963|16]
	global CONFIG_T6963_PIO
set CONFIG_T6963_PIO [expr $CONFIG_T6963_PIO|16]
	global CONFIG_LEDMAN
set CONFIG_LEDMAN [expr $CONFIG_LEDMAN|16]
	global CONFIG_LIRC_INTR
set CONFIG_LIRC_INTR [expr $CONFIG_LIRC_INTR|16]
set CONFIG_IDETEST [expr $CONFIG_IDETEST|16]
	global CONFIG_RESETSWITCH
set CONFIG_RESETSWITCH [expr $CONFIG_RESETSWITCH|16]
	global CONFIG_DS1302
set CONFIG_DS1302 [expr $CONFIG_DS1302|16]
	global CONFIG_EXP
set CONFIG_EXP [expr $CONFIG_EXP|16]
	global CONFIG_WATCHDOG
set CONFIG_WATCHDOG [expr $CONFIG_WATCHDOG|16]
	global CONFIG_72001_SERIAL
set CONFIG_72001_SERIAL [expr $CONFIG_72001_SERIAL|16]
	global CONFIG_FT245_SERIAL
set CONFIG_FT245_SERIAL [expr $CONFIG_FT245_SERIAL|16]
	global CONFIG_360QUICC
	if {($CONFIG_360QUICC == 1)} then {
	set CONFIG_M68360_SMC_UART [expr $CONFIG_M68360_SMC_UART&15]}
	if {($CONFIG_360QUICC == 1)} then {
	set CONFIG_M68360_SCC_UART [expr $CONFIG_M68360_SCC_UART&15]}
	if {($CONFIG_360QUICC == 1)} then {
	set CONFIG_M68360_SIM_WDT [expr $CONFIG_M68360_SIM_WDT&15]}
	if {($CONFIG_360QUICC == 1) && ($CONFIG_M68360_SIM_WDT == 1)} then {
	set CONFIG_M68360_SIM_WDT_55_AA [expr $CONFIG_M68360_SIM_WDT_55_AA&15]}
	global CONFIG_M68328
	if {($CONFIG_M68328 == 1)} then {
	set CONFIG_68328_SERIAL [expr $CONFIG_68328_SERIAL&15]}
	if {($CONFIG_M68328 == 1)} then {
	set CONFIG_68328_DIGI [expr $CONFIG_68328_DIGI&15]}
	if {($CONFIG_M68328 == 1) && ($CONFIG_68328_SERIAL == 1)} then {
	set CONFIG_68328_SERIAL_RTS_CTS [expr $CONFIG_68328_SERIAL_RTS_CTS&15]}
	global CONFIG_M68EZ328
	if {($CONFIG_M68EZ328 == 1)} then {
	set CONFIG_68328_SERIAL [expr $CONFIG_68328_SERIAL&15]}
	if {($CONFIG_M68EZ328 == 1)} then {
	set CONFIG_68328_DIGI [expr $CONFIG_68328_DIGI&15]}
	if {($CONFIG_M68EZ328 == 1) && ($CONFIG_68328_SERIAL == 1)} then {
	set CONFIG_68328_SERIAL_RTS_CTS [expr $CONFIG_68328_SERIAL_RTS_CTS&15]}
	global CONFIG_M68EZ328ADS
	if {($CONFIG_M68EZ328 == 1) && ($CONFIG_M68EZ328ADS == 1)} then {
	set CONFIG_68681_SERIAL [expr $CONFIG_68681_SERIAL&15]}
	if {($CONFIG_M68EZ328 == 1)} then {
	set CONFIG_MAX311X_SERIAL [expr $CONFIG_MAX311X_SERIAL&15]}
	if {($CONFIG_M68EZ328 == 1)} then {
	set CONFIG_PWM [expr $CONFIG_PWM&15]}
	global CONFIG_M68332
	global CONFIG_M68376
	if {($CONFIG_M68332 == 1 || $CONFIG_M68376 == 1)} then {
	set CONFIG_68332_SERIAL [expr $CONFIG_68332_SERIAL&15]}
	if {($CONFIG_M68332 == 1 || $CONFIG_M68376 == 1)} then {
	set CONFIG_68332_TPU [expr $CONFIG_68332_TPU&15]}
	if {($CONFIG_M68332 == 1 || $CONFIG_M68376 == 1)} then {
	set CONFIG_68332_PORTF [expr $CONFIG_68332_PORTF&15]}
	if {($CONFIG_M68332 == 1 || $CONFIG_M68376 == 1)} then {
	set CONFIG_68332_PORTE [expr $CONFIG_68332_PORTE&15]}
	if {($CONFIG_M68332 == 1 || $CONFIG_M68376 == 1)} then {
	set CONFIG_68332_KEYBOARD [expr $CONFIG_68332_KEYBOARD&15]}
	if {($CONFIG_M68332 == 1 || $CONFIG_M68376 == 1)} then {
	set CONFIG_LC7981 [expr $CONFIG_LC7981&15]}
	global CONFIG_M68EN302
	if {($CONFIG_M68EN302 == 1)} then {
	set CONFIG_68302_SERIAL [expr $CONFIG_68302_SERIAL&15]}
	global CONFIG_COLDFIRE
	if {($CONFIG_COLDFIRE == 1)} then {
	set CONFIG_COLDFIRE_SERIAL [expr $CONFIG_COLDFIRE_SERIAL&15]}
	if {($CONFIG_COLDFIRE == 1)} then {
	set CONFIG_SERIAL [expr $CONFIG_SERIAL&15]}
	if {($CONFIG_COLDFIRE == 1)} then {
	set CONFIG_MCF_MBUS [expr $CONFIG_MCF_MBUS&15]}
	if {($CONFIG_COLDFIRE == 1)} then {
	set CONFIG_MCF_QSPI [expr $CONFIG_MCF_QSPI&15]}
	if {($CONFIG_COLDFIRE == 1)} then {
	set CONFIG_LCDTXT [expr $CONFIG_LCDTXT&15]}
	if {($CONFIG_COLDFIRE == 1)} then {
	set CONFIG_KEYPAD [expr $CONFIG_KEYPAD&15]}
	if {($CONFIG_COLDFIRE == 1)} then {
	set CONFIG_LCDDMA [expr $CONFIG_LCDDMA&15]}
	if {($CONFIG_COLDFIRE == 1)} then {
	set CONFIG_DAC0800 [expr $CONFIG_DAC0800&15]}
	if {($CONFIG_COLDFIRE == 1)} then {
	set CONFIG_DACI2S [expr $CONFIG_DACI2S&15]}
	if {($CONFIG_COLDFIRE == 1)} then {
	set CONFIG_T6963 [expr $CONFIG_T6963&15]}
	if {($CONFIG_COLDFIRE == 1) && ($CONFIG_T6963 == 1)} then {
	set CONFIG_T6963_PIO [expr $CONFIG_T6963_PIO&15]}
	if {($CONFIG_COLDFIRE == 1) && ($CONFIG_T6963 == 1) && ($CONFIG_T6963_PIO != 1)} then {	global CONSTANT_Y
set CONFIG_T6963_DMA $CONSTANT_Y }
	if {($CONFIG_COLDFIRE == 1)} then {
	set CONFIG_LEDMAN [expr $CONFIG_LEDMAN&15]}
	if {($CONFIG_COLDFIRE == 1)} then {
	set CONFIG_LIRC_INTR [expr $CONFIG_LIRC_INTR&15]}
	if {($CONFIG_COLDFIRE == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_IDETEST == 2)} then {set CONFIG_IDETEST 1}; set CONFIG_IDETEST [expr $CONFIG_IDETEST&15]}
	if {($CONFIG_COLDFIRE == 1)} then {
	set CONFIG_RESETSWITCH [expr $CONFIG_RESETSWITCH&15]}
	if {($CONFIG_COLDFIRE == 1)} then {
	set CONFIG_DS1302 [expr $CONFIG_DS1302&15]}
	if {($CONFIG_COLDFIRE == 1)} then {
	set CONFIG_EXP [expr $CONFIG_EXP&15]}
	if {($CONFIG_COLDFIRE == 1)} then {
	set CONFIG_WATCHDOG [expr $CONFIG_WATCHDOG&15]}
	global CONFIG_M68000
	if {($CONFIG_M68000 == 1)} then {
	set CONFIG_72001_SERIAL [expr $CONFIG_72001_SERIAL&15]}
	if {($CONFIG_M68000 == 1)} then {
	set CONFIG_FT245_SERIAL [expr $CONFIG_FT245_SERIAL&15]}
}


menu_option menu11 11 "Sound support"
proc menu11 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 11}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 11]]
	message $w.m -width 400 -aspect 300 -text \
		"Sound support"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Sound support" 

	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 11"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 11; menu12 .menu12 \"$title\""
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 11; menu10 .menu10 \"$title\""
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	tristate $w.config.f 11 0 "M5249 audio system support" CONFIG_M5249AUDIO



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu11 {} {
	global CONFIG_M5249AUDIO
	global CONFIG_MODULES

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu11.config.f.x0 normal {m}} else {configure_entry .menu11.config.f.x0 disabled {m}}
}


proc update_define_menu11 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_M5249AUDIO

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_M5249AUDIO == 2)} then {set CONFIG_M5249AUDIO 1}}
}


menu_option menu12 12 "Kernel hacking"
proc menu12 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 12}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 12]]
	message $w.m -width 400 -aspect 300 -text \
		"Kernel hacking"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Kernel hacking" 

	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 12"
	button $w.f.next -text "Next" \
		-width 15 -command "catch {focus $oldFocus}; menu13 .menu13 \"$title\""
	$w.f.next configure -state disabled
	button $w.f.prev -text "Prev" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 12; menu11 .menu11 \"$title\""
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 12 0 "Full Symbolic/Source Debugging support" CONFIG_FULLDEBUG
	bool $w.config.f 12 1 "Less wasteful kmalloc.c/page_alloc.c (EXPERIMENTAL)" CONFIG_ALLOC2
	bool $w.config.f 12 2 "Kernel profiling support" CONFIG_PROFILE
	int $w.config.f 12 3 " Profile shift count" CONFIG_PROFILE_SHIFT
	bool $w.config.f 12 4 "Use fast second timer for profiling" CONFIG_HIGHPROFILE
	bool $w.config.f 12 5 "Magic SysRq Key" CONFIG_MAGIC_SYSRQ
	bool $w.config.f 12 6 "Panic/Dump to FLASH" CONFIG_DUMPTOFLASH
	bool $w.config.f 12 7 "Kernel Memory Protection" CONFIG_MEMORY_PROTECT
	bool $w.config.f 12 8 "Disable BDM signals" CONFIG_BDM_DISABLE



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
	update idletasks
	$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
	}
	update idletasks
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}


proc update_menu12 {} {
	global CONFIG_EXPERIMENTAL
	global CONFIG_ALLOC2
	if {($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu12.config.f.x1 normal {n l y}} else {configure_entry .menu12.config.f.x1 disabled {y n l}}
	global CONFIG_PROFILE
	global CONFIG_PROFILE_SHIFT
	if {($CONFIG_PROFILE == 1)} then {.menu12.config.f.x3.x configure -state normal -foreground [ cget .ref -foreground ]; .menu12.config.f.x3.l configure -state normal; } else {.menu12.config.f.x3.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu12.config.f.x3.l configure -state disabled}
	global CONFIG_HIGHPROFILE
	if {($CONFIG_PROFILE == 1)} then {
	configure_entry .menu12.config.f.x4 normal {n l y}} else {configure_entry .menu12.config.f.x4 disabled {y n l}}
	global CONFIG_COLDFIRE
	global CONFIG_MAGIC_SYSRQ
	if {($CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu12.config.f.x5 normal {n l y}} else {configure_entry .menu12.config.f.x5 disabled {y n l}}
	global CONFIG_DUMPTOFLASH
	if {($CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu12.config.f.x6 normal {n l y}} else {configure_entry .menu12.config.f.x6 disabled {y n l}}
	global CONFIG_MEMORY_PROTECT
	if {($CONFIG_EXPERIMENTAL == 1 && $CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu12.config.f.x7 normal {n l y}} else {configure_entry .menu12.config.f.x7 disabled {y n l}}
	global CONFIG_BDM_DISABLE
	if {($CONFIG_EXPERIMENTAL == 1 && $CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu12.config.f.x8 normal {n l y}} else {configure_entry .menu12.config.f.x8 disabled {y n l}}
}


proc update_define_menu12 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_ALLOC2
set CONFIG_ALLOC2 [expr $CONFIG_ALLOC2|16]
	global CONFIG_HIGHPROFILE
set CONFIG_HIGHPROFILE [expr $CONFIG_HIGHPROFILE|16]
	global CONFIG_MAGIC_SYSRQ
set CONFIG_MAGIC_SYSRQ [expr $CONFIG_MAGIC_SYSRQ|16]
	global CONFIG_DUMPTOFLASH
set CONFIG_DUMPTOFLASH [expr $CONFIG_DUMPTOFLASH|16]
	global CONFIG_MEMORY_PROTECT
set CONFIG_MEMORY_PROTECT [expr $CONFIG_MEMORY_PROTECT|16]
	global CONFIG_BDM_DISABLE
set CONFIG_BDM_DISABLE [expr $CONFIG_BDM_DISABLE|16]
	global CONFIG_EXPERIMENTAL
	if {($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_ALLOC2 [expr $CONFIG_ALLOC2&15]}
	global CONFIG_PROFILE
	global CONFIG_PROFILE_SHIFT
	if {($CONFIG_PROFILE == 1)} then {validate_int CONFIG_PROFILE_SHIFT "$CONFIG_PROFILE_SHIFT" 2}
	if {($CONFIG_PROFILE == 1)} then {
	set CONFIG_HIGHPROFILE [expr $CONFIG_HIGHPROFILE&15]}
	global CONFIG_COLDFIRE
	if {($CONFIG_COLDFIRE == 1)} then {
	set CONFIG_MAGIC_SYSRQ [expr $CONFIG_MAGIC_SYSRQ&15]}
	if {($CONFIG_COLDFIRE == 1)} then {
	set CONFIG_DUMPTOFLASH [expr $CONFIG_DUMPTOFLASH&15]}
	if {($CONFIG_EXPERIMENTAL == 1 && $CONFIG_COLDFIRE == 1)} then {
	set CONFIG_MEMORY_PROTECT [expr $CONFIG_MEMORY_PROTECT&15]}
	if {($CONFIG_EXPERIMENTAL == 1 && $CONFIG_COLDFIRE == 1)} then {
	set CONFIG_BDM_DISABLE [expr $CONFIG_BDM_DISABLE&15]}
}


proc update_mainmenu {}  {
	global CONFIG_NET
	if {($CONFIG_NET == 1)} then {.f0.x6 configure -state normal } else { .f0.x6 configure -state disabled }
	if {($CONFIG_NET == 1)} then {.f0.x7 configure -state normal } else { .f0.x7 configure -state disabled }
}


set CONFIG_EXPERIMENTAL 0
set CONFIG_MODULES 0
set CONFIG_MODVERSIONS 0
set CONFIG_KERNELD 0
set tmpvar_0 "(not set)"
set CONFIG_M68000 0
set CONFIG_M68EN302 0
set CONFIG_M68328 0
set CONFIG_M68EZ328 0
set CONFIG_M68332 0
set CONFIG_M68360 0
set CONFIG_M68376 0
set CONFIG_M5204 0
set CONFIG_M5206 0
set CONFIG_M5206e 0
set CONFIG_M5249 0
set CONFIG_M5272 0
set CONFIG_M5307 0
set CONFIG_M5407 0
set tmpvar_1 "(not set)"
set CONFIG_CLOCK_AUTO 0
set CONFIG_CLOCK_11MHz 0
set CONFIG_CLOCK_16MHz 0
set CONFIG_CLOCK_20MHz 0
set CONFIG_CLOCK_24MHz 0
set CONFIG_CLOCK_25MHz 0
set CONFIG_CLOCK_33MHz 0
set CONFIG_CLOCK_40MHz 0
set CONFIG_CLOCK_45MHz 0
set CONFIG_CLOCK_48MHz 0
set CONFIG_CLOCK_50MHz 0
set CONFIG_CLOCK_54MHz 0
set CONFIG_CLOCK_60MHz 0
set CONFIG_CLOCK_64MHz 0
set CONFIG_CLOCK_66MHz 0
set CONFIG_CLOCK_70MHz 0
set CONFIG_CLOCK_140MHz 0
set CONFIG_OLDMASK 0
set CONFIG_PILOT3 0
set CONFIG_XCOPILOT_BUGS 0
set CONFIG_M68EZ328ADS 0
set CONFIG_ALMA_ANS 0
set CONFIG_UCSIMM 0
set CONFIG_CWEZ328 0
set CONFIG_PILOT5 0
set CONFIG_APLIO_PRO 0
set CONFIG_APLIO_ENTRECOTE 0
set tmpvar_2 "(not set)"
set CONFIG_SHGLCORE 0
set CONFIG_MWI 0
set CONFIG_SHGLCORE_2MEG 0
set CONFIG_ROMFS_FROM_ROM 0
set CONFIG_UCQUICC 0
set CONFIG_SED_SIOS 0
set tmpvar_3 "(not set)"
set CONFIG_SED_SIOS_MASTER 0
set CONFIG_SED_SIOS_REMOTE 0
set CONFIG_SED_MCU_STATUS_LED 0
set CONFIG_FR1000 0
set CONFIG_ARN5206 0
set CONFIG_M5206eC3 0
set CONFIG_ELITE 0
set CONFIG_SMALL 0
set CONFIG_TELOS 0
set CONFIG_CFV240 0
set CONFIG_M5249C3 0
set CONFIG_M5272C3 0
set CONFIG_COBRA5272 0
set CONFIG_BOOTPARAM 0
set CONFIG_BOOTPARAM_ "(null)"
set CONFIG_CANCam 0
set CONFIG_SCALES 0
set CONFIG_ARN5307 0
set CONFIG_M5307C3 0
set CONFIG_eLIA 0
set CONFIG_DISKtel 0
set CONFIG_SECUREEDGEMP3 0
set CONFIG_M5407C3 0
set CONFIG_CLEOPATRA 0
set CONFIG_NETtel 0
set CONFIG_SNAPGEAR 0
set CONFIG_SM2010 0
set CONFIG_68KATY 0
set CONFIG_MAC_PLUS 0
set tmpvar_4 "(not set)"
set CONFIG_RAMAUTO 0
set CONFIG_RAM05MB 0
set CONFIG_RAM1MB 0
set CONFIG_RAM2MB 0
set CONFIG_RAM4MB 0
set CONFIG_RAM8MB 0
set CONFIG_RAM16MB 0
set CONFIG_RAM32MB 0
set CONFIG_RAM64MB 0
set tmpvar_5 "(not set)"
set CONFIG_AUTOBIT 0
set CONFIG_RAM8BIT 0
set CONFIG_RAM16BIT 0
set CONFIG_RAM32bit 0
set tmpvar_6 "(not set)"
set CONFIG_RAMKERNEL 0
set CONFIG_ROMKERNEL 0
set CONFIG_PCI 0
set CONFIG_PCIDEVLIST 0
set CONFIG_NET 0
set CONFIG_SYSVIPC 0
set CONFIG_REDUCED_MEMORY 0
set CONFIG_BINFMT_FLAT 0
set CONFIG_BINFMT_ZFLAT 0
set CONFIG_KERNEL_ELF 0
set CONFIG_PILOT_MEMORY_DISPLAY 0
set CONFIG_CONSOLE 0
set CONFIG_FRAMEBUFFER 0
set CONFIG_PILOT_CONSOLE 0
set CONFIG_BLK_DEV_BLKMEM 0
set tmpvar_7 "(not set)"
set CONFIG_NOFLASH 0
set CONFIG_AMDFLASH 0
set CONFIG_INTELFLASH 0
set tmpvar_8 "(not set)"
set CONFIG_FLASHAUTO 0
set CONFIG_FLASH128KB 0
set CONFIG_FLASH512KB 0
set CONFIG_FLASH1MB 0
set CONFIG_FLASH2MB 0
set CONFIG_FLASH4MB 0
set CONFIG_FLASH6MB 0
set CONFIG_FLASH8MB 0
set CONFIG_FLASH16MB 0
set tmpvar_9 "(not set)"
set CONFIG_FLASHAUTOBIT 0
set CONFIG_FLASH8BIT 0
set CONFIG_FLASH16BIT 0
set CONFIG_FLASH32bit 0
set CONFIG_EXTRA_FLASH1MB 0
set CONFIG_FLASH_SNAPGEAR 0
set CONFIG_BLK_DEV_IDE 0
set CONFIG_BLK_DEV_IDECD 0
set CONFIG_BLK_DEV_IDETAPE 0
set CONFIG_BLK_DEV_IDEFLOPPY 0
set CONFIG_BLK_DEV_LOOP 0
set CONFIG_BLK_DEV_MD 0
set CONFIG_MD_LINEAR 0
set CONFIG_MD_STRIPED 0
set CONFIG_BLK_DEV_RAM 0
set CONFIG_RD_RELEASE_BLOCKS 0
set CONFIG_BLK_DEV_INITRD 0
set CONFIG_DEV_FLASH 0
set CONFIG_BLK_DEV_FLASH 0
set CONFIG_CHR_DEV_FLASH 0
set CONFIG_BLK_DEV_NFA 0
set CONFIG_FIREWALL 0
set CONFIG_NET_ALIAS 0
set CONFIG_INET 0
set CONFIG_IP_FORWARD 0
set CONFIG_IP_MULTICAST 0
set CONFIG_SYN_COOKIES 0
set CONFIG_IP_FIREWALL 0
set CONFIG_IP_FIREWALL_VERBOSE 0
set CONFIG_IP_MASQUERADE 0
set CONFIG_IP_MASQUERADE_IPAUTOFW 0
set CONFIG_IP_MASQUERADE_IPPORTFW 0
set CONFIG_IP_MASQUERADE_PPTP 0
set CONFIG_IP_MASQUERADE_PPTP_MULTICLIENT 0
set DEBUG_IP_MASQUERADE_PPTP 0
set DEBUG_IP_MASQUERADE_PPTP_VERBOSE 0
set CONFIG_IP_MASQUERADE_IPSEC 0
set CONFIG_IP_MASQUERADE_IPSEC_EXPIRE 30
set CONFIG_IP_MASQUERADE_IPSEC_NOGUESS 0
set DEBUG_IP_MASQUERADE_IPSEC 0
set DEBUG_IP_MASQUERADE_IPSEC_VERBOSE 0
set CONFIG_IP_MASQUERADE_ICMP 0
set CONFIG_IP_TRANSPARENT_PROXY 0
set CONFIG_IP_ALWAYS_DEFRAG 0
set CONFIG_IP_ACCT 0
set CONFIG_IP_ROUTER 0
set CONFIG_NET_IPIP 0
set CONFIG_IP_MROUTE 0
set CONFIG_IP_ALIAS 0
set CONFIG_ARPD 0
set CONFIG_INET_PCTCP 0
set CONFIG_INET_RARP 0
set CONFIG_NO_PATH_MTU_DISCOVERY 0
set CONFIG_IP_NOSR 0
set CONFIG_SKB_LARGE 0
set CONFIG_IPX 0
set CONFIG_ATALK 0
set CONFIG_AX25 0
set CONFIG_NETROM 0
set CONFIG_ROSE 0
set CONFIG_BRIDGE 0
set CONFIG_NETLINK 0
set CONFIG_RTNETLINK 0
set CONFIG_IPSEC 0
set CONFIG_IPSEC_IPIP 0
set CONFIG_IPSEC_AH 0
set CONFIG_IPSEC_AUTH_HMAC_MD5 0
set CONFIG_IPSEC_AUTH_HMAC_SHA1 0
set CONFIG_IPSEC_ESP 0
set CONFIG_IPSEC_ENC_DES 0
set CONFIG_IPSEC_ENC_3DES 0
set CONFIG_IPSEC_IPCOMP 0
set CONFIG_IPSEC_IPCOMP_LZS 0
set CONFIG_IPSEC_DEBUG 0
set CONFIG_IPSEC_NAT_TRAVERSAL 0
set CONFIG_NETDEVICES 0
set CONFIG_DUMMY 0
set CONFIG_SLIP 0
set CONFIG_SLIP_COMPRESSED 0
set CONFIG_SLIP_SMART 0
set CONFIG_SLIP_MODE_SLIP6 0
set CONFIG_PPP 0
set CONFIG_EQUALIZER 0
set CONFIG_UCCS8900 0
set CONFIG_UCCS8900_HW_SWAP 0
set CS8900_BASE 0x10200300
set CONFIG_SMC9194 0
set CONFIG_SMC91111 0
set CONFIG_NE2000 0
set CONFIG_FEC 0
set CONFIG_NE2K_PCI 0
set CONFIG_DEC_ELCP 0
set CONFIG_M68EN302_ETHERNET 0
set CONFIG_QUOTA 0
set CONFIG_MINIX_FS 0
set CONFIG_EXT_FS 0
set CONFIG_EXT2_FS 0
set CONFIG_XIA_FS 0
set CONFIG_NLS 0
set CONFIG_ISO9660_FS 0
set CONFIG_FAT_FS 0
set CONFIG_MSDOS_FS 0
set CONFIG_UMSDOS_FS 0
set CONFIG_VFAT_FS 0
set CONFIG_NLS_CODEPAGE_437 0
set CONFIG_NLS_CODEPAGE_737 0
set CONFIG_NLS_CODEPAGE_775 0
set CONFIG_NLS_CODEPAGE_850 0
set CONFIG_NLS_CODEPAGE_852 0
set CONFIG_NLS_CODEPAGE_855 0
set CONFIG_NLS_CODEPAGE_857 0
set CONFIG_NLS_CODEPAGE_860 0
set CONFIG_NLS_CODEPAGE_861 0
set CONFIG_NLS_CODEPAGE_862 0
set CONFIG_NLS_CODEPAGE_863 0
set CONFIG_NLS_CODEPAGE_864 0
set CONFIG_NLS_CODEPAGE_865 0
set CONFIG_NLS_CODEPAGE_866 0
set CONFIG_NLS_CODEPAGE_869 0
set CONFIG_NLS_CODEPAGE_874 0
set CONFIG_NLS_ISO8859_1 0
set CONFIG_NLS_ISO8859_2 0
set CONFIG_NLS_ISO8859_3 0
set CONFIG_NLS_ISO8859_4 0
set CONFIG_NLS_ISO8859_5 0
set CONFIG_NLS_ISO8859_6 0
set CONFIG_NLS_ISO8859_7 0
set CONFIG_NLS_ISO8859_8 0
set CONFIG_NLS_ISO8859_9 0
set CONFIG_NLS_ISO8859_14 0
set CONFIG_NLS_ISO8859_15 0
set CONFIG_NLS_KOI8_R 0
set CONFIG_PROC_FS 0
set CONFIG_NFS_FS 0
set CONFIG_ROOT_NFS 0
set CONFIG_RNFS_BOOTP 0
set CONFIG_RNFS_RARP 0
set CONFIG_SMB_FS 0
set CONFIG_SMB_WIN95 0
set CONFIG_NCP_FS 0
set CONFIG_NCPFS_PACKET_SIGNING 0
set CONFIG_NCPFS_IOCTL_LOCKING 0
set CONFIG_NCPFS_STRONG 0
set CONFIG_NCPFS_NFS_NS 0
set CONFIG_NCPFS_OS2_NS 0
set CONFIG_NCPFS_MOUNT_SUBDIR 0
set CONFIG_HPFS_FS 0
set CONFIG_SYSV_FS 0
set CONFIG_AUTOFS_FS 0
set CONFIG_AFFS_FS 0
set CONFIG_ROMFS_FS 0
set CONFIG_JFFS_FS 0
set CONFIG_UFS_FS 0
set CONFIG_BSD_DISKLABEL 0
set CONFIG_SMD_DISKLABEL 0
set CONFIG_M68360_SMC_UART 0
set CONFIG_M68360_SCC_UART 0
set CONFIG_M68360_SIM_WDT 0
set CONFIG_M68360_SIM_WDT_55_AA 0
set CONFIG_68328_SERIAL 0
set CONFIG_68328_DIGI 0
set CONFIG_68328_SERIAL_RTS_CTS 0
set CONFIG_68681_SERIAL 0
set CONFIG_MAX311X_SERIAL 0
set CONFIG_PWM 0
set CONFIG_68332_SERIAL 0
set CONFIG_68332_TPU 0
set CONFIG_68332_PORTF 0
set CONFIG_68332_PORTE 0
set CONFIG_68332_KEYBOARD 0
set CONFIG_LC7981 0
set CONFIG_68302_SERIAL 0
set CONFIG_COLDFIRE_SERIAL 0
set CONFIG_SERIAL 0
set CONFIG_MCF_MBUS 0
set CONFIG_MCF_QSPI 0
set CONFIG_LCDTXT 0
set CONFIG_KEYPAD 0
set CONFIG_LCDDMA 0
set CONFIG_DAC0800 0
set CONFIG_DACI2S 0
set CONFIG_T6963 0
set CONFIG_T6963_PIO 0
set CONFIG_LEDMAN 0
set CONFIG_LIRC_INTR 0
set CONFIG_IDETEST 0
set CONFIG_RESETSWITCH 0
set CONFIG_DS1302 0
set CONFIG_EXP 0
set CONFIG_WATCHDOG 0
set CONFIG_72001_SERIAL 0
set CONFIG_FT245_SERIAL 0
set CONFIG_DS1743 0
set CONFIG_M5249AUDIO 0
set CONFIG_FULLDEBUG 0
set CONFIG_ALLOC2 0
set CONFIG_PROFILE 0
set CONFIG_PROFILE_SHIFT 2
set CONFIG_HIGHPROFILE 0
set CONFIG_MAGIC_SYSRQ 0
set CONFIG_DUMPTOFLASH 0
set CONFIG_MEMORY_PROTECT 0
set CONFIG_BDM_DISABLE 0
set CONFIG_UCLINUX 4
set CONFIG_COLDFIRE 4
set CONFIG_360QUICC 4
set CONFIG_CPU32 4
set CONFIG_PILOT 4
set CONFIG_APLIO 4
set CONFIG_ARNEWSH 4
set CONFIG_MOTOROLA 4
set CONFIG_HW_FEITH 4
set CONFIG_IPSEC_ALG 4
set CONFIG_IPSEC_ALG_AES 4
set CONFIG_AMIGA_PARTITION 4
set CONFIG_T6963_DMA 4
proc writeconfig {file1 file2} {
	set cfg [open $file1 w]
	set autocfg [open $file2 w]
	set notmod 1
	set notset 0
	puts $cfg "#"
	puts $cfg "# Automatically generated make config: don't edit"
	puts $cfg "#"
	puts $autocfg "/*"
	puts $autocfg " * Automatically generated C config: don't edit"
	puts $autocfg " */"
	puts $autocfg "#define AUTOCONF_INCLUDED"
	global CONFIG_UCLINUX
	global CONSTANT_Y
	write_tristate $cfg $autocfg CONFIG_UCLINUX $CONFIG_UCLINUX [list $notmod] 2
	write_comment $cfg $autocfg "Code maturity level options"
	global CONFIG_EXPERIMENTAL
	write_tristate $cfg $autocfg CONFIG_EXPERIMENTAL $CONFIG_EXPERIMENTAL [list $notmod] 2
	write_comment $cfg $autocfg "Loadable module support"
	global CONFIG_MODULES
	write_tristate $cfg $autocfg CONFIG_MODULES $CONFIG_MODULES [list $notmod] 2
	global CONFIG_MODVERSIONS
	if {($CONFIG_MODULES == 1)} then {write_tristate $cfg $autocfg CONFIG_MODVERSIONS $CONFIG_MODVERSIONS [list $notmod] 2 }
	global CONFIG_KERNELD
	if {($CONFIG_MODULES == 1)} then {write_tristate $cfg $autocfg CONFIG_KERNELD $CONFIG_KERNELD [list $notmod] 2 }
	write_comment $cfg $autocfg "Platform dependant setup"
	global tmpvar_0
	
	if { $tmpvar_0 == "MC68000" } then { write_tristate $cfg $autocfg CONFIG_M68000 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_M68000 0 [list $notmod] 2 }
	if { $tmpvar_0 == "MC68EN302" } then { write_tristate $cfg $autocfg CONFIG_M68EN302 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_M68EN302 0 [list $notmod] 2 }
	if { $tmpvar_0 == "MC68328" } then { write_tristate $cfg $autocfg CONFIG_M68328 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_M68328 0 [list $notmod] 2 }
	if { $tmpvar_0 == "MC68EZ328" } then { write_tristate $cfg $autocfg CONFIG_M68EZ328 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_M68EZ328 0 [list $notmod] 2 }
	if { $tmpvar_0 == "MC68332" } then { write_tristate $cfg $autocfg CONFIG_M68332 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_M68332 0 [list $notmod] 2 }
	if { $tmpvar_0 == "MC68360" } then { write_tristate $cfg $autocfg CONFIG_M68360 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_M68360 0 [list $notmod] 2 }
	if { $tmpvar_0 == "MC68376" } then { write_tristate $cfg $autocfg CONFIG_M68376 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_M68376 0 [list $notmod] 2 }
	if { $tmpvar_0 == "MCF5204" } then { write_tristate $cfg $autocfg CONFIG_M5204 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_M5204 0 [list $notmod] 2 }
	if { $tmpvar_0 == "MCF5206" } then { write_tristate $cfg $autocfg CONFIG_M5206 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_M5206 0 [list $notmod] 2 }
	if { $tmpvar_0 == "MCF5206e" } then { write_tristate $cfg $autocfg CONFIG_M5206e 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_M5206e 0 [list $notmod] 2 }
	if { $tmpvar_0 == "MCF5249" } then { write_tristate $cfg $autocfg CONFIG_M5249 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_M5249 0 [list $notmod] 2 }
	if { $tmpvar_0 == "MCF5272" } then { write_tristate $cfg $autocfg CONFIG_M5272 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_M5272 0 [list $notmod] 2 }
	if { $tmpvar_0 == "MCF5307" } then { write_tristate $cfg $autocfg CONFIG_M5307 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_M5307 0 [list $notmod] 2 }
	if { $tmpvar_0 == "MCF5407" } then { write_tristate $cfg $autocfg CONFIG_M5407 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_M5407 0 [list $notmod] 2 }
	global CONFIG_COLDFIRE
	global CONFIG_M5204
	global CONFIG_M5206
	global CONFIG_M5206e
	global CONFIG_M5249
	global CONFIG_M5272
	global CONFIG_M5307
	global CONFIG_M5407
	if {($CONFIG_M5204 == 1 || $CONFIG_M5206 == 1 || $CONFIG_M5206e == 1 || $CONFIG_M5249 == 1 || $CONFIG_M5272 == 1 || $CONFIG_M5307 == 1 || $CONFIG_M5407 == 1)} then {write_tristate $cfg $autocfg CONFIG_COLDFIRE $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_360QUICC
	global CONFIG_M68360
	if {($CONFIG_M68360 == 1)} then {write_tristate $cfg $autocfg CONFIG_360QUICC $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_CPU32
	global CONFIG_M68376
	if {($CONFIG_M68376 == 1)} then {write_tristate $cfg $autocfg CONFIG_CPU32 $CONSTANT_Y [list $notmod] 2 }
	global tmpvar_1
	
	if { $tmpvar_1 == "AUTO" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_AUTO 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_AUTO 0 [list $notmod] 2 }
	if { $tmpvar_1 == "11MHz" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_11MHz 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_11MHz 0 [list $notmod] 2 }
	if { $tmpvar_1 == "16MHz" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_16MHz 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_16MHz 0 [list $notmod] 2 }
	if { $tmpvar_1 == "20MHz" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_20MHz 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_20MHz 0 [list $notmod] 2 }
	if { $tmpvar_1 == "24MHz" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_24MHz 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_24MHz 0 [list $notmod] 2 }
	if { $tmpvar_1 == "25MHz" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_25MHz 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_25MHz 0 [list $notmod] 2 }
	if { $tmpvar_1 == "33MHz" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_33MHz 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_33MHz 0 [list $notmod] 2 }
	if { $tmpvar_1 == "40MHz" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_40MHz 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_40MHz 0 [list $notmod] 2 }
	if { $tmpvar_1 == "45MHz" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_45MHz 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_45MHz 0 [list $notmod] 2 }
	if { $tmpvar_1 == "48MHz" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_48MHz 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_48MHz 0 [list $notmod] 2 }
	if { $tmpvar_1 == "50MHz" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_50MHz 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_50MHz 0 [list $notmod] 2 }
	if { $tmpvar_1 == "54MHz" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_54MHz 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_54MHz 0 [list $notmod] 2 }
	if { $tmpvar_1 == "60MHz" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_60MHz 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_60MHz 0 [list $notmod] 2 }
	if { $tmpvar_1 == "64MHz" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_64MHz 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_64MHz 0 [list $notmod] 2 }
	if { $tmpvar_1 == "66MHz" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_66MHz 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_66MHz 0 [list $notmod] 2 }
	if { $tmpvar_1 == "70MHz" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_70MHz 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_70MHz 0 [list $notmod] 2 }
	if { $tmpvar_1 == "140MHz" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_140MHz 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_140MHz 0 [list $notmod] 2 }
	global CONFIG_OLDMASK
	if {($CONFIG_M5307 == 1)} then {write_tristate $cfg $autocfg CONFIG_OLDMASK $CONFIG_OLDMASK [list $notmod] 2 }
	write_comment $cfg $autocfg "Platform"
	global CONFIG_PILOT3
	global CONFIG_M68328
	if {($CONFIG_M68328 == 1)} then {write_tristate $cfg $autocfg CONFIG_PILOT3 $CONFIG_PILOT3 [list $notmod] 2 }
	global CONFIG_XCOPILOT_BUGS
	if {($CONFIG_M68328 == 1) && ($CONFIG_PILOT3 == 1)} then {write_tristate $cfg $autocfg CONFIG_XCOPILOT_BUGS $CONFIG_XCOPILOT_BUGS [list $notmod] 2 }
	global CONFIG_M68EZ328ADS
	global CONFIG_M68EZ328
	if {($CONFIG_M68EZ328 == 1)} then {write_tristate $cfg $autocfg CONFIG_M68EZ328ADS $CONFIG_M68EZ328ADS [list $notmod] 2 }
	global CONFIG_ALMA_ANS
	if {($CONFIG_M68EZ328 == 1)} then {write_tristate $cfg $autocfg CONFIG_ALMA_ANS $CONFIG_ALMA_ANS [list $notmod] 2 }
	global CONFIG_UCSIMM
	if {($CONFIG_M68EZ328 == 1)} then {write_tristate $cfg $autocfg CONFIG_UCSIMM $CONFIG_UCSIMM [list $notmod] 2 }
	global CONFIG_CWEZ328
	if {($CONFIG_M68EZ328 == 1)} then {write_tristate $cfg $autocfg CONFIG_CWEZ328 $CONFIG_CWEZ328 [list $notmod] 2 }
	global CONFIG_PILOT5
	if {($CONFIG_M68EZ328 == 1)} then {write_tristate $cfg $autocfg CONFIG_PILOT5 $CONFIG_PILOT5 [list $notmod] 2 }
	global CONFIG_APLIO_PRO
	global CONFIG_M68EN302
	if {($CONFIG_M68EN302 == 1)} then {write_tristate $cfg $autocfg CONFIG_APLIO_PRO $CONFIG_APLIO_PRO [list $notmod] 2 }
	global CONFIG_APLIO_ENTRECOTE
	if {($CONFIG_M68EN302 == 1)} then {write_tristate $cfg $autocfg CONFIG_APLIO_ENTRECOTE $CONFIG_APLIO_ENTRECOTE [list $notmod] 2 }
	global tmpvar_2
	global CONFIG_M68332
	if {($CONFIG_M68332 == 1)} then {
	if { $tmpvar_2 == "SHGLCORE" } then { write_tristate $cfg $autocfg CONFIG_SHGLCORE 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SHGLCORE 0 [list $notmod] 2 }
	if { $tmpvar_2 == "MWI" } then { write_tristate $cfg $autocfg CONFIG_MWI 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_MWI 0 [list $notmod] 2 }}
	global CONFIG_SHGLCORE_2MEG
	global CONFIG_SHGLCORE
	if {($CONFIG_M68332 == 1) && ($CONFIG_SHGLCORE == 1)} then {write_tristate $cfg $autocfg CONFIG_SHGLCORE_2MEG $CONFIG_SHGLCORE_2MEG [list $notmod] 2 }
	global CONFIG_ROMFS_FROM_ROM
	global CONFIG_MWI
	if {($CONFIG_M68332 == 1) && ($CONFIG_MWI == 1)} then {write_tristate $cfg $autocfg CONFIG_ROMFS_FROM_ROM $CONFIG_ROMFS_FROM_ROM [list $notmod] 2 }
	global CONFIG_UCQUICC
	if {($CONFIG_M68360 == 1)} then {write_tristate $cfg $autocfg CONFIG_UCQUICC $CONFIG_UCQUICC [list $notmod] 2 }
	global CONFIG_SED_SIOS
	if {($CONFIG_M68360 == 1)} then {write_tristate $cfg $autocfg CONFIG_SED_SIOS $CONFIG_SED_SIOS [list $notmod] 2 }
	global tmpvar_3
	if {($CONFIG_M68360 == 1) && ($CONFIG_SED_SIOS == 1)} then {
	if { $tmpvar_3 == "MASTER_CARD" } then { write_tristate $cfg $autocfg CONFIG_SED_SIOS_MASTER 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SED_SIOS_MASTER 0 [list $notmod] 2 }
	if { $tmpvar_3 == "REMOTE_CARD" } then { write_tristate $cfg $autocfg CONFIG_SED_SIOS_REMOTE 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SED_SIOS_REMOTE 0 [list $notmod] 2 }}
	global CONFIG_SED_MCU_STATUS_LED
	global CONFIG_SED_SIOS_MASTER
	if {($CONFIG_M68360 == 1) && ($CONFIG_SED_SIOS == 1) && ($CONFIG_SED_SIOS_MASTER == 1)} then {write_tristate $cfg $autocfg CONFIG_SED_MCU_STATUS_LED $CONFIG_SED_MCU_STATUS_LED [list $notmod] 2 }
	global CONFIG_FR1000
	if {($CONFIG_M68376 == 1)} then {write_tristate $cfg $autocfg CONFIG_FR1000 $CONFIG_FR1000 [list $notmod] 2 }
	global CONFIG_ARN5206
	if {($CONFIG_M5206 == 1)} then {write_tristate $cfg $autocfg CONFIG_ARN5206 $CONFIG_ARN5206 [list $notmod] 2 }
	global CONFIG_M5206eC3
	if {($CONFIG_M5206e == 1)} then {write_tristate $cfg $autocfg CONFIG_M5206eC3 $CONFIG_M5206eC3 [list $notmod] 2 }
	global CONFIG_ELITE
	if {($CONFIG_M5206e == 1)} then {write_tristate $cfg $autocfg CONFIG_ELITE $CONFIG_ELITE [list $notmod] 2 }
	global CONFIG_SMALL
	if {($CONFIG_M5206e == 1) && ($CONFIG_ELITE == 1)} then {write_tristate $cfg $autocfg CONFIG_SMALL $CONFIG_SMALL [list $notmod] 2 }
	global CONFIG_TELOS
	if {($CONFIG_M5206e == 1)} then {write_tristate $cfg $autocfg CONFIG_TELOS $CONFIG_TELOS [list $notmod] 2 }
	global CONFIG_CFV240
	if {($CONFIG_M5206e == 1)} then {write_tristate $cfg $autocfg CONFIG_CFV240 $CONFIG_CFV240 [list $notmod] 2 }
	global CONFIG_M5249C3
	if {($CONFIG_M5249 == 1)} then {write_tristate $cfg $autocfg CONFIG_M5249C3 $CONFIG_M5249C3 [list $notmod] 2 }
	global CONFIG_M5272C3
	if {($CONFIG_M5272 == 1)} then {write_tristate $cfg $autocfg CONFIG_M5272C3 $CONFIG_M5272C3 [list $notmod] 2 }
	global CONFIG_COBRA5272
	if {($CONFIG_M5272 == 1)} then {write_tristate $cfg $autocfg CONFIG_COBRA5272 $CONFIG_COBRA5272 [list $notmod] 2 }
	global CONFIG_BOOTPARAM
	if {($CONFIG_M5272 == 1) && ($CONFIG_COBRA5272 == 1)} then {write_tristate $cfg $autocfg CONFIG_BOOTPARAM $CONFIG_BOOTPARAM [list $notmod] 2 }
	global CONFIG_BOOTPARAM_
	if {($CONFIG_M5272 == 1) && ($CONFIG_COBRA5272 == 1) && ($CONFIG_BOOTPARAM == 1)} then {write_string $cfg $autocfg CONFIG_BOOTPARAM_ "$CONFIG_BOOTPARAM_" $notmod }
	global CONFIG_CANCam
	if {($CONFIG_M5272 == 1)} then {write_tristate $cfg $autocfg CONFIG_CANCam $CONFIG_CANCam [list $notmod] 2 }
	global CONFIG_SCALES
	if {($CONFIG_M5272 == 1)} then {write_tristate $cfg $autocfg CONFIG_SCALES $CONFIG_SCALES [list $notmod] 2 }
	global CONFIG_ARN5307
	if {($CONFIG_M5307 == 1)} then {write_tristate $cfg $autocfg CONFIG_ARN5307 $CONFIG_ARN5307 [list $notmod] 2 }
	global CONFIG_M5307C3
	if {($CONFIG_M5307 == 1)} then {write_tristate $cfg $autocfg CONFIG_M5307C3 $CONFIG_M5307C3 [list $notmod] 2 }
	global CONFIG_eLIA
	if {($CONFIG_M5307 == 1)} then {write_tristate $cfg $autocfg CONFIG_eLIA $CONFIG_eLIA [list $notmod] 2 }
	global CONFIG_DISKtel
	if {($CONFIG_M5307 == 1)} then {write_tristate $cfg $autocfg CONFIG_DISKtel $CONFIG_DISKtel [list $notmod] 2 }
	global CONFIG_SECUREEDGEMP3
	if {($CONFIG_M5307 == 1)} then {write_tristate $cfg $autocfg CONFIG_SECUREEDGEMP3 $CONFIG_SECUREEDGEMP3 [list $notmod] 2 }
	global CONFIG_M5407C3
	if {($CONFIG_M5407 == 1)} then {write_tristate $cfg $autocfg CONFIG_M5407C3 $CONFIG_M5407C3 [list $notmod] 2 }
	global CONFIG_CLEOPATRA
	if {($CONFIG_M5307 == 1 || $CONFIG_M5407 == 1)} then {write_tristate $cfg $autocfg CONFIG_CLEOPATRA $CONFIG_CLEOPATRA [list $notmod] 2 }
	global CONFIG_NETtel
	if {($CONFIG_M5206e == 1 || $CONFIG_M5272 == 1 || $CONFIG_M5307 == 1)} then {write_tristate $cfg $autocfg CONFIG_NETtel $CONFIG_NETtel [list $notmod] 2 }
	global CONFIG_SNAPGEAR
	if {($CONFIG_M5206e == 1 || $CONFIG_M5272 == 1 || $CONFIG_M5307 == 1)} then {write_tristate $cfg $autocfg CONFIG_SNAPGEAR $CONFIG_SNAPGEAR [list $notmod] 2 }
	if {($CONFIG_M5206e == 1 || $CONFIG_M5272 == 1 || $CONFIG_M5307 == 1)} then {write_tristate $cfg $autocfg CONFIG_ROMFS_FROM_ROM $CONFIG_ROMFS_FROM_ROM [list $notmod] 2 }
	global CONFIG_SM2010
	global CONFIG_M68000
	if {($CONFIG_M68000 == 1)} then {write_tristate $cfg $autocfg CONFIG_SM2010 $CONFIG_SM2010 [list $notmod] 2 }
	global CONFIG_68KATY
	if {($CONFIG_M68000 == 1)} then {write_tristate $cfg $autocfg CONFIG_68KATY $CONFIG_68KATY [list $notmod] 2 }
	global CONFIG_MAC_PLUS
	if {($CONFIG_M68000 == 1)} then {write_tristate $cfg $autocfg CONFIG_MAC_PLUS $CONFIG_MAC_PLUS [list $notmod] 2 }
	global CONFIG_PILOT
	if {($CONFIG_PILOT3 == 1 || $CONFIG_PILOT5 == 1)} then {write_tristate $cfg $autocfg CONFIG_PILOT $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_APLIO
	if {($CONFIG_APLIO_PRO == 1 || $CONFIG_APLIO_ENTRECOTE == 1)} then {write_tristate $cfg $autocfg CONFIG_APLIO $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_ARNEWSH
	if {($CONFIG_ARN5206 == 1 || $CONFIG_ARN5307 == 1)} then {write_tristate $cfg $autocfg CONFIG_ARNEWSH $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_MOTOROLA
	if {($CONFIG_M5206eC3 == 1 || $CONFIG_M5249C3 == 1 || $CONFIG_M5272C3 == 1 || $CONFIG_M5307C3 == 1 || $CONFIG_M5407C3 == 1)} then {write_tristate $cfg $autocfg CONFIG_MOTOROLA $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_HW_FEITH
	if {($CONFIG_CLEOPATRA == 1 || $CONFIG_CANCam == 1 || $CONFIG_SCALES == 1)} then {write_tristate $cfg $autocfg CONFIG_HW_FEITH $CONSTANT_Y [list $notmod] 2 }
	global tmpvar_4
	
	if { $tmpvar_4 == "AUTO" } then { write_tristate $cfg $autocfg CONFIG_RAMAUTO 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_RAMAUTO 0 [list $notmod] 2 }
	if { $tmpvar_4 == "0.5MB" } then { write_tristate $cfg $autocfg CONFIG_RAM05MB 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_RAM05MB 0 [list $notmod] 2 }
	if { $tmpvar_4 == "1MB" } then { write_tristate $cfg $autocfg CONFIG_RAM1MB 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_RAM1MB 0 [list $notmod] 2 }
	if { $tmpvar_4 == "2MB" } then { write_tristate $cfg $autocfg CONFIG_RAM2MB 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_RAM2MB 0 [list $notmod] 2 }
	if { $tmpvar_4 == "4MB" } then { write_tristate $cfg $autocfg CONFIG_RAM4MB 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_RAM4MB 0 [list $notmod] 2 }
	if { $tmpvar_4 == "8MB" } then { write_tristate $cfg $autocfg CONFIG_RAM8MB 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_RAM8MB 0 [list $notmod] 2 }
	if { $tmpvar_4 == "16MB" } then { write_tristate $cfg $autocfg CONFIG_RAM16MB 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_RAM16MB 0 [list $notmod] 2 }
	if { $tmpvar_4 == "32MB" } then { write_tristate $cfg $autocfg CONFIG_RAM32MB 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_RAM32MB 0 [list $notmod] 2 }
	if { $tmpvar_4 == "64MB" } then { write_tristate $cfg $autocfg CONFIG_RAM64MB 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_RAM64MB 0 [list $notmod] 2 }
	global tmpvar_5
	
	if { $tmpvar_5 == "AUTO" } then { write_tristate $cfg $autocfg CONFIG_AUTOBIT 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_AUTOBIT 0 [list $notmod] 2 }
	if { $tmpvar_5 == "8bit" } then { write_tristate $cfg $autocfg CONFIG_RAM8BIT 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_RAM8BIT 0 [list $notmod] 2 }
	if { $tmpvar_5 == "16bit" } then { write_tristate $cfg $autocfg CONFIG_RAM16BIT 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_RAM16BIT 0 [list $notmod] 2 }
	if { $tmpvar_5 == "32bit" } then { write_tristate $cfg $autocfg CONFIG_RAM32bit 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_RAM32bit 0 [list $notmod] 2 }
	global tmpvar_6
	
	if { $tmpvar_6 == "RAM" } then { write_tristate $cfg $autocfg CONFIG_RAMKERNEL 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_RAMKERNEL 0 [list $notmod] 2 }
	if { $tmpvar_6 == "ROM" } then { write_tristate $cfg $autocfg CONFIG_ROMKERNEL 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_ROMKERNEL 0 [list $notmod] 2 }
	write_comment $cfg $autocfg "General setup"
	global CONFIG_PCI
	write_tristate $cfg $autocfg CONFIG_PCI $CONFIG_PCI [list $notmod] 2
	global CONFIG_PCIDEVLIST
	if {($CONFIG_PCI == 1)} then {write_tristate $cfg $autocfg CONFIG_PCIDEVLIST $CONFIG_PCIDEVLIST [list $notmod] 2 }
	global CONFIG_NET
	write_tristate $cfg $autocfg CONFIG_NET $CONFIG_NET [list $notmod] 2
	global CONFIG_SYSVIPC
	write_tristate $cfg $autocfg CONFIG_SYSVIPC $CONFIG_SYSVIPC [list $notmod] 2
	global CONFIG_REDUCED_MEMORY
	write_tristate $cfg $autocfg CONFIG_REDUCED_MEMORY $CONFIG_REDUCED_MEMORY [list $notmod] 2
	global CONFIG_BINFMT_FLAT
	write_tristate $cfg $autocfg CONFIG_BINFMT_FLAT $CONFIG_BINFMT_FLAT [list $notmod] 2
	global CONFIG_BINFMT_ZFLAT
	if {($CONFIG_BINFMT_FLAT != 0)} then {write_tristate $cfg $autocfg CONFIG_BINFMT_ZFLAT $CONFIG_BINFMT_ZFLAT [list $notmod] 2 }
	global CONFIG_KERNEL_ELF
	write_tristate $cfg $autocfg CONFIG_KERNEL_ELF $CONFIG_KERNEL_ELF [list $notmod] 2
	global CONFIG_PILOT_MEMORY_DISPLAY
	if {($CONFIG_PILOT == 1)} then {write_tristate $cfg $autocfg CONFIG_PILOT_MEMORY_DISPLAY $CONFIG_PILOT_MEMORY_DISPLAY [list $notmod] 2 }
	global CONFIG_CONSOLE
	write_tristate $cfg $autocfg CONFIG_CONSOLE $CONFIG_CONSOLE [list $notmod] 2
	global CONFIG_FRAMEBUFFER
	if {($CONFIG_CONSOLE == 1)} then {write_tristate $cfg $autocfg CONFIG_FRAMEBUFFER $CONFIG_FRAMEBUFFER [list $notmod] 2 }
	global CONFIG_PILOT_CONSOLE
	if {($CONFIG_CONSOLE == 1) && ($CONFIG_PILOT == 1 && $CONFIG_FRAMEBUFFER == 1)} then {write_tristate $cfg $autocfg CONFIG_PILOT_CONSOLE $CONFIG_PILOT_CONSOLE [list $notmod] 2 }
	write_comment $cfg $autocfg "Floppy, IDE, and other block devices"
	global CONFIG_BLK_DEV_BLKMEM
	write_tristate $cfg $autocfg CONFIG_BLK_DEV_BLKMEM $CONFIG_BLK_DEV_BLKMEM [list $notmod] 2
	global tmpvar_7
	if {($CONFIG_BLK_DEV_BLKMEM == 1)} then {
	if { $tmpvar_7 == "NONE" } then { write_tristate $cfg $autocfg CONFIG_NOFLASH 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_NOFLASH 0 [list $notmod] 2 }
	if { $tmpvar_7 == "AMD" } then { write_tristate $cfg $autocfg CONFIG_AMDFLASH 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_AMDFLASH 0 [list $notmod] 2 }
	if { $tmpvar_7 == "INTEL" } then { write_tristate $cfg $autocfg CONFIG_INTELFLASH 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_INTELFLASH 0 [list $notmod] 2 }}
	global tmpvar_8
	global CONFIG_AMDFLASH
	global CONFIG_INTELFLASH
	if {($CONFIG_BLK_DEV_BLKMEM == 1) && ($CONFIG_AMDFLASH == 1 || $CONFIG_INTELFLASH == 1)} then {
	if { $tmpvar_8 == "AUTO" } then { write_tristate $cfg $autocfg CONFIG_FLASHAUTO 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FLASHAUTO 0 [list $notmod] 2 }
	if { $tmpvar_8 == "128KB" } then { write_tristate $cfg $autocfg CONFIG_FLASH128KB 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FLASH128KB 0 [list $notmod] 2 }
	if { $tmpvar_8 == "512KB" } then { write_tristate $cfg $autocfg CONFIG_FLASH512KB 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FLASH512KB 0 [list $notmod] 2 }
	if { $tmpvar_8 == "1MB" } then { write_tristate $cfg $autocfg CONFIG_FLASH1MB 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FLASH1MB 0 [list $notmod] 2 }
	if { $tmpvar_8 == "2MB" } then { write_tristate $cfg $autocfg CONFIG_FLASH2MB 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FLASH2MB 0 [list $notmod] 2 }
	if { $tmpvar_8 == "4MB" } then { write_tristate $cfg $autocfg CONFIG_FLASH4MB 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FLASH4MB 0 [list $notmod] 2 }
	if { $tmpvar_8 == "6MB" } then { write_tristate $cfg $autocfg CONFIG_FLASH6MB 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FLASH6MB 0 [list $notmod] 2 }
	if { $tmpvar_8 == "8MB" } then { write_tristate $cfg $autocfg CONFIG_FLASH8MB 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FLASH8MB 0 [list $notmod] 2 }
	if { $tmpvar_8 == "16MB" } then { write_tristate $cfg $autocfg CONFIG_FLASH16MB 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FLASH16MB 0 [list $notmod] 2 }}
	global tmpvar_9
	if {($CONFIG_BLK_DEV_BLKMEM == 1) && ($CONFIG_AMDFLASH == 1 || $CONFIG_INTELFLASH == 1)} then {
	if { $tmpvar_9 == "AUTO" } then { write_tristate $cfg $autocfg CONFIG_FLASHAUTOBIT 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FLASHAUTOBIT 0 [list $notmod] 2 }
	if { $tmpvar_9 == "8bit" } then { write_tristate $cfg $autocfg CONFIG_FLASH8BIT 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FLASH8BIT 0 [list $notmod] 2 }
	if { $tmpvar_9 == "16bit" } then { write_tristate $cfg $autocfg CONFIG_FLASH16BIT 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FLASH16BIT 0 [list $notmod] 2 }
	if { $tmpvar_9 == "32bit" } then { write_tristate $cfg $autocfg CONFIG_FLASH32bit 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FLASH32bit 0 [list $notmod] 2 }}
	global CONFIG_EXTRA_FLASH1MB
	global CONFIG_FLASH1MB
	if {($CONFIG_BLK_DEV_BLKMEM == 1) && ($CONFIG_AMDFLASH == 1 || $CONFIG_INTELFLASH == 1) && ($CONFIG_FLASH1MB == 1)} then {write_tristate $cfg $autocfg CONFIG_EXTRA_FLASH1MB $CONFIG_EXTRA_FLASH1MB [list $notmod] 2 }
	global CONFIG_FLASH_SNAPGEAR
	if {($CONFIG_BLK_DEV_BLKMEM == 1) && ($CONFIG_AMDFLASH == 1 || $CONFIG_INTELFLASH == 1)} then {write_tristate $cfg $autocfg CONFIG_FLASH_SNAPGEAR $CONFIG_FLASH_SNAPGEAR [list $notmod] 2 }
	global CONFIG_BLK_DEV_IDE
	write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDE $CONFIG_BLK_DEV_IDE [list $notmod] 2
	global CONFIG_BLK_DEV_IDECD
	if {($CONFIG_BLK_DEV_IDE == 1)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDECD $CONFIG_BLK_DEV_IDECD [list $notmod] 2 }
	global CONFIG_BLK_DEV_IDETAPE
	if {($CONFIG_BLK_DEV_IDE == 1)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDETAPE $CONFIG_BLK_DEV_IDETAPE [list $notmod] 2 }
	global CONFIG_BLK_DEV_IDEFLOPPY
	if {($CONFIG_BLK_DEV_IDE == 1)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDEFLOPPY $CONFIG_BLK_DEV_IDEFLOPPY [list $notmod] 2 }
	write_comment $cfg $autocfg "Additional Block/FLASH Devices"
	global CONFIG_BLK_DEV_LOOP
	write_tristate $cfg $autocfg CONFIG_BLK_DEV_LOOP $CONFIG_BLK_DEV_LOOP [list $notmod] 2
	global CONFIG_BLK_DEV_MD
	write_tristate $cfg $autocfg CONFIG_BLK_DEV_MD $CONFIG_BLK_DEV_MD [list $notmod] 2
	global CONFIG_MD_LINEAR
	if {($CONFIG_BLK_DEV_MD == 1)} then {write_tristate $cfg $autocfg CONFIG_MD_LINEAR $CONFIG_MD_LINEAR [list $notmod] 2 }
	global CONFIG_MD_STRIPED
	if {($CONFIG_BLK_DEV_MD == 1)} then {write_tristate $cfg $autocfg CONFIG_MD_STRIPED $CONFIG_MD_STRIPED [list $notmod] 2 }
	global CONFIG_BLK_DEV_RAM
	write_tristate $cfg $autocfg CONFIG_BLK_DEV_RAM $CONFIG_BLK_DEV_RAM [list $notmod] 2
	global CONFIG_RD_RELEASE_BLOCKS
	if {($CONFIG_BLK_DEV_RAM == 1)} then {write_tristate $cfg $autocfg CONFIG_RD_RELEASE_BLOCKS $CONFIG_RD_RELEASE_BLOCKS [list $notmod] 2 }
	global CONFIG_BLK_DEV_INITRD
	if {($CONFIG_BLK_DEV_RAM == 1)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_INITRD $CONFIG_BLK_DEV_INITRD [list $notmod] 2 }
	global CONFIG_DEV_FLASH
	write_tristate $cfg $autocfg CONFIG_DEV_FLASH $CONFIG_DEV_FLASH [list $notmod] 2
	global CONFIG_BLK_DEV_FLASH
	if {($CONFIG_DEV_FLASH == 1)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_FLASH $CONFIG_BLK_DEV_FLASH [list $notmod] 2 }
	global CONFIG_CHR_DEV_FLASH
	if {($CONFIG_DEV_FLASH == 1)} then {write_tristate $cfg $autocfg CONFIG_CHR_DEV_FLASH $CONFIG_CHR_DEV_FLASH [list $notmod] 2 }
	global CONFIG_BLK_DEV_NFA
	write_tristate $cfg $autocfg CONFIG_BLK_DEV_NFA $CONFIG_BLK_DEV_NFA [list $notmod] 2
	if {($CONFIG_NET == 1)} then {write_comment $cfg $autocfg "Networking options"}
	global CONFIG_FIREWALL
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_FIREWALL $CONFIG_FIREWALL [list $notmod] 2 }
	global CONFIG_NET_ALIAS
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_ALIAS $CONFIG_NET_ALIAS [list $notmod] 2 }
	global CONFIG_INET
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_INET $CONFIG_INET [list $notmod] 2 }
	global CONFIG_IP_FORWARD
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_FORWARD $CONFIG_IP_FORWARD [list $notmod] 2 }
	global CONFIG_IP_MULTICAST
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_MULTICAST $CONFIG_IP_MULTICAST [list $notmod] 2 }
	global CONFIG_SYN_COOKIES
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_SYN_COOKIES $CONFIG_SYN_COOKIES [list $notmod] 2 }
	global CONFIG_IP_FIREWALL
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_FIREWALL $CONFIG_IP_FIREWALL [list $notmod] 2 }
	global CONFIG_IP_FIREWALL_VERBOSE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_FIREWALL_VERBOSE $CONFIG_IP_FIREWALL_VERBOSE [list $notmod] 2 }
	global CONFIG_IP_MASQUERADE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_MASQUERADE $CONFIG_IP_MASQUERADE [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0)} then {write_comment $cfg $autocfg "Protocol-specific masquerading support will be built as modules."}
	global CONFIG_IP_MASQUERADE_IPAUTOFW
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_MASQUERADE_IPAUTOFW $CONFIG_IP_MASQUERADE_IPAUTOFW [list $notmod] 2 }
	global CONFIG_IP_MASQUERADE_IPPORTFW
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_MASQUERADE_IPPORTFW $CONFIG_IP_MASQUERADE_IPPORTFW [list $notmod] 2 }
	global CONFIG_IP_MASQUERADE_PPTP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_MASQUERADE_PPTP $CONFIG_IP_MASQUERADE_PPTP [list $notmod] 2 }
	global CONFIG_IP_MASQUERADE_PPTP_MULTICLIENT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_PPTP == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_MASQUERADE_PPTP_MULTICLIENT $CONFIG_IP_MASQUERADE_PPTP_MULTICLIENT [list $notmod] 2 }
	global DEBUG_IP_MASQUERADE_PPTP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_PPTP == 1)} then {write_tristate $cfg $autocfg DEBUG_IP_MASQUERADE_PPTP $DEBUG_IP_MASQUERADE_PPTP [list $notmod] 2 }
	global DEBUG_IP_MASQUERADE_PPTP_VERBOSE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_PPTP == 1) && ($DEBUG_IP_MASQUERADE_PPTP == 1)} then {write_tristate $cfg $autocfg DEBUG_IP_MASQUERADE_PPTP_VERBOSE $DEBUG_IP_MASQUERADE_PPTP_VERBOSE [list $notmod] 2 }
	global CONFIG_IP_MASQUERADE_IPSEC
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_MASQUERADE_IPSEC $CONFIG_IP_MASQUERADE_IPSEC [list $notmod] 2 }
	global CONFIG_IP_MASQUERADE_IPSEC_EXPIRE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_IPSEC == 1)} then {write_int $cfg $autocfg CONFIG_IP_MASQUERADE_IPSEC_EXPIRE $CONFIG_IP_MASQUERADE_IPSEC_EXPIRE $notmod }
	global CONFIG_IP_MASQUERADE_IPSEC_NOGUESS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_IPSEC == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_MASQUERADE_IPSEC_NOGUESS $CONFIG_IP_MASQUERADE_IPSEC_NOGUESS [list $notmod] 2 }
	global DEBUG_IP_MASQUERADE_IPSEC
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_IPSEC == 1)} then {write_tristate $cfg $autocfg DEBUG_IP_MASQUERADE_IPSEC $DEBUG_IP_MASQUERADE_IPSEC [list $notmod] 2 }
	global DEBUG_IP_MASQUERADE_IPSEC_VERBOSE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_MASQUERADE_IPSEC == 1) && ($DEBUG_IP_MASQUERADE_IPSEC == 1)} then {write_tristate $cfg $autocfg DEBUG_IP_MASQUERADE_IPSEC_VERBOSE $DEBUG_IP_MASQUERADE_IPSEC_VERBOSE [list $notmod] 2 }
	global CONFIG_IP_MASQUERADE_ICMP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_IP_MASQUERADE != 0)} then {write_tristate $cfg $autocfg CONFIG_IP_MASQUERADE_ICMP $CONFIG_IP_MASQUERADE_ICMP [list $notmod] 2 }
	global CONFIG_IP_TRANSPARENT_PROXY
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_TRANSPARENT_PROXY $CONFIG_IP_TRANSPARENT_PROXY [list $notmod] 2 }
	global CONFIG_IP_ALWAYS_DEFRAG
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_FIREWALL == 1) && ($CONFIG_IP_FIREWALL == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_ALWAYS_DEFRAG $CONFIG_IP_ALWAYS_DEFRAG [list $notmod] 2 }
	global CONFIG_IP_ACCT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_ACCT $CONFIG_IP_ACCT [list $notmod] 2 }
	global CONFIG_IP_ROUTER
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_ROUTER $CONFIG_IP_ROUTER [list $notmod] 2 }
	global CONFIG_NET_IPIP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_IPIP $CONFIG_NET_IPIP [list $notmod] 2 }
	global CONFIG_IP_MROUTE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_MULTICAST == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_MROUTE $CONFIG_IP_MROUTE [list $notmod] 2 }
	global CONFIG_IP_ALIAS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NET_ALIAS == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_ALIAS $CONFIG_IP_ALIAS [list $notmod] 2 }
	global CONFIG_ARPD
	global CONFIG_NETLINK
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_NETLINK == 1)} then {write_tristate $cfg $autocfg CONFIG_ARPD $CONFIG_ARPD [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_comment $cfg $autocfg "(it is safe to leave these untouched)"}
	global CONFIG_INET_PCTCP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_INET_PCTCP $CONFIG_INET_PCTCP [list $notmod] 2 }
	global CONFIG_INET_RARP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_INET_RARP $CONFIG_INET_RARP [list $notmod] 2 }
	global CONFIG_NO_PATH_MTU_DISCOVERY
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_NO_PATH_MTU_DISCOVERY $CONFIG_NO_PATH_MTU_DISCOVERY [list $notmod] 2 }
	global CONFIG_IP_NOSR
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_NOSR $CONFIG_IP_NOSR [list $notmod] 2 }
	global CONFIG_SKB_LARGE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_SKB_LARGE $CONFIG_SKB_LARGE [list $notmod] 2 }
	if {($CONFIG_NET == 1)} then {write_comment $cfg $autocfg " "}
	global CONFIG_IPX
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_IPX $CONFIG_IPX [list $notmod] 2 }
	global CONFIG_ATALK
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_ATALK $CONFIG_ATALK [list $notmod] 2 }
	global CONFIG_AX25
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_AX25 $CONFIG_AX25 [list $notmod] 2 }
	global CONFIG_NETROM
	if {($CONFIG_NET == 1) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {write_tristate $cfg $autocfg CONFIG_NETROM $CONFIG_NETROM [list $CONFIG_AX25] 2 }
	global CONFIG_ROSE
	if {($CONFIG_NET == 1) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {write_tristate $cfg $autocfg CONFIG_ROSE $CONFIG_ROSE [list $CONFIG_AX25] 2 }
	global CONFIG_BRIDGE
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_BRIDGE $CONFIG_BRIDGE [list $notmod] 2 }
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_NETLINK $CONFIG_NETLINK [list $notmod] 2 }
	global CONFIG_RTNETLINK
	if {($CONFIG_NET == 1) && ($CONFIG_NETLINK == 1)} then {write_tristate $cfg $autocfg CONFIG_RTNETLINK $CONFIG_RTNETLINK [list $notmod] 2 }
	global CONFIG_IPSEC
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_IPSEC $CONFIG_IPSEC [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {write_comment $cfg $autocfg "IPSec options (FreeS/WAN)"}
	global CONFIG_IPSEC_IPIP
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_IPIP $CONFIG_IPSEC_IPIP [list $notmod] 2 }
	global CONFIG_IPSEC_ALG
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_IPIP == 1)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_ALG $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_IPSEC_ALG_AES
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_IPIP == 1)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_ALG_AES $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_IPSEC_AH
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_AH $CONFIG_IPSEC_AH [list $notmod] 2 }
	global CONFIG_IPSEC_AUTH_HMAC_MD5
	global CONFIG_IPSEC_ESP
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_AH == 1 || $CONFIG_IPSEC_ESP == 1)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_AUTH_HMAC_MD5 $CONFIG_IPSEC_AUTH_HMAC_MD5 [list $notmod] 2 }
	global CONFIG_IPSEC_AUTH_HMAC_SHA1
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_AH == 1 || $CONFIG_IPSEC_ESP == 1)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_AUTH_HMAC_SHA1 $CONFIG_IPSEC_AUTH_HMAC_SHA1 [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_ESP $CONFIG_IPSEC_ESP [list $notmod] 2 }
	global CONFIG_IPSEC_ENC_DES
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_ESP == 1)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_ENC_DES $CONFIG_IPSEC_ENC_DES [list $notmod] 2 }
	global CONFIG_IPSEC_ENC_3DES
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_ESP == 1)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_ENC_3DES $CONFIG_IPSEC_ENC_3DES [list $notmod] 2 }
	global CONFIG_IPSEC_IPCOMP
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_IPCOMP $CONFIG_IPSEC_IPCOMP [list $notmod] 2 }
	global CONFIG_IPSEC_IPCOMP_LZS
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_IPCOMP == 1)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_IPCOMP_LZS $CONFIG_IPSEC_IPCOMP_LZS [list $notmod] 2 }
	global CONFIG_IPSEC_DEBUG
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_DEBUG $CONFIG_IPSEC_DEBUG [list $notmod] 2 }
	global CONFIG_IPSEC_NAT_TRAVERSAL
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_NAT_TRAVERSAL $CONFIG_IPSEC_NAT_TRAVERSAL [list $notmod] 2 }
	if {($CONFIG_NET == 1)} then {write_comment $cfg $autocfg "Network device support"}
	global CONFIG_NETDEVICES
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_NETDEVICES $CONFIG_NETDEVICES [list $notmod] 2 }
	global CONFIG_DUMMY
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_DUMMY $CONFIG_DUMMY [list $notmod] 2 }
	global CONFIG_SLIP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_SLIP $CONFIG_SLIP [list $notmod] 2 }
	global CONFIG_SLIP_COMPRESSED
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SLIP != 0)} then {write_tristate $cfg $autocfg CONFIG_SLIP_COMPRESSED $CONFIG_SLIP_COMPRESSED [list $notmod] 2 }
	global CONFIG_SLIP_SMART
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SLIP != 0)} then {write_tristate $cfg $autocfg CONFIG_SLIP_SMART $CONFIG_SLIP_SMART [list $notmod] 2 }
	global CONFIG_SLIP_MODE_SLIP6
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SLIP != 0)} then {write_tristate $cfg $autocfg CONFIG_SLIP_MODE_SLIP6 $CONFIG_SLIP_MODE_SLIP6 [list $notmod] 2 }
	global CONFIG_PPP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_PPP $CONFIG_PPP [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0)} then {write_comment $cfg $autocfg "CCP compressors for PPP are only built as modules."}
	global CONFIG_EQUALIZER
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_EQUALIZER $CONFIG_EQUALIZER [list $notmod] 2 }
	global CONFIG_UCCS8900
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_UCCS8900 $CONFIG_UCCS8900 [list $notmod] 2 }
	global CONFIG_UCCS8900_HW_SWAP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_UCCS8900 != 0)} then {write_tristate $cfg $autocfg CONFIG_UCCS8900_HW_SWAP $CONFIG_UCCS8900_HW_SWAP [list $notmod] 2 }
	global CS8900_BASE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_UCCS8900 != 0) && ($CONFIG_ALMA_ANS == 1)} then {write_hex $cfg $autocfg CS8900_BASE $CS8900_BASE $notmod }
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_UCCS8900 != 0) && ($CONFIG_ALMA_ANS != 1)} then {write_hex $cfg $autocfg CS8900_BASE $CS8900_BASE $notmod }
	global CONFIG_SMC9194
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_SMC9194 $CONFIG_SMC9194 [list $notmod] 2 }
	global CONFIG_SMC91111
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_SMC91111 $CONFIG_SMC91111 [list $notmod] 2 }
	global CONFIG_NE2000
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_NE2000 $CONFIG_NE2000 [list $notmod] 2 }
	global CONFIG_FEC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_FEC $CONFIG_FEC [list $notmod] 2 }
	global CONFIG_NE2K_PCI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1)} then {write_tristate $cfg $autocfg CONFIG_NE2K_PCI $CONFIG_NE2K_PCI [list $notmod] 2 }
	global CONFIG_DEC_ELCP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1)} then {write_tristate $cfg $autocfg CONFIG_DEC_ELCP $CONFIG_DEC_ELCP [list $notmod] 2 }
	global CONFIG_M68EN302_ETHERNET
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_M68EN302 == 1)} then {write_tristate $cfg $autocfg CONFIG_M68EN302_ETHERNET $CONFIG_M68EN302_ETHERNET [list $notmod] 2 }
	write_comment $cfg $autocfg "Filesystems"
	global CONFIG_QUOTA
	write_tristate $cfg $autocfg CONFIG_QUOTA $CONFIG_QUOTA [list $notmod] 2
	global CONFIG_MINIX_FS
	write_tristate $cfg $autocfg CONFIG_MINIX_FS $CONFIG_MINIX_FS [list $notmod] 2
	global CONFIG_EXT_FS
	write_tristate $cfg $autocfg CONFIG_EXT_FS $CONFIG_EXT_FS [list $notmod] 2
	global CONFIG_EXT2_FS
	write_tristate $cfg $autocfg CONFIG_EXT2_FS $CONFIG_EXT2_FS [list $notmod] 2
	global CONFIG_XIA_FS
	write_tristate $cfg $autocfg CONFIG_XIA_FS $CONFIG_XIA_FS [list $notmod] 2
	global CONFIG_NLS
	write_tristate $cfg $autocfg CONFIG_NLS $CONFIG_NLS [list $notmod] 2
	global CONFIG_ISO9660_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_ISO9660_FS $CONFIG_ISO9660_FS [list $CONFIG_NLS] 2 }
	global CONFIG_FAT_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_FAT_FS $CONFIG_FAT_FS [list $CONFIG_NLS] 2 }
	global CONFIG_MSDOS_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_FAT_FS == 1 || $CONFIG_FAT_FS == 2 || $CONFIG_FAT_FS == 4)} then {write_tristate $cfg $autocfg CONFIG_MSDOS_FS $CONFIG_MSDOS_FS [list $CONFIG_FAT_FS] 2 }
	global CONFIG_UMSDOS_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_MSDOS_FS == 1 || $CONFIG_MSDOS_FS == 2 || $CONFIG_MSDOS_FS == 4)} then {write_tristate $cfg $autocfg CONFIG_UMSDOS_FS $CONFIG_UMSDOS_FS [list $CONFIG_MSDOS_FS] 2 }
	global CONFIG_VFAT_FS
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_FAT_FS == 1 || $CONFIG_FAT_FS == 2 || $CONFIG_FAT_FS == 4)} then {write_tristate $cfg $autocfg CONFIG_VFAT_FS $CONFIG_VFAT_FS [list $CONFIG_FAT_FS] 2 }
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2)} then {write_comment $cfg $autocfg "Select available code pages"}
	global CONFIG_NLS_CODEPAGE_437
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_437 $CONFIG_NLS_CODEPAGE_437 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_737
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_737 $CONFIG_NLS_CODEPAGE_737 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_775
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_775 $CONFIG_NLS_CODEPAGE_775 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_850
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_850 $CONFIG_NLS_CODEPAGE_850 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_852
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_852 $CONFIG_NLS_CODEPAGE_852 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_855
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_855 $CONFIG_NLS_CODEPAGE_855 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_857
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_857 $CONFIG_NLS_CODEPAGE_857 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_860
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_860 $CONFIG_NLS_CODEPAGE_860 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_861
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_861 $CONFIG_NLS_CODEPAGE_861 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_862
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_862 $CONFIG_NLS_CODEPAGE_862 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_863
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_863 $CONFIG_NLS_CODEPAGE_863 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_864
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_864 $CONFIG_NLS_CODEPAGE_864 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_865
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_865 $CONFIG_NLS_CODEPAGE_865 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_866
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_866 $CONFIG_NLS_CODEPAGE_866 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_869
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_869 $CONFIG_NLS_CODEPAGE_869 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_CODEPAGE_874
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_874 $CONFIG_NLS_CODEPAGE_874 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_ISO8859_1
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_1 $CONFIG_NLS_ISO8859_1 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_ISO8859_2
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_2 $CONFIG_NLS_ISO8859_2 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_ISO8859_3
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_3 $CONFIG_NLS_ISO8859_3 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_ISO8859_4
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_4 $CONFIG_NLS_ISO8859_4 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_ISO8859_5
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_5 $CONFIG_NLS_ISO8859_5 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_ISO8859_6
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_6 $CONFIG_NLS_ISO8859_6 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_ISO8859_7
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_7 $CONFIG_NLS_ISO8859_7 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_ISO8859_8
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_8 $CONFIG_NLS_ISO8859_8 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_ISO8859_9
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_9 $CONFIG_NLS_ISO8859_9 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_ISO8859_14
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_14 $CONFIG_NLS_ISO8859_14 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_ISO8859_15
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_15 $CONFIG_NLS_ISO8859_15 [list $CONFIG_NLS] 2 }
	global CONFIG_NLS_KOI8_R
	if {($CONFIG_NLS == 1 || $CONFIG_NLS == 2) && ($CONFIG_NLS == 1 || $CONFIG_NLS == 2 || $CONFIG_NLS == 4)} then {write_tristate $cfg $autocfg CONFIG_NLS_KOI8_R $CONFIG_NLS_KOI8_R [list $CONFIG_NLS] 2 }
	global CONFIG_PROC_FS
	write_tristate $cfg $autocfg CONFIG_PROC_FS $CONFIG_PROC_FS [list $notmod] 2
	global CONFIG_NFS_FS
	if {($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_NFS_FS $CONFIG_NFS_FS [list $notmod] 2 }
	global CONFIG_ROOT_NFS
	if {($CONFIG_INET == 1) && ($CONFIG_NFS_FS == 1)} then {write_tristate $cfg $autocfg CONFIG_ROOT_NFS $CONFIG_ROOT_NFS [list $notmod] 2 }
	global CONFIG_RNFS_BOOTP
	if {($CONFIG_INET == 1) && ($CONFIG_NFS_FS == 1) && ($CONFIG_ROOT_NFS == 1)} then {write_tristate $cfg $autocfg CONFIG_RNFS_BOOTP $CONFIG_RNFS_BOOTP [list $notmod] 2 }
	global CONFIG_RNFS_RARP
	if {($CONFIG_INET == 1) && ($CONFIG_NFS_FS == 1) && ($CONFIG_ROOT_NFS == 1)} then {write_tristate $cfg $autocfg CONFIG_RNFS_RARP $CONFIG_RNFS_RARP [list $notmod] 2 }
	global CONFIG_SMB_FS
	if {($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_SMB_FS $CONFIG_SMB_FS [list $notmod] 2 }
	global CONFIG_SMB_WIN95
	if {($CONFIG_INET == 1) && ($CONFIG_SMB_FS != 0)} then {write_tristate $cfg $autocfg CONFIG_SMB_WIN95 $CONFIG_SMB_WIN95 [list $notmod] 2 }
	global CONFIG_NCP_FS
	if {($CONFIG_IPX != 0)} then {write_tristate $cfg $autocfg CONFIG_NCP_FS $CONFIG_NCP_FS [list $notmod] 2 }
	global CONFIG_NCPFS_PACKET_SIGNING
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {write_tristate $cfg $autocfg CONFIG_NCPFS_PACKET_SIGNING $CONFIG_NCPFS_PACKET_SIGNING [list $notmod] 2 }
	global CONFIG_NCPFS_IOCTL_LOCKING
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {write_tristate $cfg $autocfg CONFIG_NCPFS_IOCTL_LOCKING $CONFIG_NCPFS_IOCTL_LOCKING [list $notmod] 2 }
	global CONFIG_NCPFS_STRONG
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {write_tristate $cfg $autocfg CONFIG_NCPFS_STRONG $CONFIG_NCPFS_STRONG [list $notmod] 2 }
	global CONFIG_NCPFS_NFS_NS
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {write_tristate $cfg $autocfg CONFIG_NCPFS_NFS_NS $CONFIG_NCPFS_NFS_NS [list $notmod] 2 }
	global CONFIG_NCPFS_OS2_NS
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {write_tristate $cfg $autocfg CONFIG_NCPFS_OS2_NS $CONFIG_NCPFS_OS2_NS [list $notmod] 2 }
	global CONFIG_NCPFS_MOUNT_SUBDIR
	if {($CONFIG_IPX != 0) && ($CONFIG_NCP_FS != 0)} then {write_tristate $cfg $autocfg CONFIG_NCPFS_MOUNT_SUBDIR $CONFIG_NCPFS_MOUNT_SUBDIR [list $notmod] 2 }
	global CONFIG_HPFS_FS
	write_tristate $cfg $autocfg CONFIG_HPFS_FS $CONFIG_HPFS_FS [list $notmod] 2
	global CONFIG_SYSV_FS
	write_tristate $cfg $autocfg CONFIG_SYSV_FS $CONFIG_SYSV_FS [list $notmod] 2
	global CONFIG_AUTOFS_FS
	if {($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_AUTOFS_FS $CONFIG_AUTOFS_FS [list $notmod] 2 }
	global CONFIG_AFFS_FS
	if {($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_AFFS_FS $CONFIG_AFFS_FS [list $notmod] 2 }
	global CONFIG_AMIGA_PARTITION
	if {($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_AFFS_FS != 0)} then {write_tristate $cfg $autocfg CONFIG_AMIGA_PARTITION $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_ROMFS_FS
	write_tristate $cfg $autocfg CONFIG_ROMFS_FS $CONFIG_ROMFS_FS [list $notmod] 2
	global CONFIG_JFFS_FS
	write_tristate $cfg $autocfg CONFIG_JFFS_FS $CONFIG_JFFS_FS [list $notmod] 2
	global CONFIG_UFS_FS
	write_tristate $cfg $autocfg CONFIG_UFS_FS $CONFIG_UFS_FS [list $notmod] 2
	global CONFIG_BSD_DISKLABEL
	if {($CONFIG_UFS_FS != 0)} then {write_tristate $cfg $autocfg CONFIG_BSD_DISKLABEL $CONFIG_BSD_DISKLABEL [list $notmod] 2 }
	global CONFIG_SMD_DISKLABEL
	if {($CONFIG_UFS_FS != 0)} then {write_tristate $cfg $autocfg CONFIG_SMD_DISKLABEL $CONFIG_SMD_DISKLABEL [list $notmod] 2 }
	write_comment $cfg $autocfg "Character devices"
	global CONFIG_M68360_SMC_UART
	if {($CONFIG_360QUICC == 1)} then {write_tristate $cfg $autocfg CONFIG_M68360_SMC_UART $CONFIG_M68360_SMC_UART [list $notmod] 2 }
	global CONFIG_M68360_SCC_UART
	if {($CONFIG_360QUICC == 1)} then {write_tristate $cfg $autocfg CONFIG_M68360_SCC_UART $CONFIG_M68360_SCC_UART [list $notmod] 2 }
	global CONFIG_M68360_SIM_WDT
	if {($CONFIG_360QUICC == 1)} then {write_tristate $cfg $autocfg CONFIG_M68360_SIM_WDT $CONFIG_M68360_SIM_WDT [list $notmod] 2 }
	global CONFIG_M68360_SIM_WDT_55_AA
	if {($CONFIG_360QUICC == 1) && ($CONFIG_M68360_SIM_WDT == 1)} then {write_tristate $cfg $autocfg CONFIG_M68360_SIM_WDT_55_AA $CONFIG_M68360_SIM_WDT_55_AA [list $notmod] 2 }
	global CONFIG_68328_SERIAL
	if {($CONFIG_M68328 == 1)} then {write_tristate $cfg $autocfg CONFIG_68328_SERIAL $CONFIG_68328_SERIAL [list $notmod] 2 }
	global CONFIG_68328_DIGI
	if {($CONFIG_M68328 == 1)} then {write_tristate $cfg $autocfg CONFIG_68328_DIGI $CONFIG_68328_DIGI [list $notmod] 2 }
	global CONFIG_68328_SERIAL_RTS_CTS
	if {($CONFIG_M68328 == 1) && ($CONFIG_68328_SERIAL == 1)} then {write_tristate $cfg $autocfg CONFIG_68328_SERIAL_RTS_CTS $CONFIG_68328_SERIAL_RTS_CTS [list $notmod] 2 }
	if {($CONFIG_M68EZ328 == 1)} then {write_tristate $cfg $autocfg CONFIG_68328_SERIAL $CONFIG_68328_SERIAL [list $notmod] 2 }
	if {($CONFIG_M68EZ328 == 1)} then {write_tristate $cfg $autocfg CONFIG_68328_DIGI $CONFIG_68328_DIGI [list $notmod] 2 }
	if {($CONFIG_M68EZ328 == 1) && ($CONFIG_68328_SERIAL == 1)} then {write_tristate $cfg $autocfg CONFIG_68328_SERIAL_RTS_CTS $CONFIG_68328_SERIAL_RTS_CTS [list $notmod] 2 }
	global CONFIG_68681_SERIAL
	if {($CONFIG_M68EZ328 == 1) && ($CONFIG_M68EZ328ADS == 1)} then {write_tristate $cfg $autocfg CONFIG_68681_SERIAL $CONFIG_68681_SERIAL [list $notmod] 2 }
	global CONFIG_MAX311X_SERIAL
	if {($CONFIG_M68EZ328 == 1)} then {write_tristate $cfg $autocfg CONFIG_MAX311X_SERIAL $CONFIG_MAX311X_SERIAL [list $notmod] 2 }
	global CONFIG_PWM
	if {($CONFIG_M68EZ328 == 1)} then {write_tristate $cfg $autocfg CONFIG_PWM $CONFIG_PWM [list $notmod] 2 }
	global CONFIG_68332_SERIAL
	if {($CONFIG_M68332 == 1 || $CONFIG_M68376 == 1)} then {write_tristate $cfg $autocfg CONFIG_68332_SERIAL $CONFIG_68332_SERIAL [list $notmod] 2 }
	global CONFIG_68332_TPU
	if {($CONFIG_M68332 == 1 || $CONFIG_M68376 == 1)} then {write_tristate $cfg $autocfg CONFIG_68332_TPU $CONFIG_68332_TPU [list $notmod] 2 }
	global CONFIG_68332_PORTF
	if {($CONFIG_M68332 == 1 || $CONFIG_M68376 == 1)} then {write_tristate $cfg $autocfg CONFIG_68332_PORTF $CONFIG_68332_PORTF [list $notmod] 2 }
	global CONFIG_68332_PORTE
	if {($CONFIG_M68332 == 1 || $CONFIG_M68376 == 1)} then {write_tristate $cfg $autocfg CONFIG_68332_PORTE $CONFIG_68332_PORTE [list $notmod] 2 }
	global CONFIG_68332_KEYBOARD
	if {($CONFIG_M68332 == 1 || $CONFIG_M68376 == 1)} then {write_tristate $cfg $autocfg CONFIG_68332_KEYBOARD $CONFIG_68332_KEYBOARD [list $notmod] 2 }
	global CONFIG_LC7981
	if {($CONFIG_M68332 == 1 || $CONFIG_M68376 == 1)} then {write_tristate $cfg $autocfg CONFIG_LC7981 $CONFIG_LC7981 [list $notmod] 2 }
	global CONFIG_68302_SERIAL
	if {($CONFIG_M68EN302 == 1)} then {write_tristate $cfg $autocfg CONFIG_68302_SERIAL $CONFIG_68302_SERIAL [list $notmod] 2 }
	global CONFIG_COLDFIRE_SERIAL
	if {($CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_COLDFIRE_SERIAL $CONFIG_COLDFIRE_SERIAL [list $notmod] 2 }
	global CONFIG_SERIAL
	if {($CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_SERIAL $CONFIG_SERIAL [list $notmod] 2 }
	global CONFIG_MCF_MBUS
	if {($CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_MCF_MBUS $CONFIG_MCF_MBUS [list $notmod] 2 }
	global CONFIG_MCF_QSPI
	if {($CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_MCF_QSPI $CONFIG_MCF_QSPI [list $notmod] 2 }
	global CONFIG_LCDTXT
	if {($CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_LCDTXT $CONFIG_LCDTXT [list $notmod] 2 }
	global CONFIG_KEYPAD
	if {($CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_KEYPAD $CONFIG_KEYPAD [list $notmod] 2 }
	global CONFIG_LCDDMA
	if {($CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_LCDDMA $CONFIG_LCDDMA [list $notmod] 2 }
	global CONFIG_DAC0800
	if {($CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_DAC0800 $CONFIG_DAC0800 [list $notmod] 2 }
	global CONFIG_DACI2S
	if {($CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_DACI2S $CONFIG_DACI2S [list $notmod] 2 }
	global CONFIG_T6963
	if {($CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_T6963 $CONFIG_T6963 [list $notmod] 2 }
	global CONFIG_T6963_PIO
	if {($CONFIG_COLDFIRE == 1) && ($CONFIG_T6963 == 1)} then {write_tristate $cfg $autocfg CONFIG_T6963_PIO $CONFIG_T6963_PIO [list $notmod] 2 }
	global CONFIG_T6963_DMA
	if {($CONFIG_COLDFIRE == 1) && ($CONFIG_T6963 == 1) && ($CONFIG_T6963_PIO != 1)} then {write_tristate $cfg $autocfg CONFIG_T6963_DMA $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_LEDMAN
	if {($CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_LEDMAN $CONFIG_LEDMAN [list $notmod] 2 }
	global CONFIG_LIRC_INTR
	if {($CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_LIRC_INTR $CONFIG_LIRC_INTR [list $notmod] 2 }
	global CONFIG_IDETEST
	if {($CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_IDETEST $CONFIG_IDETEST [list $notmod] 2 }
	global CONFIG_RESETSWITCH
	if {($CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_RESETSWITCH $CONFIG_RESETSWITCH [list $notmod] 2 }
	global CONFIG_DS1302
	if {($CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_DS1302 $CONFIG_DS1302 [list $notmod] 2 }
	global CONFIG_EXP
	if {($CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_EXP $CONFIG_EXP [list $notmod] 2 }
	global CONFIG_WATCHDOG
	if {($CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_WATCHDOG $CONFIG_WATCHDOG [list $notmod] 2 }
	global CONFIG_72001_SERIAL
	if {($CONFIG_M68000 == 1)} then {write_tristate $cfg $autocfg CONFIG_72001_SERIAL $CONFIG_72001_SERIAL [list $notmod] 2 }
	global CONFIG_FT245_SERIAL
	if {($CONFIG_M68000 == 1)} then {write_tristate $cfg $autocfg CONFIG_FT245_SERIAL $CONFIG_FT245_SERIAL [list $notmod] 2 }
	global CONFIG_DS1743
	write_tristate $cfg $autocfg CONFIG_DS1743 $CONFIG_DS1743 [list $notmod] 2
	write_comment $cfg $autocfg "Sound support"
	global CONFIG_M5249AUDIO
	write_tristate $cfg $autocfg CONFIG_M5249AUDIO $CONFIG_M5249AUDIO [list $notmod] 2
	write_comment $cfg $autocfg "Kernel hacking"
	global CONFIG_FULLDEBUG
	write_tristate $cfg $autocfg CONFIG_FULLDEBUG $CONFIG_FULLDEBUG [list $notmod] 2
	global CONFIG_ALLOC2
	if {($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_ALLOC2 $CONFIG_ALLOC2 [list $notmod] 2 }
	global CONFIG_PROFILE
	write_tristate $cfg $autocfg CONFIG_PROFILE $CONFIG_PROFILE [list $notmod] 2
	global CONFIG_PROFILE_SHIFT
	if {($CONFIG_PROFILE == 1)} then {write_int $cfg $autocfg CONFIG_PROFILE_SHIFT $CONFIG_PROFILE_SHIFT $notmod }
	global CONFIG_HIGHPROFILE
	if {($CONFIG_PROFILE == 1)} then {write_tristate $cfg $autocfg CONFIG_HIGHPROFILE $CONFIG_HIGHPROFILE [list $notmod] 2 }
	global CONFIG_MAGIC_SYSRQ
	if {($CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_MAGIC_SYSRQ $CONFIG_MAGIC_SYSRQ [list $notmod] 2 }
	global CONFIG_DUMPTOFLASH
	if {($CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_DUMPTOFLASH $CONFIG_DUMPTOFLASH [list $notmod] 2 }
	global CONFIG_MEMORY_PROTECT
	if {($CONFIG_EXPERIMENTAL == 1 && $CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_MEMORY_PROTECT $CONFIG_MEMORY_PROTECT [list $notmod] 2 }
	global CONFIG_BDM_DISABLE
	if {($CONFIG_EXPERIMENTAL == 1 && $CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_BDM_DISABLE $CONFIG_BDM_DISABLE [list $notmod] 2 }
	close $cfg
	close $autocfg
}


proc clear_choices { } {
	global CONFIG_M68000; set CONFIG_M68000 0
	global CONFIG_M68EN302; set CONFIG_M68EN302 0
	global CONFIG_M68328; set CONFIG_M68328 0
	global CONFIG_M68EZ328; set CONFIG_M68EZ328 0
	global CONFIG_M68332; set CONFIG_M68332 0
	global CONFIG_M68360; set CONFIG_M68360 0
	global CONFIG_M68376; set CONFIG_M68376 0
	global CONFIG_M5204; set CONFIG_M5204 0
	global CONFIG_M5206; set CONFIG_M5206 0
	global CONFIG_M5206e; set CONFIG_M5206e 0
	global CONFIG_M5249; set CONFIG_M5249 0
	global CONFIG_M5272; set CONFIG_M5272 0
	global CONFIG_M5307; set CONFIG_M5307 0
	global CONFIG_M5407; set CONFIG_M5407 0
	global CONFIG_CLOCK_AUTO; set CONFIG_CLOCK_AUTO 0
	global CONFIG_CLOCK_11MHz; set CONFIG_CLOCK_11MHz 0
	global CONFIG_CLOCK_16MHz; set CONFIG_CLOCK_16MHz 0
	global CONFIG_CLOCK_20MHz; set CONFIG_CLOCK_20MHz 0
	global CONFIG_CLOCK_24MHz; set CONFIG_CLOCK_24MHz 0
	global CONFIG_CLOCK_25MHz; set CONFIG_CLOCK_25MHz 0
	global CONFIG_CLOCK_33MHz; set CONFIG_CLOCK_33MHz 0
	global CONFIG_CLOCK_40MHz; set CONFIG_CLOCK_40MHz 0
	global CONFIG_CLOCK_45MHz; set CONFIG_CLOCK_45MHz 0
	global CONFIG_CLOCK_48MHz; set CONFIG_CLOCK_48MHz 0
	global CONFIG_CLOCK_50MHz; set CONFIG_CLOCK_50MHz 0
	global CONFIG_CLOCK_54MHz; set CONFIG_CLOCK_54MHz 0
	global CONFIG_CLOCK_60MHz; set CONFIG_CLOCK_60MHz 0
	global CONFIG_CLOCK_64MHz; set CONFIG_CLOCK_64MHz 0
	global CONFIG_CLOCK_66MHz; set CONFIG_CLOCK_66MHz 0
	global CONFIG_CLOCK_70MHz; set CONFIG_CLOCK_70MHz 0
	global CONFIG_CLOCK_140MHz; set CONFIG_CLOCK_140MHz 0
	global CONFIG_SHGLCORE; set CONFIG_SHGLCORE 0
	global CONFIG_MWI; set CONFIG_MWI 0
	global CONFIG_SED_SIOS_MASTER; set CONFIG_SED_SIOS_MASTER 0
	global CONFIG_SED_SIOS_REMOTE; set CONFIG_SED_SIOS_REMOTE 0
	global CONFIG_RAMAUTO; set CONFIG_RAMAUTO 0
	global CONFIG_RAM05MB; set CONFIG_RAM05MB 0
	global CONFIG_RAM1MB; set CONFIG_RAM1MB 0
	global CONFIG_RAM2MB; set CONFIG_RAM2MB 0
	global CONFIG_RAM4MB; set CONFIG_RAM4MB 0
	global CONFIG_RAM8MB; set CONFIG_RAM8MB 0
	global CONFIG_RAM16MB; set CONFIG_RAM16MB 0
	global CONFIG_RAM32MB; set CONFIG_RAM32MB 0
	global CONFIG_RAM64MB; set CONFIG_RAM64MB 0
	global CONFIG_AUTOBIT; set CONFIG_AUTOBIT 0
	global CONFIG_RAM8BIT; set CONFIG_RAM8BIT 0
	global CONFIG_RAM16BIT; set CONFIG_RAM16BIT 0
	global CONFIG_RAM32bit; set CONFIG_RAM32bit 0
	global CONFIG_RAMKERNEL; set CONFIG_RAMKERNEL 0
	global CONFIG_ROMKERNEL; set CONFIG_ROMKERNEL 0
	global CONFIG_NOFLASH; set CONFIG_NOFLASH 0
	global CONFIG_AMDFLASH; set CONFIG_AMDFLASH 0
	global CONFIG_INTELFLASH; set CONFIG_INTELFLASH 0
	global CONFIG_FLASHAUTO; set CONFIG_FLASHAUTO 0
	global CONFIG_FLASH128KB; set CONFIG_FLASH128KB 0
	global CONFIG_FLASH512KB; set CONFIG_FLASH512KB 0
	global CONFIG_FLASH1MB; set CONFIG_FLASH1MB 0
	global CONFIG_FLASH2MB; set CONFIG_FLASH2MB 0
	global CONFIG_FLASH4MB; set CONFIG_FLASH4MB 0
	global CONFIG_FLASH6MB; set CONFIG_FLASH6MB 0
	global CONFIG_FLASH8MB; set CONFIG_FLASH8MB 0
	global CONFIG_FLASH16MB; set CONFIG_FLASH16MB 0
	global CONFIG_FLASHAUTOBIT; set CONFIG_FLASHAUTOBIT 0
	global CONFIG_FLASH8BIT; set CONFIG_FLASH8BIT 0
	global CONFIG_FLASH16BIT; set CONFIG_FLASH16BIT 0
	global CONFIG_FLASH32bit; set CONFIG_FLASH32bit 0
}


proc update_choices { } {
	global tmpvar_0
	set tmpvar_0 "M68EZ328"
	global CONFIG_M68000
	if { $CONFIG_M68000 == 1 } then { set tmpvar_0 "MC68000" }
	global CONFIG_M68EN302
	if { $CONFIG_M68EN302 == 1 } then { set tmpvar_0 "MC68EN302" }
	global CONFIG_M68328
	if { $CONFIG_M68328 == 1 } then { set tmpvar_0 "MC68328" }
	global CONFIG_M68EZ328
	if { $CONFIG_M68EZ328 == 1 } then { set tmpvar_0 "MC68EZ328" }
	global CONFIG_M68332
	if { $CONFIG_M68332 == 1 } then { set tmpvar_0 "MC68332" }
	global CONFIG_M68360
	if { $CONFIG_M68360 == 1 } then { set tmpvar_0 "MC68360" }
	global CONFIG_M68376
	if { $CONFIG_M68376 == 1 } then { set tmpvar_0 "MC68376" }
	global CONFIG_M5204
	if { $CONFIG_M5204 == 1 } then { set tmpvar_0 "MCF5204" }
	global CONFIG_M5206
	if { $CONFIG_M5206 == 1 } then { set tmpvar_0 "MCF5206" }
	global CONFIG_M5206e
	if { $CONFIG_M5206e == 1 } then { set tmpvar_0 "MCF5206e" }
	global CONFIG_M5249
	if { $CONFIG_M5249 == 1 } then { set tmpvar_0 "MCF5249" }
	global CONFIG_M5272
	if { $CONFIG_M5272 == 1 } then { set tmpvar_0 "MCF5272" }
	global CONFIG_M5307
	if { $CONFIG_M5307 == 1 } then { set tmpvar_0 "MCF5307" }
	global CONFIG_M5407
	if { $CONFIG_M5407 == 1 } then { set tmpvar_0 "MCF5407" }
	global tmpvar_1
	set tmpvar_1 "AUTO"
	global CONFIG_CLOCK_AUTO
	if { $CONFIG_CLOCK_AUTO == 1 } then { set tmpvar_1 "AUTO" }
	global CONFIG_CLOCK_11MHz
	if { $CONFIG_CLOCK_11MHz == 1 } then { set tmpvar_1 "11MHz" }
	global CONFIG_CLOCK_16MHz
	if { $CONFIG_CLOCK_16MHz == 1 } then { set tmpvar_1 "16MHz" }
	global CONFIG_CLOCK_20MHz
	if { $CONFIG_CLOCK_20MHz == 1 } then { set tmpvar_1 "20MHz" }
	global CONFIG_CLOCK_24MHz
	if { $CONFIG_CLOCK_24MHz == 1 } then { set tmpvar_1 "24MHz" }
	global CONFIG_CLOCK_25MHz
	if { $CONFIG_CLOCK_25MHz == 1 } then { set tmpvar_1 "25MHz" }
	global CONFIG_CLOCK_33MHz
	if { $CONFIG_CLOCK_33MHz == 1 } then { set tmpvar_1 "33MHz" }
	global CONFIG_CLOCK_40MHz
	if { $CONFIG_CLOCK_40MHz == 1 } then { set tmpvar_1 "40MHz" }
	global CONFIG_CLOCK_45MHz
	if { $CONFIG_CLOCK_45MHz == 1 } then { set tmpvar_1 "45MHz" }
	global CONFIG_CLOCK_48MHz
	if { $CONFIG_CLOCK_48MHz == 1 } then { set tmpvar_1 "48MHz" }
	global CONFIG_CLOCK_50MHz
	if { $CONFIG_CLOCK_50MHz == 1 } then { set tmpvar_1 "50MHz" }
	global CONFIG_CLOCK_54MHz
	if { $CONFIG_CLOCK_54MHz == 1 } then { set tmpvar_1 "54MHz" }
	global CONFIG_CLOCK_60MHz
	if { $CONFIG_CLOCK_60MHz == 1 } then { set tmpvar_1 "60MHz" }
	global CONFIG_CLOCK_64MHz
	if { $CONFIG_CLOCK_64MHz == 1 } then { set tmpvar_1 "64MHz" }
	global CONFIG_CLOCK_66MHz
	if { $CONFIG_CLOCK_66MHz == 1 } then { set tmpvar_1 "66MHz" }
	global CONFIG_CLOCK_70MHz
	if { $CONFIG_CLOCK_70MHz == 1 } then { set tmpvar_1 "70MHz" }
	global CONFIG_CLOCK_140MHz
	if { $CONFIG_CLOCK_140MHz == 1 } then { set tmpvar_1 "140MHz" }
	global tmpvar_2
	set tmpvar_2 "MWI"
	global CONFIG_SHGLCORE
	if { $CONFIG_SHGLCORE == 1 } then { set tmpvar_2 "SHGLCORE" }
	global CONFIG_MWI
	if { $CONFIG_MWI == 1 } then { set tmpvar_2 "MWI" }
	global tmpvar_3
	set tmpvar_3 "MASTER_CARD"
	global CONFIG_SED_SIOS_MASTER
	if { $CONFIG_SED_SIOS_MASTER == 1 } then { set tmpvar_3 "MASTER_CARD" }
	global CONFIG_SED_SIOS_REMOTE
	if { $CONFIG_SED_SIOS_REMOTE == 1 } then { set tmpvar_3 "REMOTE_CARD" }
	global tmpvar_4
	set tmpvar_4 "AUTO"
	global CONFIG_RAMAUTO
	if { $CONFIG_RAMAUTO == 1 } then { set tmpvar_4 "AUTO" }
	global CONFIG_RAM05MB
	if { $CONFIG_RAM05MB == 1 } then { set tmpvar_4 "0.5MB" }
	global CONFIG_RAM1MB
	if { $CONFIG_RAM1MB == 1 } then { set tmpvar_4 "1MB" }
	global CONFIG_RAM2MB
	if { $CONFIG_RAM2MB == 1 } then { set tmpvar_4 "2MB" }
	global CONFIG_RAM4MB
	if { $CONFIG_RAM4MB == 1 } then { set tmpvar_4 "4MB" }
	global CONFIG_RAM8MB
	if { $CONFIG_RAM8MB == 1 } then { set tmpvar_4 "8MB" }
	global CONFIG_RAM16MB
	if { $CONFIG_RAM16MB == 1 } then { set tmpvar_4 "16MB" }
	global CONFIG_RAM32MB
	if { $CONFIG_RAM32MB == 1 } then { set tmpvar_4 "32MB" }
	global CONFIG_RAM64MB
	if { $CONFIG_RAM64MB == 1 } then { set tmpvar_4 "64MB" }
	global tmpvar_5
	set tmpvar_5 "AUTO"
	global CONFIG_AUTOBIT
	if { $CONFIG_AUTOBIT == 1 } then { set tmpvar_5 "AUTO" }
	global CONFIG_RAM8BIT
	if { $CONFIG_RAM8BIT == 1 } then { set tmpvar_5 "8bit" }
	global CONFIG_RAM16BIT
	if { $CONFIG_RAM16BIT == 1 } then { set tmpvar_5 "16bit" }
	global CONFIG_RAM32bit
	if { $CONFIG_RAM32bit == 1 } then { set tmpvar_5 "32bit" }
	global tmpvar_6
	set tmpvar_6 "ROM"
	global CONFIG_RAMKERNEL
	if { $CONFIG_RAMKERNEL == 1 } then { set tmpvar_6 "RAM" }
	global CONFIG_ROMKERNEL
	if { $CONFIG_ROMKERNEL == 1 } then { set tmpvar_6 "ROM" }
	global tmpvar_7
	set tmpvar_7 "NONE"
	global CONFIG_NOFLASH
	if { $CONFIG_NOFLASH == 1 } then { set tmpvar_7 "NONE" }
	global CONFIG_AMDFLASH
	if { $CONFIG_AMDFLASH == 1 } then { set tmpvar_7 "AMD" }
	global CONFIG_INTELFLASH
	if { $CONFIG_INTELFLASH == 1 } then { set tmpvar_7 "INTEL" }
	global tmpvar_8
	set tmpvar_8 "AUTO"
	global CONFIG_FLASHAUTO
	if { $CONFIG_FLASHAUTO == 1 } then { set tmpvar_8 "AUTO" }
	global CONFIG_FLASH128KB
	if { $CONFIG_FLASH128KB == 1 } then { set tmpvar_8 "128KB" }
	global CONFIG_FLASH512KB
	if { $CONFIG_FLASH512KB == 1 } then { set tmpvar_8 "512KB" }
	global CONFIG_FLASH1MB
	if { $CONFIG_FLASH1MB == 1 } then { set tmpvar_8 "1MB" }
	global CONFIG_FLASH2MB
	if { $CONFIG_FLASH2MB == 1 } then { set tmpvar_8 "2MB" }
	global CONFIG_FLASH4MB
	if { $CONFIG_FLASH4MB == 1 } then { set tmpvar_8 "4MB" }
	global CONFIG_FLASH6MB
	if { $CONFIG_FLASH6MB == 1 } then { set tmpvar_8 "6MB" }
	global CONFIG_FLASH8MB
	if { $CONFIG_FLASH8MB == 1 } then { set tmpvar_8 "8MB" }
	global CONFIG_FLASH16MB
	if { $CONFIG_FLASH16MB == 1 } then { set tmpvar_8 "16MB" }
	global tmpvar_9
	set tmpvar_9 "AUTO"
	global CONFIG_FLASHAUTOBIT
	if { $CONFIG_FLASHAUTOBIT == 1 } then { set tmpvar_9 "AUTO" }
	global CONFIG_FLASH8BIT
	if { $CONFIG_FLASH8BIT == 1 } then { set tmpvar_9 "8bit" }
	global CONFIG_FLASH16BIT
	if { $CONFIG_FLASH16BIT == 1 } then { set tmpvar_9 "16bit" }
	global CONFIG_FLASH32bit
	if { $CONFIG_FLASH32bit == 1 } then { set tmpvar_9 "32bit" }
}


proc update_define_mainmenu {} {
	global CONFIG_MODULES
	global CONFIG_UCLINUX
	global CONSTANT_Y
	set CONFIG_UCLINUX $CONSTANT_Y
}


set defaults "arch/m68knommu/defconfig"
# FILE: tail.tk
# This file is boilerplate TCL/TK function definitions for 'make xconfig'.
#
# CHANGES
# =======
#
# 8 January 1998, Michael Elizabeth Chastain, <mec@shout.net>
# Arrange buttons in three columns for better screen fitting.
#

#
# Read the user's settings from .config.  These will override whatever is
# in config.in.  Don't do this if the user specified a -D to force
# the defaults.
#
if { [file readable .config] == 1} then {
	if { $argc > 0 } then {
		if { [lindex $argv 0] != "-D" } then {
			read_config .config
		}
		else
		{
			read_config $defaults
		}
	} else {
		read_config .config
	}
} else {
	read_config $defaults
}

update_define 1 $total_menus 0
update_mainmenu

if { [file exists include/linux/] == 1 } then {
	set autoconf_file "include/linux/autoconf.h"
} else {
	set autoconf_file "/dev/null"
}

button .f0.right.save -anchor w -text "Save and Exit" \
    -command {
		catch {exec cp -f .config .config.old}
		writeconfig .config $autoconf_file;
		if { [file exists include/linux/] == 1 } then {
			wrapup .wrap
		} else {
			exit
		}
	}

button .f0.right.quit -anchor w -text "Quit Without Saving" \
    -command { maybe_exit .maybe }

button .f0.right.load -anchor w -text "Load Configuration from File" \
    -command { load_configfile .load "Load Configuration from file" read_config_file
}

button .f0.right.store -anchor w -text "Store Configuration to File" \
    -command { load_configfile .load "Store Configuration to file" write_config_file }

#
# Now pack everything.
#

pack .f0.right.store .f0.right.load .f0.right.quit .f0.right.save \
    -padx 0 -pady 0 -side bottom -fill x
pack .f0.left .f0.middle .f0.right -side left -padx 5 -pady 0 -fill y
pack .f0 -padx 5 -pady 5

update idletasks
set winy [expr 10 + [winfo reqheight .f0]]
set scry [lindex [wm maxsize .] 1]
set winx [expr 10 + [winfo reqwidth .f0]]
set scrx [lindex [wm maxsize .] 0]
if {$winx < $scrx} then {set maxx -1} else {set maxx $winx}
if {$winy < $scry} then {set maxy -1} else {set maxy $winy}
.f0 configure -width $winx -height $winy 
wm maxsize . $maxx $maxy

#
# If we cannot write our config files, disable the write button.
#
if { [file exists .config] == 1 } then {
		if { [file writable .config] == 0 } then {
			.f0.right.save configure -state disabled
		}
	} else {
		if { [file writable .] == 0 } then {
			.f0.right.save configure -state disabled
		}
	}

if { [file exists $autoconf_file] == 1 } then {
		if { [file writable $autoconf_file] == 0 } then {
			.f0.right.save configure -state disabled
		}
	} else {
		if { [file writable include/linux/] == 0 } then {
			.f0.right.save configure -state disabled
		}
	}
